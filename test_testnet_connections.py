#!/usr/bin/env python3
import ccxt
import os
import asyncio

async def test_testnet_connections():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ testnet/sandbox —Ä–µ–∂–∏–º–∞—Ö"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TESTNET/SANDBOX –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
    print("=" * 55)
    
    results = {}
    
    # OKX Testnet (demo keys)
    print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OKX (testnet):")
    try:
        okx = ccxt.okx({
            'apiKey': 'ab4f2fe8-e2c4-4d18-9712-d21c8f2f187c',
            'secret': 'FC63C15B1D2DB5C73632ED5BACE49290',
            'password': 'Egor1998!',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'enableRateLimit': True,
        })
        markets = okx.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        balance = okx.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0)
        print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
        results['okx'] = True
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['okx'] = False
    
    # Bitget Testnet
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitget (testnet):")
    try:
        bitget = ccxt.bitget({
            'apiKey': 'bg_1d2ce1e1b74f17527e88d0aaff6609a0',
            'secret': '311ad3c3d52e3caa1af61f27049fc0dcefce16ec94192eb7795698fc1f5ef4da',
            'password': '0502794579Egor',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'test': True,
            'enableRateLimit': True,
        })
        
        markets = bitget.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        balance = bitget.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0)
        print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
        results['bitget'] = True
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['bitget'] = False
    
    # Phemex Testnet (–Ω–æ–≤—ã–µ –∫–ª—é—á–∏)
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Phemex (testnet —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏):")
    try:
        phemex = ccxt.phemex({
            'apiKey': '3f9decb6-b6bf-453f-b27e-087ee595812d',
            'secret': 'bohdKr9wmSL_OBtJtP3T9TcJkTADnqCEKvIRC3znTUs5Y2FkYTg2ZS1iNzMxLTQ4NmQtODk0Ni1mZmFhM2JiMWQ5MWI',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'enableRateLimit': True,
        })
        
        markets = phemex.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        balance = phemex.fetch_balance()
        usdt_balance = balance.get('USDT', {}).get('free', 0)
        print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
        results['phemex'] = True
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['phemex'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ TESTNET –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    working = sum(1 for r in results.values() if r)
    print(f"  –†–∞–±–æ—Ç–∞—é—â–∏—Ö –±–∏—Ä–∂: {working}/3")
    
    for exchange, status in results.items():
        emoji = "‚úÖ" if status else "‚ùå"
        print(f"  {emoji} {exchange.upper()}: {'–†–∞–±–æ—Ç–∞–µ—Ç' if status else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if working >= 2:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É testnet –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞!")
    else:
        print("\n‚ö†Ô∏è –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    return results

if __name__ == "__main__":
    asyncio.run(test_testnet_connections())
