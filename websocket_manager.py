#!/usr/bin/env python3
"""
üåê WEBSOCKET MANAGER
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
"""

import asyncio
import websockets
import json
import time
import logging
import aiohttp
import gzip
import random  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å random –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
from typing import Dict, List, Optional, Callable, Any, Tuple, Union
from dataclasses import dataclass
from collections import defaultdict, deque
from urllib.parse import urlsplit, urlparse
from production_config import EXCHANGES_CONFIG, WEBSOCKET_CONFIG, PROXY_CONFIG, API_KEYS, TRADING_CONFIG
from symbol_utils import normalize_symbol

logger = logging.getLogger('WSManager')

@dataclass
class OrderBook:
    """–°—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤"""
    symbol: str
    exchange: str
    bids: List[tuple]  # [(price, volume), ...]
    asks: List[tuple]
    timestamp: float
    
    @property
    def best_bid(self) -> Optional[float]:
        return self.bids[0][0] if self.bids else None
    
    @property
    def best_ask(self) -> Optional[float]:
        return self.asks[0][0] if self.asks else None
    
    @property
    def spread(self) -> Optional[float]:
        if self.best_bid and self.best_ask:
            return (self.best_ask - self.best_bid) / self.best_bid * 100
        return None
    
    @property
    def age(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return time.time() - self.timestamp
    
    def get_depth_volume(self, levels: int = 5) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –Ω–∞ –≥–ª—É–±–∏–Ω–µ"""
        bid_vol = sum(v for _, v in self.bids[:levels])
        ask_vol = sum(v for _, v in self.asks[:levels])
        return {'bid': bid_vol, 'ask': ask_vol}

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, on_orderbook_update: Optional[Callable] = None, on_ticker_update: Optional[Callable] = None):
        self.connections = {}
        self.subscriptions = defaultdict(set)
        self.reconnect_delays = defaultdict(lambda: WEBSOCKET_CONFIG['reconnect_delay'])
        self.running = False
        self.on_orderbook_update = on_orderbook_update
        self.on_ticker_update = on_ticker_update
        self.last_ping = defaultdict(float)
        self.message_counts = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        self.error_counts = defaultdict(int)    # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        self.orderbooks = {}  # –ö—ç—à –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
        self.last_update_time = defaultdict(float)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self.message_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        self.exchanges = [ex for ex, conf in EXCHANGES_CONFIG.items() if conf.get('enabled', False)]
        logger.info(f"–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ù–∞–π–¥–µ–Ω–æ {len(self.exchanges)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {self.exchanges}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        for ex in self.exchanges:
            self.message_counts[ex] = 0
            self.error_counts[ex] = 0
            self.last_ping[ex] = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∏—Ä–∂—É –æ—Ç–¥–µ–ª—å–Ω–æ
        for ex, conf in EXCHANGES_CONFIG.items():
            enabled = conf.get('enabled', False)
            logger.info(f"   {ex}: enabled={enabled}, websocket={conf.get('websocket', False)}")
        
    async def start(self, symbols: List[str]):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.running = True
        self.symbols = symbols
        self.use_websocket = TRADING_CONFIG.get('use_websocket', True)
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ | WebSocket={self.use_websocket}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ KeyError –ø—Ä–∏ —Ä–∞–Ω–Ω–∏—Ö –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ö)
        for ex in self.exchanges:
            if ex not in self.message_counts:
                self.message_counts[ex] = 0
            if ex not in self.error_counts:
                self.error_counts[ex] = 0
        if self.use_websocket:
            # –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ (—É—á–∏—Ç—ã–≤–∞–µ–º per-exchange —Ñ–ª–∞–≥ websocket)
            tasks = []
            logger.info(f"–ê–ö–¢–ò–í–ù–´–ï –ë–ò–†–ñ–ò (WS): {self.exchanges}")
            
            for exchange in self.exchanges:
                if not EXCHANGES_CONFIG.get(exchange, {}).get('websocket', False):
                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫ WS –¥–ª—è {exchange}: websocket=false")
                    continue
                logger.info(f"–ü–´–¢–ê–ï–ú–°–Ø –ó–ê–ü–£–°–¢–ò–¢–¨ WS: {exchange}")
                if exchange == 'mexc':
                    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC WebSocket...")
                    tasks.append(self._connect_mexc())
                    # –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º REST API –∫–∞–∫ backup
                    asyncio.create_task(self._poll_mexc_rest())
                elif exchange == 'bybit':
                    logger.info("–ó–ê–ü–£–°–ö BYBIT!")
                    tasks.append(self._connect_bybit())
                elif exchange == 'huobi':
                    logger.info("–ó–ê–ü–£–°–ö HUOBI!")
                    tasks.append(self._connect_huobi())
                elif exchange == 'binance':
                    logger.info("–ó–ê–ü–£–°–ö BINANCE!")
                    tasks.append(self._connect_binance())
                elif exchange == 'okx':
                    tasks.append(self._connect_okx())
                elif exchange == 'gate':
                    tasks.append(self._connect_gate())
                elif exchange == 'kucoin':
                    tasks.append(self._connect_kucoin())
                elif exchange == 'kraken':
                    tasks.append(self._connect_kraken())
                elif exchange == 'bitget':
                    tasks.append(self._connect_bitget())
                elif exchange == 'phemex':
                    tasks.append(self._connect_phemex())
            
            logger.info(f"–ì–û–¢–û–í–ò–ú–°–Ø –ó–ê–ü–£–°–¢–ò–¢–¨ {len(tasks)} –∑–∞–¥–∞—á WebSocket")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            if tasks:
                for i, task in enumerate(tasks):
                    logger.info(f"–ó–ê–ü–£–°–ö–ê–ï–ú –ó–ê–î–ê–ß–£ {i}: {task}")
                    try:
                        async_task = asyncio.create_task(task)
                        def handle_task_exception(task_obj):
                            try:
                                task_obj.result()
                            except Exception as e:
                                logger.error(f"WebSocket –∑–∞–¥–∞—á–∞ {i} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
                        async_task.add_done_callback(handle_task_exception)
                        logger.info(f"–ó–∞–¥–∞—á–∞ {i} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ {i}: {e}")
            else:
                logger.warning("–ù–µ—Ç WS –∑–∞–¥–∞—á –∫ –∑–∞–ø—É—Å–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∑–∞–ø—É—Å–∫–∞–µ–º REST-–ø–æ–ª–ª–µ—Ä—ã –¥–ª—è –±–∏—Ä–∂, —É –∫–æ—Ç–æ—Ä—ã—Ö WS –æ—Ç–∫–ª—é—á—ë–Ω, –Ω–æ poll_rest –≤–∫–ª—é—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, Phemex)
            for ex in self.exchanges:
                ex_conf = EXCHANGES_CONFIG.get(ex, {})
                if ex_conf.get('poll_rest', False) and not ex_conf.get('websocket', False):
                    if ex == 'phemex':
                        logger.info("–ó–∞–ø—É—Å–∫ REST polling –¥–ª—è Phemex (websocket=false)")
                        asyncio.create_task(self._poll_phemex_rest())
        else:
            # –†–µ–∂–∏–º REST polling (–¥–µ–º–æ/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞)
            logger.info("WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ó–∞–ø—É—Å–∫ REST polling –∑–∞–¥–∞—á...")
            targets = set(s.replace('/', '').upper() for s in self.symbols if 'USDT' in s)
            logger.info(f"REST poll targets (–ø—Ä–∏–º–µ—Ä): {list(targets)[:5]} ... –≤—Å–µ–≥–æ {len(targets)}")
            # –ó–∞–ø—É—Å–∫–∞–µ–º pollers –¢–û–õ–¨–ö–û –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂ —Å poll_rest=true
            ex_poll_targets = [ex for ex, conf in EXCHANGES_CONFIG.items() if conf.get('enabled', False) and conf.get('poll_rest', False)]
            logger.info(f"REST pollers –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {ex_poll_targets}")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö REST-—Ü–µ–ª–µ–π (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ KeyError)
            for ex in ex_poll_targets:
                if ex not in self.message_counts:
                    self.message_counts[ex] = 0
                if ex not in self.error_counts:
                    self.error_counts[ex] = 0
            # –°—Ç–∞—Ä—Ç—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ pollers
            if 'mexc' in ex_poll_targets:
                asyncio.create_task(self._poll_mexc_rest())
            if 'bybit' in ex_poll_targets:
                asyncio.create_task(self._poll_bybit_rest())
            if 'binance' in ex_poll_targets:
                asyncio.create_task(self._poll_binance_rest())
            if 'okx' in ex_poll_targets:
                asyncio.create_task(self._poll_okx_rest())
            if 'gate' in ex_poll_targets:
                asyncio.create_task(self._poll_gate_rest())
            if 'bitget' in ex_poll_targets:
                asyncio.create_task(self._poll_bitget_rest())
            if 'huobi' in ex_poll_targets:
                asyncio.create_task(self._poll_huobi_rest())
            if 'phemex' in ex_poll_targets:
                asyncio.create_task(self._poll_phemex_rest())
    
    async def _poll_mexc_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MEXC —á–µ—Ä–µ–∑ REST API"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è MEXC")
        
        while self.running:
            try:
                async with aiohttp.ClientSession() as session:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    mexc_symbols = [s.replace('/', '') for s in self.symbols if 'USDT' in s]
                    
                    # MEXC API endpoint –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
                    url = f"{EXCHANGES_CONFIG['mexc']['rest_url']}/api/v3/ticker/24hr"
                    
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            tickers = await resp.json()
                            
                            for ticker in tickers:
                                symbol = ticker.get('symbol', '')
                                if symbol in mexc_symbols:
                                    # –°–æ–∑–¥–∞–µ–º OrderBook –∏–∑ —Ç–∏–∫–µ—Ä–∞
                                    bid_price = float(ticker.get('bidPrice', 0))
                                    ask_price = float(ticker.get('askPrice', 0))
                                    
                                    if bid_price > 0 and ask_price > 0:
                                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                                        base = symbol[:-4]  # –£–±–∏—Ä–∞–µ–º USDT
                                        formatted_symbol = normalize_symbol(f"{base}/USDT")
                                        
                                        orderbook = OrderBook(
                                            symbol=formatted_symbol,
                                            exchange='mexc',
                                            bids=[(bid_price, float(ticker.get('bidQty', 1)))],
                                            asks=[(ask_price, float(ticker.get('askQty', 1)))],
                                            timestamp=time.time()
                                        )
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                                        if 'mexc' not in self.orderbooks:
                                            self.orderbooks['mexc'] = {}
                                        self.orderbooks['mexc'][formatted_symbol] = orderbook
                                        
                                        if self.on_orderbook_update:
                                            await self.on_orderbook_update(orderbook)
                            
                            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫–∏ MEXC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (REST-–ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ä–∞–Ω—å—à–µ WS)
                            if 'mexc' not in self.message_counts:
                                self.message_counts['mexc'] = 0
                            if 'mexc' not in self.error_counts:
                                self.error_counts['mexc'] = 0
                            
                            self.message_counts['mexc'] += len(mexc_symbols)
                            logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(mexc_symbols)} –ø–∞—Ä")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º rate limits)
                await asyncio.sleep(2)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ MEXC REST API: {e}")
                await asyncio.sleep(5)
    
    # =====================
    # REST polling helpers
    # =====================
    async def _poll_bybit_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Bybit —á–µ—Ä–µ–∑ REST (v5 tickers, SPOT)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Bybit")
        while self.running:
            try:
                url = f"{EXCHANGES_CONFIG['bybit']['rest_url']}/v5/market/tickers?category=spot"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            payload = await resp.json()
                            items = (payload.get('result') or {}).get('list', [])
                            targets = set(s.replace('/', '').upper() for s in self.symbols if 'USDT' in s)
                            for it in items:
                                symbol = it.get('symbol', '')
                                if symbol not in targets:
                                    continue
                                bid = float(it.get('bid1Price') or it.get('bidPrice') or 0)  # —Ä–∞–∑–Ω—ã–µ —Ä–µ–≤–∏–∑–∏–∏
                                ask = float(it.get('ask1Price') or it.get('askPrice') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(f"{symbol[:-4]}/USDT")
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='bybit',
                                        bids=[(bid, float(it.get('bid1Size') or 1))],
                                        asks=[(ask, float(it.get('ask1Size') or 1))],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['bybit'] += len(items)
                await asyncio.sleep(EXCHANGES_CONFIG['bybit'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Bybit REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_binance_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Binance —á–µ—Ä–µ–∑ REST (bookTicker)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Binance")
        while self.running:
            try:
                url = f"{EXCHANGES_CONFIG['binance']['rest_url']}/api/v3/ticker/bookTicker"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            targets = set(s.replace('/', '').upper() for s in self.symbols if 'USDT' in s)
                            for item in data:
                                symbol = item.get('symbol', '')
                                if symbol not in targets:
                                    continue
                                bid = float(item.get('bidPrice') or 0)
                                ask = float(item.get('askPrice') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(f"{symbol[:-4]}/USDT")
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='binance',
                                        bids=[(bid, float(item.get('bidQty') or 1))],
                                        asks=[(ask, float(item.get('askQty') or 1))],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['binance'] += len(data)
                await asyncio.sleep(EXCHANGES_CONFIG['binance'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Binance REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_okx_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask OKX —á–µ—Ä–µ–∑ REST (tickers SPOT)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è OKX")
        while self.running:
            try:
                url = "https://www.okx.com/api/v5/market/tickers?instType=SPOT"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            payload = await resp.json()
                            items = payload.get('data', [])
                            targets = set(s.replace('/', '').upper().replace('/', '') for s in self.symbols if 'USDT' in s)
                            for it in items:
                                inst_id = it.get('instId', '')  # e.g., BTC-USDT
                                flat = inst_id.replace('-', '')
                                if flat not in targets:
                                    continue
                                bid = float(it.get('bidPx') or 0)
                                ask = float(it.get('askPx') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(inst_id.replace('-', '/'))
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='okx',
                                        bids=[(bid, float(it.get('bidSz') or 1))],
                                        asks=[(ask, float(it.get('askSz') or 1))],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['okx'] += len(items)
                await asyncio.sleep(EXCHANGES_CONFIG['okx'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ OKX REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_gate_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Gate.io —á–µ—Ä–µ–∑ REST (tickers)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Gate.io")
        while self.running:
            try:
                url = "https://api.gateio.ws/api/v4/spot/tickers"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            targets = set(s.replace('/', '_').upper() for s in self.symbols if 'USDT' in s)
                            for item in data:
                                cp = item.get('currency_pair', '')
                                if cp.upper() not in targets:
                                    continue
                                bid = float(item.get('highest_bid') or 0)
                                ask = float(item.get('lowest_ask') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(cp.replace('_', '/'))
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='gate',
                                        bids=[(bid, 1.0)],
                                        asks=[(ask, 1.0)],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['gate'] += len(data)
                await asyncio.sleep(EXCHANGES_CONFIG['gate'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Gate REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_bitget_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Bitget —á–µ—Ä–µ–∑ REST (tickers)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Bitget")
        while self.running:
            try:
                url = "https://api.bitget.com/api/spot/v1/market/tickers"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            payload = await resp.json()
                            items = payload.get('data', [])
                            targets = set(s.replace('/', '').upper() for s in self.symbols if 'USDT' in s)
                            for it in items:
                                symbol = it.get('symbol', '')  # e.g., BTCUSDT
                                if symbol not in targets:
                                    continue
                                bid = float(it.get('buyOne') or it.get('bestBid') or it.get('bidPr') or 0)
                                ask = float(it.get('sellOne') or it.get('bestAsk') or it.get('askPr') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(f"{symbol[:-4]}/USDT")
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='bitget',
                                        bids=[(bid, float(it.get('bidSz') or 1))],
                                        asks=[(ask, float(it.get('askSz') or 1))],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['bitget'] += len(items)
                await asyncio.sleep(EXCHANGES_CONFIG['bitget'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Bitget REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_huobi_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Huobi (HTX) —á–µ—Ä–µ–∑ REST (market/tickers)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Huobi")
        while self.running:
            try:
                url = f"{EXCHANGES_CONFIG['huobi']['rest_url']}/market/tickers"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            payload = await resp.json()
                            items = payload.get('data', [])
                            targets = set(s.replace('/', '').lower() for s in self.symbols if 'USDT' in s)
                            for it in items:
                                sym = it.get('symbol', '')  # e.g., btcusdt
                                if sym not in targets:
                                    continue
                                bid = float(it.get('bid') or 0)
                                ask = float(it.get('ask') or 0)
                                if bid > 0 and ask > 0:
                                    formatted = normalize_symbol(f"{sym[:-4].upper()}/USDT")
                                    ob = OrderBook(
                                        symbol=formatted,
                                        exchange='huobi',
                                        bids=[(bid, 1.0)],
                                        asks=[(ask, 1.0)],
                                        timestamp=time.time()
                                    )
                                    if self.on_orderbook_update:
                                        await self.on_orderbook_update(ob)
                            self.message_counts['huobi'] += len(items)
                await asyncio.sleep(EXCHANGES_CONFIG['huobi'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Huobi REST API: {e}")
                await asyncio.sleep(5)

    async def _poll_phemex_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ best bid/ask Phemex —á–µ—Ä–µ–∑ REST (spot ticker 24hr)"""
        logger.info("–ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è Phemex")
        while self.running:
            try:
                targets = set(s.replace('/', '').upper() for s in self.symbols if 'USDT' in s)
                updated = 0
                base = EXCHANGES_CONFIG['phemex']['rest_url']
                endpoints = [
                    f"{base}/md/spot/ticker/24hr",
                    f"{base}/md/spot/tickers",
                ]
                async with aiohttp.ClientSession() as session:
                    payload = None
                    for url in endpoints:
                        try:
                            async with session.get(url) as resp:
                                if resp.status == 200:
                                    payload = await resp.json()
                                    logger.info(f"Phemex REST: –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç {url}")
                                    break
                                else:
                                    logger.debug(f"Phemex REST: {url} -> HTTP {resp.status}")
                        except Exception as e:
                            logger.debug(f"Phemex REST: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")

                    if payload is not None:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ç–≤–µ—Ç–∞
                        tickers = []
                        if isinstance(payload, dict):
                            if isinstance(payload.get('data'), dict):
                                tickers = payload['data'].get('tickers') or payload['data'].get('rows') or []
                            elif isinstance(payload.get('result'), dict):
                                tickers = payload['result'].get('tickers') or payload['result'].get('rows') or []
                            elif isinstance(payload.get('tickers'), list):
                                tickers = payload.get('tickers')
                        elif isinstance(payload, list):
                            tickers = payload

                        for it in tickers or []:
                            sym = (it.get('symbol') or it.get('symbolName') or it.get('sym') or '').upper()
                            if not sym or sym not in targets:
                                continue

                            bid = ask = 0.0
                            if ('bidEp' in it) or ('askEp' in it):
                                bid = float(it.get('bidEp') or 0) / 10000.0
                                ask = float(it.get('askEp') or 0) / 10000.0
                            elif ('bidPx' in it) or ('askPx' in it):
                                bid = float(it.get('bidPx') or 0)
                                ask = float(it.get('askPx') or 0)
                            elif ('bid' in it) or ('ask' in it):
                                bid = float(it.get('bid') or 0)
                                ask = float(it.get('ask') or 0)

                            if bid > 0 and ask > 0:
                                formatted = normalize_symbol(f"{sym[:-4]}/USDT" if sym.endswith('USDT') else sym.replace('-', '/'))
                                ob = OrderBook(
                                    symbol=formatted,
                                    exchange='phemex',
                                    bids=[(bid, 1.0)],
                                    asks=[(ask, 1.0)],
                                    timestamp=time.time()
                                )
                                if self.on_orderbook_update:
                                    await self.on_orderbook_update(ob)
                                updated += 1

                        # –£–≤–µ–ª–∏—á–∏–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                        if 'phemex' not in self.message_counts:
                            self.message_counts['phemex'] = 0
                        self.message_counts['phemex'] += updated

                await asyncio.sleep(EXCHANGES_CONFIG['phemex'].get('poll_interval', 2))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Phemex REST API: {e}")
                await asyncio.sleep(5)

    async def _connect_bitget(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitget WebSocket (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
        logger.info("Bitget WebSocket –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        return
        rate_limit_delay = 5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ rate limit (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
        max_rate_limit_delay = 300  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 –º–∏–Ω—É—Ç
        last_rate_limit_time = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        consecutive_errors = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        max_consecutive_errors = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        
        while self.running:
            try:
                # –û—Å–Ω–æ–≤–Ω–æ–π URL –±–µ—Ä—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞. –î–ª—è demo wspap public –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ wspap private,
                # –∏–Ω–∞—á–µ fallback –Ω–∞ legacy v1 production.
                primary_url = EXCHANGES_CONFIG['bitget']['ws_url']
                if 'wspap.bitget.com' in primary_url and '/public' in primary_url:
                    fallback_url = 'wss://wspap.bitget.com/v2/ws/private'
                else:
                    fallback_url = 'wss://ws.bitget.com/spot/v1/stream'
                urls = [primary_url]
                if fallback_url != primary_url:
                    urls.append(fallback_url)

                # Bitget —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏ –¥–ª—è WebSocket (–¥–ª—è login)
                api_key = API_KEYS.get('bitget', {}).get('apiKey') or API_KEYS.get('bitget', {}).get('api_key')
                secret = API_KEYS.get('bitget', {}).get('secret')
                passphrase = API_KEYS.get('bitget', {}).get('passphrase', '')

                if not api_key or not secret:
                    logger.error("Bitget API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    await asyncio.sleep(30)
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                if rate_limit_delay > 0:
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {rate_limit_delay} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
                    await asyncio.sleep(rate_limit_delay)

                connected = False
                last_exc: Optional[Exception] = None

                for url in urls:
                    if not self.running:
                        break
                    try:
                        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitget WebSocket: {url}")
                        # –î–ª—è demo-–æ–∫—Ä—É–∂–µ–Ω–∏—è Bitget —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ PAPTRADING=1
                        extra_headers = {}
                        try:
                            bitget_env = str(API_KEYS.get('bitget', {}).get('env', '')).lower()
                            if bitget_env == 'demo' or TRADING_CONFIG.get('mode') in ('demo', 'paper'):
                                extra_headers['paptrading'] = '1'
                                logger.info("Bitget: –∏—Å–ø–æ–ª—å–∑—É–µ–º paptrading=1 (demo)")
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Bitget: {e}")
                            
                        # –î–æ–±–∞–≤–ª—è–µ–º User-Agent –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        extra_headers.update({
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                            'Accept-Encoding': 'gzip, deflate, br',
                            'Accept': 'application/json'
                        })
                            
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        connect_timeout = 15
                        if rate_limit_delay > 10:  # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ rate limit, –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            connect_timeout = 30
                            
                        async with websockets.connect(
                            url,
                            extra_headers=extra_headers if extra_headers else None,
                            ping_interval=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞
                            ping_timeout=15,   # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–∏–Ω–≥–∞
                            close_timeout=15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
                            open_timeout=connect_timeout,  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            max_size=10 * 1024 * 1024  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                        ) as ws:
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                            if rate_limit_delay > 5:
                                rate_limit_delay = 5
                                logger.info("–°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget")
                                
                            self.connections['bitget'] = ws
                            logger.info("Bitget WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

                            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (login) —Ç–æ–ª—å–∫–æ –Ω–∞ private —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
                            is_public = '/public' in url
                            if not is_public:
                                ts = str(int(time.time()))
                                msg = ts + 'GET' + '/user/verify'
                                import hmac
                                import hashlib
                                import base64
                                sign = base64.b64encode(
                                    hmac.new(secret.encode(), msg.encode(), hashlib.sha256).digest()
                                ).decode()

                                auth_msg = {
                                    "op": "login",
                                    "args": [{
                                        "apiKey": api_key,
                                        "passphrase": passphrase,
                                        "timestamp": ts,
                                        "sign": sign
                                    }]
                                }
                                
                                try:
                                    await ws.send(json.dumps(auth_msg))
                                    logger.info("Bitget: login –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (passphrase –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

                                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º—Å—è –Ω–∞–¥–æ–ª–≥–æ: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–π–º–∞—Ç—å login ack –¥–æ –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–æ 5—Å)
                                    login_checked = False
                                    start_wait = time.time()
                                    login_attempts = 0
                                    max_login_attempts = 2
                                    
                                    while login_attempts < max_login_attempts and time.time() - start_wait < 5:
                                        try:
                                            raw = await asyncio.wait_for(ws.recv(), timeout=1.0)
                                            data = None
                                            try:
                                                data = json.loads(raw)
                                            except json.JSONDecodeError as je:
                                                logger.warning(f"Bitget: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {je}, raw: {raw[:200]}...")
                                                continue
                                                
                                            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                            if 'bitget' not in self.message_counts or self.message_counts['bitget'] < 5:
                                                logger.info(f"Bitget raw: {raw[:200]}...")
                                            
                                            if isinstance(data, dict):
                                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ rate limit
                                                if data.get('code') == '30016' or 'too many requests' in str(data).lower():
                                                    rate_limit_delay = min(rate_limit_delay * 2, max_rate_limit_delay)
                                                    logger.warning(f"Bitget: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {rate_limit_delay} —Å–µ–∫.")
                                                    await asyncio.sleep(rate_limit_delay)
                                                    break
                                                    
                                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
                                                if 'event' in data and 'login' in str(data.get('event', '')).lower():
                                                    code = str(data.get('code', ''))
                                                    if code in ('', '0', '00000', 'success'):
                                                        logger.info(f"Bitget: login ack ‚úÖ code={code}")
                                                        login_checked = True
                                                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ª–æ–≥–∏–Ω–µ
                                                        if rate_limit_delay > 5:
                                                            old_delay = rate_limit_delay
                                                            rate_limit_delay = 5
                                                            logger.info(f"Bitget: —Å–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ —Å {old_delay} –¥–æ {rate_limit_delay} —Å–µ–∫.")
                                                        break
                                                    else:
                                                        logger.error(f"Bitget: login ack ‚ùå code={code} msg={data.get('msg', '')}")
                                                        login_attempts += 1
                                                        if login_attempts >= max_login_attempts:
                                                            logger.error("Bitget: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
                                                            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Bitget")
                                                        await asyncio.sleep(1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                                        
                                        except asyncio.TimeoutError:
                                            logger.warning("Bitget: —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–æ–≥–∏–Ω")
                                            break
                                        except Exception as e:
                                            logger.error(f"Bitget: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–æ–≥–∏–Ω: {e}", exc_info=True)
                                            break
                                            
                                    if not login_checked:
                                        logger.warning("Bitget: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                                        
                                except Exception as e:
                                    logger.error(f"Bitget: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∏–Ω–∞: {e}")
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                            else:
                                logger.info("Bitget: public WS ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º login")

                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã –∏ —Å—Ç–∞–∫–∞–Ω—ã —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã –ø–µ—Ä–≤—ã–º–∏
                            priority_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT', 'ADA/USDT', 'DOGE/USDT']
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            all_pairs = list(dict.fromkeys(
                                [p for p in priority_pairs if p in self.symbols] + 
                                [s for s in self.symbols if s not in priority_pairs and 'USDT' in s]
                            ))[:50]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 50 –ø–∞—Ä
                            
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Bitget
                            symbols_to_subscribe = [s.replace('/', '').upper() for s in all_pairs]
                            if not symbols_to_subscribe:
                                symbols_to_subscribe = ['BTCUSDT']
                            
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                            batch_size = 3  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                            symbol_batches = [symbols_to_subscribe[i:i + batch_size] for i in range(0, len(symbols_to_subscribe), batch_size)]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
                            await asyncio.sleep(1)
                            
                            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
                            if 'error' in locals() and error:
                                batch_size = max(1, batch_size // 2)
                                logger.info(f"–£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ {batch_size}")
                                await asyncio.sleep(2)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
                        await asyncio.sleep(2)
                        connected = True
                        last_message_time = time.time()
                        error_count = 0
                        max_errors = 5
                        consecutive_errors = 0
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                        self.message_counts['bitget'] = 0
                        self.error_counts['bitget'] = 0

                        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                        while self.running:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –º–æ–ª—á–∞–Ω–∏—è
                                current_time = time.time()
                                if current_time - last_message_time > 45:
                                    logger.warning("Bitget: –¥–æ–ª–≥–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π ({} —Å–µ–∫), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...".format(
                                        int(current_time - last_message_time)))
                                    break

                                # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                                try:
                                    raw = await asyncio.wait_for(ws.recv(), timeout=10.0)
                                    message = None
                                    try:
                                        message = json.loads(raw)
                                    except json.JSONDecodeError as je:
                                        logger.error(f"Bitget: –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {je}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {raw[:200]}...")
                                        self.error_counts['bitget'] += 1
                                        continue
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                    if self.message_counts['bitget'] < 10:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
                                        logger.info(f"Bitget —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_counts['bitget'] + 1}: {str(message)[:300]}")
                                        self.message_counts['bitget'] += 1
                                    
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ rate limit (30016)
                                    if isinstance(message, dict) and 'code' in message and str(message.get('code')) == '30016':
                                        current_time = time.time()
                                        time_since_last_rate_limit = current_time - last_rate_limit_time
                                        
                                        # –ï—Å–ª–∏ —Å –ø—Ä–æ—à–ª–æ–≥–æ rate limit –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                                        if time_since_last_rate_limit > 300:  # 5 –º–∏–Ω—É—Ç
                                            rate_limit_delay = 5
                                            logger.info("Bitget: —Å–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ rate limit (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)")
                                        else:
                                            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                                            rate_limit_delay = min(rate_limit_delay * 1.5, max_rate_limit_delay)
                                            
                                        last_rate_limit_time = current_time
                                        logger.warning(f"Bitget: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (30016). –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {rate_limit_delay:.1f} —Å–µ–∫.")
                                        
                                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                                        jitter = random.uniform(0.8, 1.2)
                                        delay = min(rate_limit_delay * jitter, max_rate_limit_delay)
                                        
                                        logger.info(f"Bitget: –æ–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º...")
                                        await asyncio.sleep(delay)
                                        continue
                                        
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    if isinstance(message, dict) and 'data' in message:
                                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        logger.debug(f"Bitget: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.get('arg', {}).get('channel', 'unknown')}")
                                        
                                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
                                    error_count = 0
                                    consecutive_errors = 0
                                    last_message_time = time.time()
                                        
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ (—Ñ–æ—Ä–º–∞—Ç Bitget v2)
                                    if 'data' in message and 'action' in message and message['action'] == 'update':
                                        for item in message.get('data', []):
                                            try:
                                                symbol = item.get('instId', '')
                                                if not symbol:
                                                    continue
                                                    
                                                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª (BTCUSDT -> BTC/USDT)
                                                if len(symbol) > 4 and symbol.endswith('USDT'):
                                                    symbol = f"{symbol[:-4]}/USDT"
                                                
                                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä
                                                bid = float(item.get('bidPr', 0))
                                                ask = float(item.get('askPr', 0))
                                                
                                                if bid > 0 and ask > 0:
                                                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω
                                                    if symbol not in self.orderbooks:
                                                        self.orderbooks[symbol] = {'bids': {}, 'asks': {}}
                                                    
                                                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
                                                    self.orderbooks[symbol]['bids'] = {bid: 0.1}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                                                    self.orderbooks[symbol]['asks'] = {ask: 0.1}
                                                    
                                                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                                    self.last_update_time[symbol] = time.time()
                                                    
                                                    # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
                                                    if self.on_ticker_update:
                                                        ticker_data = {
                                                            'symbol': symbol,
                                                            'bid': bid,
                                                            'ask': ask,
                                                            'exchange': 'bitget',
                                                            'timestamp': time.time()
                                                        }
                                                        await self.on_ticker_update(ticker_data)
                                            
                                            except Exception as e:
                                                logger.error(f"Bitget ticker error: {e}")
                                                continue
                                        
                                except Exception as e:
                                    logger.error(f"Bitget message error: {e}")
                                    continue
                                        
                            except asyncio.TimeoutError:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                                try:
                                    await ws.ping()
                                    logger.debug("Bitget: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ping")
                                    continue
                                except Exception as e:
                                    logger.error(f"Bitget ping error: {e}")
                                    break
                                    
                            except Exception as e:
                                logger.error(f"Bitget connection error: {e}")
                                break
                            
                    except Exception as e:
                        logger.error(f"Bitget: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        error_count += 1
                        consecutive_errors += 1
                        if error_count >= max_errors or consecutive_errors >= 3:
                            logger.error(f"Bitget: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ ({error_count}), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                            break
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        continue
                        
            except Exception as e:
                logger.error(f"Bitget: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)
                continue
                
    async def _handle_phemex_message(self, raw_msg: str, ws_instance):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Phemex WebSocket."""
        try:
            data = json.loads(raw_msg)
            if 'book' in data and 'symbol' in data:
                symbol = data['symbol']  
                formatted_symbol = normalize_symbol(symbol)
                
                book_data = data['book']
                bids = [(float(bid[0]), float(bid[1])) for bid in book_data.get('bids', [])]
                asks = [(float(ask[0]), float(ask[1])) for ask in book_data.get('asks', [])]
                
                if bids and asks:
                    if formatted_symbol not in self.orderbooks:
                        self.orderbooks[formatted_symbol] = {}
                        
                    self.orderbooks[formatted_symbol]['phemex'] = OrderBook(
                        symbol=formatted_symbol,
                        exchange='phemex',
                        bids=bids[:10],
                        asks=asks[:10],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        try:
                            self.on_orderbook_update(self.orderbooks[formatted_symbol]['phemex'])
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –≤ on_orderbook_update: {e}")
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Phemex: {e}")
            
    def get_orderbook(self, symbol: str, exchange: str) -> Optional[OrderBook]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ –±–∏—Ä–∂–∏."""
        if symbol in self.orderbooks and exchange in self.orderbooks[symbol]:
            return self.orderbooks[symbol][exchange]
        return None
    
    def get_all_orderbooks(self) -> Dict[str, Dict[str, OrderBook]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–∫–∞–Ω—ã –∑–∞—è–≤–æ–∫."""
        return self.orderbooks
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä."""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        self.should_stop = True
        
        for task in self.active_tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                    
        self.active_tasks.clear()
        self.orderbooks.clear()
        logger.info("WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _connect_phemex(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Phemex WebSocket —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏/VPN (aiohttp)"""
        while self.running:
            try:
                from production_config import PROXY_CONFIG
                url = "wss://ws.phemex.com/ws"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä–æ–∫—Å–∏-—Ä–æ—Ç–∞—Ü–∏—è + –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
                attempts = []
                use_proxy = EXCHANGES_CONFIG.get('phemex', {}).get('use_proxy', False)
                if PROXY_CONFIG.get('enabled', False) and use_proxy:
                    for region, endpoints in PROXY_CONFIG.items():
                        if region == 'enabled':
                            continue
                        if isinstance(endpoints, dict):
                            # –ü–æ—Ä—è–¥–æ–∫: SOCKS5 -> HTTPS -> HTTP
                            for key in ['socks5', 'https', 'http']:
                                val = endpoints.get(key)
                                if val:
                                    attempts.append((region, val))
                    logger.info(f"Phemex: –Ω–∞–π–¥–µ–Ω–æ {len(attempts)} –ø—Ä–æ–∫—Å–∏-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
                elif not use_proxy:
                    logger.info("Phemex: use_proxy=False ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                attempts.append(("direct", None))

                connected = False
                last_error = None

                for region, proxy in attempts:
                    if not self.running:
                        break
                    try:
                        timeout = aiohttp.ClientTimeout(total=None, connect=20, sock_connect=20, sock_read=30)
                        headers = {
                            "User-Agent": "Mozilla/5.0 (compatible; WSBot/1.0)",
                            "Origin": "https://phemex.com",
                        }
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏-–∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        connector = None
                        use_ws_proxy_param = True
                        proxy_auth = None
                        scheme = ''
                        if proxy:
                            try:
                                parts = urlsplit(proxy)
                                scheme = parts.scheme.lower()
                                if parts.username or parts.password:
                                    proxy_auth = aiohttp.BasicAuth(parts.username or '', parts.password or '')
                            except Exception:
                                scheme = ''
                                proxy_auth = None

                            if scheme.startswith('socks'):
                                try:
                                    from aiohttp_socks import ProxyConnector  # type: ignore
                                    connector = ProxyConnector.from_url(proxy)
                                    use_ws_proxy_param = False  # –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –±–µ—Ä–µ—Ç –Ω–∞ —Å–µ–±—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
                                except Exception as e:
                                    logger.error(f"Phemex: aiohttp_socks –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {proxy}: {e}")
                                    connector = None
                            elif scheme == 'https':
                                # –û—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É –∫ –ø—Ä–æ–∫—Å–∏-—Ö–æ—Å—Ç—É –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                                connector = aiohttp.TCPConnector(ssl=False)

                        async with aiohttp.ClientSession(timeout=timeout, headers=headers, connector=connector) as session:
                            logger.info(f"Phemex WS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ({region}) {'—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏' if proxy else '–Ω–∞–ø—Ä—è–º—É—é'}: {proxy or url}")
                            if use_ws_proxy_param and proxy:
                                ws = await session.ws_connect(
                                    url,
                                    proxy=proxy,
                                    proxy_auth=proxy_auth,
                                    autoping=True,
                                    heartbeat=WEBSOCKET_CONFIG['ping_interval'],
                                    # compression disabled: do not pass 'compress' to aiohttp ws_connect
                                )
                            else:
                                ws = await session.ws_connect(
                                    url,
                                    autoping=True,
                                    heartbeat=WEBSOCKET_CONFIG['ping_interval'],
                                    # compression disabled: do not pass 'compress' to aiohttp ws_connect
                                )
                            self.connections['phemex'] = ws
                            connected = True
                            logger.info(f"Phemex WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω ({region})")

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                            if 'phemex' not in self.message_counts:
                                self.message_counts['phemex'] = 0
                            if 'phemex' not in self.error_counts:
                                self.error_counts['phemex'] = 0

                            # –ü–æ–¥–ø–∏—Å–∫–∞
                            symbols_to_subscribe = [s.replace('/', '').upper() for s in self.symbols if 'USDT' in s][:30]
                            if not symbols_to_subscribe:
                                symbols_to_subscribe = ['BTCUSDT']

                            for symbol in symbols_to_subscribe:
                                sub_msg = {
                                    "id": int(time.time() * 1000),
                                    "method": "orderbook.subscribe",
                                    "params": [f"{symbol}.L20"]
                                }
                                await ws.send_json(sub_msg)
                                await asyncio.sleep(0.05)

                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ market24h (–æ–¥–∏–Ω —Ä–∞–∑)
                            ticker_msg = {
                                "id": int(time.time() * 1000) + 1,
                                "method": "market24h.subscribe",
                                "params": []
                            }
                            await ws.send_json(ticker_msg)

                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            async for msg in ws:
                                try:
                                    if msg.type == aiohttp.WSMsgType.TEXT:
                                        data = json.loads(msg.data)
                                    elif msg.type == aiohttp.WSMsgType.BINARY:
                                        try:
                                            text = gzip.decompress(msg.data).decode('utf-8')
                                            data = json.loads(text)
                                        except Exception:
                                            try:
                                                data = json.loads(msg.data.decode('utf-8', errors='ignore'))
                                            except Exception:
                                                continue
                                    elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                                        raise ConnectionError(f"WS closed/error: {msg.type}")
                                    else:
                                        continue

                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                                    if isinstance(data, dict) and data.get('error'):
                                        logger.error(f"Phemex error: {data.get('error')}")
                                        self.error_counts['phemex'] += 1
                                        continue

                                    # –í–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–ª–µ–º 'book'
                                    if isinstance(data, dict) and 'book' in data:
                                        book = data.get('book', {})
                                        sym = data.get('symbol', 'UNKNOWN')
                                        symbol_fmt = sym.replace('USDT', '/USDT') if 'USDT' in sym else sym
                                        bids = [(float(b[0]), float(b[1])) for b in book.get('bids', [])[:5]]
                                        asks = [(float(a[0]), float(a[1])) for a in book.get('asks', [])[:5]]
                                        if bids and asks:
                                            ob = OrderBook(
                                                symbol=normalize_symbol(symbol_fmt),
                                                exchange='phemex',
                                                bids=bids,
                                                asks=asks,
                                                timestamp=time.time()
                                            )
                                            if self.on_orderbook_update:
                                                await self.on_orderbook_update(ob)
                                            self.message_counts['phemex'] += 1
                                            continue

                                    # –í–∞—Ä–∏–∞–Ω—Ç —Å 'market24h'
                                    if isinstance(data, dict) and 'market24h' in data:
                                        markets = data.get('market24h', [])
                                        for market in markets:
                                            sym = market.get('symbol', 'UNKNOWN')
                                            symbol_fmt = sym.replace('USDT', '/USDT') if 'USDT' in sym else sym
                                            bid = float(market.get('bidEp', 0)) / 10000
                                            ask = float(market.get('askEp', 0)) / 10000
                                            if bid > 0 and ask > 0:
                                                ob = OrderBook(
                                                    symbol=normalize_symbol(symbol_fmt),
                                                    exchange='phemex',
                                                    bids=[(bid, 1.0)],
                                                    asks=[(ask, 1.0)],
                                                    timestamp=time.time()
                                                )
                                                if self.on_orderbook_update:
                                                    await self.on_orderbook_update(ob)
                                                self.message_counts['phemex'] += 1
                                        continue

                                    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    self.message_counts['phemex'] += 1

                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Phemex —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                    self.error_counts['phemex'] += 1

                            logger.warning("Phemex WebSocket –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                            break

                    except aiohttp.WSServerHandshakeError as e:
                        last_error = e
                        logger.error(f"Phemex handshake failed ({region}): HTTP {getattr(e, 'status', '?')} {str(e)}")
                        continue
                    except Exception as e:
                        last_error = e
                        logger.error(f"Phemex –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ({region}): {e}")
                        continue

                if not connected:
                    raise last_error or ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Phemex —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–∫—Å–∏/–Ω–∞–ø—Ä—è–º—É—é")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Phemex: {e}")
                await asyncio.sleep(5)
                if not self.running:
                    break
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        self.running = False
        
        for exchange_id, ws in list(self.connections.items()):
            try:
                if ws:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    await ws.close()
                    logger.info(f"{exchange_id} WebSocket –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket –¥–ª—è {exchange_id}: {e}")
        
        self.connections.clear()
    
    async def _connect_mexc(self):
        """MEXC WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['mexc']['ws_url']
        
        async with websockets.connect(
            url,
            ping_interval=WEBSOCKET_CONFIG['ping_interval'],
            ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
        ) as ws:
            self.connections['mexc'] = ws
            self.reconnect_delays['mexc'] = WEBSOCKET_CONFIG['reconnect_delay']
            logger.info("MEXC WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MEXC v3 API
            symbols_to_subscribe = [s.replace('/', '').upper() for s in self.symbols 
                                   if 'USDT' in s][:30]
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏ MEXC v3 API
            for symbol in symbols_to_subscribe:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ miniTickers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω bid/ask
                sub_msg = {
                    "method": "SUBSCRIPTION",
                    "params": [f"spot@public.miniTickers.v3.api@{symbol}"]
                }
                await ws.send(json.dumps(sub_msg))
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in ws:
                try:
                    data = json.loads(message)
                    self.message_counts['mexc'] += 1
                    
                    if 'd' in data:
                        await self._process_mexc_message(data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MEXC: {e}")
    
    async def _process_mexc_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è MEXC"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ miniTickers v3 API
            if 'miniTickers' in str(data.get('c', '')):
                ticker = data['d']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞
                channel = data.get('c', '')
                if '@' in channel:
                    symbol = channel.split('@')[-1]
                else:
                    return
                
                # –°–æ–∑–¥–∞–µ–º OrderBook –∏–∑ miniTicker –¥–∞–Ω–Ω—ã—Ö
                if 'b' in ticker and 'a' in ticker:  # bid –∏ ask —Ü–µ–Ω—ã
                    orderbook = OrderBook(
                        symbol=normalize_symbol(f"{symbol[:-4]}/USDT"),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTCUSDT -> BTC/USDT
                        exchange='mexc',
                        bids=[(float(ticker['b']), float(ticker.get('B', 1)))],  # bid price –∏ volume
                        asks=[(float(ticker['a']), float(ticker.get('A', 1)))],  # ask price –∏ volume  
                        timestamp=time.time()
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    if 'mexc' not in self.orderbooks:
                        self.orderbooks['mexc'] = {}
                    self.orderbooks['mexc'][orderbook.symbol] = orderbook
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MEXC: {e}")
    
    async def _connect_bybit(self):
        """Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ (aiohttp)"""
        logger.error("üî•üî•üî• –ú–ï–¢–û–î _connect_bybit –ó–ê–ü–£–©–ï–ù!")
        while self.running:
            try:
                url = EXCHANGES_CONFIG['bybit']['ws_url']
                logger.error(f"üîÑ –ü–û–ü–´–¢–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit WebSocket: {url}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ + –ø—Ä—è–º–æ–µ)
                attempts = []
                if PROXY_CONFIG.get('enabled', False):
                    for region, endpoints in PROXY_CONFIG.items():
                        if region == 'enabled':
                            continue
                        if isinstance(endpoints, dict):
                            for key in ['socks5', 'https', 'http']:
                                val = endpoints.get(key)
                                if val:
                                    attempts.append((region, val))
                    logger.info(f"üîÑ Bybit: –Ω–∞–π–¥–µ–Ω–æ {len(attempts)} –ø—Ä–æ–∫—Å–∏-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
                attempts.append(("direct", None))

                connected = False
                last_error = None

                for region, proxy in attempts:
                    if not self.running:
                        break
                    try:
                        timeout = aiohttp.ClientTimeout(total=None, connect=20, sock_connect=20, sock_read=30)
                        headers = {
                            "User-Agent": "Mozilla/5.0 (compatible; WSBot/1.0)",
                            "Origin": "https://bybit.com",
                        }

                        connector = None
                        use_ws_proxy_param = True
                        proxy_auth = None
                        scheme = ''
                        if proxy:
                            try:
                                parts = urlsplit(proxy)
                                scheme = parts.scheme.lower()
                                if parts.username or parts.password:
                                    proxy_auth = aiohttp.BasicAuth(parts.username or '', parts.password or '')
                            except Exception:
                                scheme = ''
                                proxy_auth = None

                            if scheme.startswith('socks'):
                                try:
                                    from aiohttp_socks import ProxyConnector  # type: ignore
                                    connector = ProxyConnector.from_url(proxy)
                                    use_ws_proxy_param = False
                                except Exception as e:
                                    logger.error(f"Bybit: aiohttp_socks –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {proxy}: {e}")
                                    connector = None
                            elif scheme == 'https':
                                # –û—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è HTTPS –ø—Ä–æ–∫—Å–∏
                                connector = aiohttp.TCPConnector(ssl=False)

                        async with aiohttp.ClientSession(timeout=timeout, headers=headers, connector=connector) as session:
                            logger.info(f"üåê Bybit WS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ({region}) {'—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏' if proxy else '–Ω–∞–ø—Ä—è–º—É—é'}: {proxy or url}")
                            if use_ws_proxy_param and proxy:
                                ws = await session.ws_connect(
                                    url,
                                    proxy=proxy,
                                    proxy_auth=proxy_auth,
                                    autoping=True,
                                    heartbeat=WEBSOCKET_CONFIG['ping_interval']
                                )
                            else:
                                ws = await session.ws_connect(
                                    url,
                                    autoping=True,
                                    heartbeat=WEBSOCKET_CONFIG['ping_interval']
                                )

                            self.connections['bybit'] = ws
                            self.reconnect_delays['bybit'] = WEBSOCKET_CONFIG['reconnect_delay']
                            connected = True
                            logger.info(f"‚úÖ Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω ({region})")

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                            if 'bybit' not in self.message_counts:
                                self.message_counts['bybit'] = 0
                            if 'bybit' not in self.error_counts:
                                self.error_counts['bybit'] = 0

                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã (orderbook –∏ tickers)
                            symbols_to_subscribe = []
                            for symbol in self.symbols[:30]:
                                bybit_symbol = symbol.replace('/', '').upper()
                                symbols_to_subscribe.append(f"orderbook.1.{bybit_symbol}")
                                symbols_to_subscribe.append(f"tickers.{bybit_symbol}")

                            sub_msg = {
                                "op": "subscribe",
                                "args": symbols_to_subscribe
                            }
                            await ws.send_json(sub_msg)

                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            async for msg in ws:
                                try:
                                    if msg.type == aiohttp.WSMsgType.TEXT:
                                        data = json.loads(msg.data)
                                    elif msg.type == aiohttp.WSMsgType.BINARY:
                                        # Bybit, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                        try:
                                            text = gzip.decompress(msg.data).decode('utf-8')
                                        except Exception:
                                            text = msg.data.decode('utf-8', errors='ignore')
                                        data = json.loads(text)
                                    elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                                        raise ConnectionError(f"WS closed/error: {msg.type}")
                                    else:
                                        continue

                                    # ping/pong –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É Bybit
                                    if isinstance(data, dict) and data.get('op') == 'ping':
                                        await ws.send_json({"op": "pong"})
                                        continue

                                    if isinstance(data, dict) and 'topic' in data:
                                        await self._process_bybit_message(data)

                                    # –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    self.message_counts['bybit'] += 1

                                except json.JSONDecodeError as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Bybit: {e}")
                                    self.error_counts['bybit'] += 1
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit: {e}")
                                    self.error_counts['bybit'] += 1

                            logger.warning("Bybit WebSocket –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                            break

                    except aiohttp.WSServerHandshakeError as e:
                        last_error = e
                        logger.error(f"‚ùå Bybit handshake failed ({region}): HTTP {getattr(e, 'status', '?')} {str(e)}")
                        continue
                    except Exception as e:
                        last_error = e
                        logger.error(f"‚ùå Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ({region}): {e}")
                        continue

                if not connected:
                    raise last_error or ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–∫—Å–∏/–Ω–∞–ø—Ä—è–º—É—é")

            except Exception as e:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Bybit: {e}")
                logger.error(f"   URL: {EXCHANGES_CONFIG['bybit']['ws_url']}")
                logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                await asyncio.sleep(5)
                if self.running:
                    continue
    
    async def _process_bybit_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Bybit"""
        try:
            topic = data['topic']
            
            if 'orderbook' in topic:
                symbol = topic.split('.')[-1]
                depth = data['data']
                
                bids = [(float(b[0]), float(b[1])) for b in depth.get('b', [])]
                asks = [(float(a[0]), float(a[1])) for a in depth.get('a', [])]
                
                if bids and asks:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                    for base_curr in ['USDT', 'USDC', 'BUSD']:
                        if symbol.endswith(base_curr):
                            formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                            break
                    else:
                        formatted_symbol = symbol
                    
                    orderbook = OrderBook(
                        symbol=normalize_symbol(formatted_symbol),
                        exchange='bybit',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
            elif 'tickers' in topic:
                ticker = data['data']
                symbol = ticker['symbol']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                for base_curr in ['USDT', 'USDC', 'BUSD']:
                    if symbol.endswith(base_curr):
                        formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                        break
                else:
                    formatted_symbol = symbol
                
                orderbook = OrderBook(
                    symbol=normalize_symbol(formatted_symbol),
                    exchange='bybit',
                    bids=[(float(ticker.get('bid1Price', 0)), float(ticker.get('bid1Size', 0)))],
                    asks=[(float(ticker.get('ask1Price', 0)), float(ticker.get('ask1Size', 0)))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Bybit: {e}")
    
    async def _connect_huobi(self):
        """Huobi WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.info("üî•üî•üî• –ú–ï–¢–û–î _connect_huobi –ó–ê–ü–£–©–ï–ù!")
        while self.running:
            try:
                url = EXCHANGES_CONFIG['huobi']['ws_url']
                logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Huobi WebSocket: {url}")
                
                async with websockets.connect(
                    url,
                    ping_interval=20,
                    ping_timeout=10,
                    close_timeout=10
                ) as ws:
                    self.connections['huobi'] = ws
                    self.reconnect_delays['huobi'] = WEBSOCKET_CONFIG['reconnect_delay']
                    logger.info("‚úÖ Huobi WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if 'huobi' not in self.message_counts:
                        self.message_counts['huobi'] = 0
                    if 'huobi' not in self.error_counts:
                        self.error_counts['huobi'] = 0
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Huobi —Ñ–æ—Ä–º–∞—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞)
                    symbols_to_subscribe = []
                    for symbol in self.symbols[:30]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        if 'USDT' in symbol:
                            huobi_symbol = symbol.replace('/', '').lower()
                            symbols_to_subscribe.append(huobi_symbol)
                    
                    logger.info(f"üì° Huobi –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ {len(symbols_to_subscribe)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    for symbol in symbols_to_subscribe:
                        try:
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
                            sub_msg = {
                                "sub": f"market.{symbol}.ticker",
                                "id": f"ticker_{symbol}"
                            }
                            await ws.send(json.dumps(sub_msg))
                            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Huobi –Ω–∞ {symbol}: {e}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for message in ws:
                        try:
                            # Huobi –∏—Å–ø–æ–ª—å–∑—É–µ—Ç gzip —Å–∂–∞—Ç–∏–µ
                            if isinstance(message, bytes):
                                try:
                                    message = gzip.decompress(message).decode('utf-8')
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ gzip: {e}")
                                    continue
                            
                            data = json.loads(message)
                            self.message_counts['huobi'] += 1
                            
                            # –û—Ç–≤–µ—Ç –Ω–∞ ping
                            if 'ping' in data:
                                pong_msg = {"pong": data['ping']}
                                await ws.send(json.dumps(pong_msg))
                                continue
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
                            if 'status' in data:
                                if data.get('status') == 'ok':
                                    logger.info(f"Huobi –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {data.get('id', 'unknown')}")
                                else:
                                    logger.error(f"Huobi –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                                continue
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                            if 'ch' in data and 'tick' in data:
                                await self._process_huobi_message(data)
                                
                        except json.JSONDecodeError as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Huobi: {e}")
                            self.error_counts['huobi'] += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Huobi: {e}")
                            self.error_counts['huobi'] += 1
                            
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Huobi: {e}")
                if 'huobi' in self.connections:
                    del self.connections['huobi']
                await asyncio.sleep(10)
                if not self.running:
                    break
    
    async def _process_huobi_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Huobi"""
        try:
            channel = data['ch']
            
            if 'ticker' in channel:
                parts = channel.split('.')
                symbol = parts[1].upper()
                ticker = data['tick']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                for base_curr in ['USDT', 'USDC', 'BUSD']:
                    if symbol.endswith(base_curr.lower()):
                        formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                        break
                else:
                    formatted_symbol = symbol
                
                orderbook = OrderBook(
                    symbol=normalize_symbol(formatted_symbol),
                    exchange='huobi',
                    bids=[(ticker['bid'], ticker['bidSize'])],
                    asks=[(ticker['ask'], ticker['askSize'])],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif 'depth' in channel:
                parts = channel.split('.')
                symbol = parts[1].upper()
                depth = data['tick']
                
                bids = [(float(b[0]), float(b[1])) for b in depth.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in depth.get('asks', [])]
                
                if bids and asks:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                    for base_curr in ['USDT', 'USDC', 'BUSD']:
                        if symbol.endswith(base_curr.lower()):
                            formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                            break
                    else:
                        formatted_symbol = symbol
                    
                    orderbook = OrderBook(
                        symbol=normalize_symbol(formatted_symbol),
                        exchange='huobi',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Huobi: {e}")
    
    async def _connect_binance(self):
        """Binance WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)"""
        logger.info("üî•üî•üî• –ú–ï–¢–û–î _connect_binance –ó–ê–ü–£–©–ï–ù!")
        
        while self.running:
            try:
                url = EXCHANGES_CONFIG['binance']['ws_url']
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket: {url}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                if 'binance' not in self.message_counts:
                    self.message_counts['binance'] = 0
                if 'binance' not in self.error_counts:
                    self.error_counts['binance'] = 0
                
                # Binance —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                alternative_urls = [
                    'wss://stream.binance.com:9443/ws',
                    'wss://stream.binance.com:443/ws',
                    'wss://stream.binancezh.com:9443/ws'  # –ö–∏—Ç–∞–π—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
                ]
                
                connection_successful = False
                for attempt_url in alternative_urls:
                    try:
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {attempt_url}")
                        async with websockets.connect(
                            attempt_url,
                            ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                            ping_timeout=WEBSOCKET_CONFIG['ping_timeout'],
                            close_timeout=10
                        ) as ws:
                            self.connections['binance'] = ws
                            self.reconnect_delays['binance'] = WEBSOCKET_CONFIG['reconnect_delay']
                            logger.info("‚úÖ Binance WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                            connection_successful = True
                            
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Binance —Ñ–æ—Ä–º–∞—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª–µ–Ω depth)
                            ticker_streams = []
                            for symbol in self.symbols[:100]:
                                binance_symbol = symbol.replace('/', '').lower()
                                ticker_streams.append(f"{binance_symbol}@ticker")

                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª—É–±–∏–Ω—É —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è —Ç–æ–ø-20
                            depth_streams = []
                            for symbol in self.symbols[:20]:
                                binance_symbol = symbol.replace('/', '').lower()
                                depth_streams.append(f"{binance_symbol}@depth5@100ms")

                            streams = ticker_streams + depth_streams
                            sub_msg = {
                                "method": "SUBSCRIBE",
                                "params": streams,
                                "id": 1
                            }
                            await ws.send(json.dumps(sub_msg))
                            logger.info(f"üì° Binance –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(streams)} –ø–æ—Ç–æ–∫–æ–≤ ({len(ticker_streams)} —Ç–∏–∫–µ—Ä–æ–≤, {len(depth_streams)} depth)")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            async for message in ws:
                                try:
                                    data = json.loads(message)
                                    self.message_counts['binance'] += 1
                                    
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                                    if 'result' in data and data.get('id') == 1:
                                        logger.info("Binance –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                                        continue
                                        
                                    if 'stream' in data:
                                        await self._process_binance_message(data)
                                        
                                except json.JSONDecodeError as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Binance: {e}")
                                    self.error_counts['binance'] += 1
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Binance: {e}")
                                    self.error_counts['binance'] += 1
                            break
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {attempt_url}: {e}")
                        continue
                        
                if not connection_successful:
                    raise Exception("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket –Ω–µ—É–¥–∞—á–Ω—ã")
                        
            except Exception as e:
                logger.error(f"‚ùå Binance WebSocket –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                if 'binance' in self.connections:
                    del self.connections['binance']
                await asyncio.sleep(15)
                if not self.running:
                    break
    
    async def _connect_okx(self):
        """OKX WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if TRADING_CONFIG.get('mode') == 'demo':
            url = EXCHANGES_CONFIG['okx'].get('demo_ws_url', EXCHANGES_CONFIG['okx']['ws_url'])
            logger.info("OKX: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç")
        else:
            url = EXCHANGES_CONFIG['okx']['ws_url']
        
        try:
            # OKX —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with websockets.connect(
                url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['okx'] = ws
                self.reconnect_delays['okx'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ OKX WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if 'okx' not in self.message_counts:
                    self.message_counts['okx'] = 0
                if 'okx' not in self.error_counts:
                    self.error_counts['okx'] = 0
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - OKX —Ñ–æ—Ä–º–∞—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –±–∞—Ç—á–∞–º–∏)
                args = []
                for symbol in self.symbols[:60]:
                    okx_symbol = symbol.replace('/', '-').upper()
                    args.append({"channel": "tickers", "instId": okx_symbol})
                    args.append({"channel": "books5", "instId": okx_symbol})

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 40 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                for i in range(0, len(args), 40):
                    sub_msg = {
                        "op": "subscribe",
                        "args": args[i:i+40]
                    }
                    await ws.send(json.dumps(sub_msg))
                    await asyncio.sleep(0.1)
                logger.info(f"üì° OKX –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(args)} –∫–∞–Ω–∞–ª–æ–≤ (–±–∞—Ç—á–∞–º–∏)")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['okx'] += 1
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        if self.message_counts['okx'] <= 5:
                            logger.info(f"OKX —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_counts['okx']}: {str(data)[:200]}")
                        
                        if 'data' in data and 'arg' in data:
                            await self._process_okx_message(data)
                        elif 'event' in data:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π OKX (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏)
                            if data.get('event') == 'subscribe':
                                logger.info(f"OKX –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {data.get('arg', {}).get('channel', 'unknown')}")
                            elif data.get('event') == 'error':
                                logger.error(f"OKX –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data}")
                        else:
                            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                            if self.message_counts['okx'] <= 10:
                                logger.warning(f"OKX –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(data)[:150]}")
                            pass
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OKX: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå OKX WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _connect_gate(self):
        """Gate.io WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        while self.running:
            try:
                url = EXCHANGES_CONFIG['gate']['ws_url']
                logger.info(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gate.io WebSocket: {url}")
                
                async with websockets.connect(url, ping_interval=20, ping_timeout=10) as ws:
                    self.connections['gate'] = ws
                    logger.info("‚úÖ Gate.io WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Gate.io —Ñ–æ—Ä–º–∞—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –∏ —Å —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º)
                    for idx, symbol in enumerate(self.symbols[:80]):
                        gate_symbol = symbol.replace('/', '_').upper()
                        
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä
                        ticker_sub = {
                            "time": int(time.time()),
                            "channel": "spot.tickers",
                            "event": "subscribe",
                            "payload": [gate_symbol]
                        }
                        await ws.send(json.dumps(ticker_sub))
                        
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ orderbook
                        book_sub = {
                            "time": int(time.time()),
                            "channel": "spot.order_book",
                            "event": "subscribe", 
                            "payload": [gate_symbol, "5", "100ms"]
                        }
                        await ws.send(json.dumps(book_sub))
                        if idx % 10 == 0:
                            await asyncio.sleep(0.1)
                    
                    logger.info(f"üì° Gate.io –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(self.symbols[:80])} –ø–∞—Ä —Å –±–∞—Ç—á-—Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–æ–º")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for message in ws:
                        try:
                            data = json.loads(message)
                            if 'event' in data and data['event'] == 'update':
                                await self._process_gate_message(data)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Gate.io: {e}")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Gate.io: {e}")
                await asyncio.sleep(5)
                if self.running:
                    continue
    
    async def _connect_kucoin(self):
        """KuCoin WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º WebSocket endpoint –æ—Ç KuCoin API
            async with aiohttp.ClientSession() as session:
                endpoint_url = f"{EXCHANGES_CONFIG['kucoin']['rest_url']}/api/v1/bullet-public"
                async with session.post(endpoint_url) as resp:
                    if resp.status == 200:
                        bullet_data = await resp.json()
                        ws_endpoint = bullet_data['data']['instanceServers'][0]['endpoint']
                        ws_token = bullet_data['data']['token']
                        ws_url = f"{ws_endpoint}?token={ws_token}&[connectId=1]"
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å KuCoin WebSocket endpoint: {resp.status}")
            
            async with websockets.connect(
                ws_url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['kucoin'] = ws
                self.reconnect_delays['kucoin'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ KuCoin WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - KuCoin —Ñ–æ—Ä–º–∞—Ç
                for symbol in self.symbols[:80]:
                    kucoin_symbol = symbol.replace('/', '-').upper()
                    
                    # Ticker subscription
                    ticker_msg = {
                        "id": int(time.time() * 1000),
                        "type": "subscribe",
                        "topic": f"/market/ticker:{kucoin_symbol}",
                        "response": True
                    }
                    await ws.send(json.dumps(ticker_msg))
                    
                    # OrderBook subscription
                    book_msg = {
                        "id": int(time.time() * 1000) + 1,
                        "type": "subscribe",
                        "topic": f"/market/level2:{kucoin_symbol}",
                        "response": True
                    }
                    await ws.send(json.dumps(book_msg))
                    await asyncio.sleep(0.1)
                
                logger.info(f"üì° KuCoin –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(self.symbols[:80]) * 2} —Ç–æ–ø–∏–∫–æ–≤")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['kucoin'] += 1
                        
                        if 'subject' in data:
                            await self._process_kucoin_message(data)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ KuCoin: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå KuCoin WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _connect_kraken(self):
        """Kraken WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['kraken']['ws_url']
        
        try:
            # Kraken —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with websockets.connect(
                url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['kraken'] = ws
                self.reconnect_delays['kraken'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ Kraken WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Kraken —Ñ–æ—Ä–º–∞—Ç
                pairs = []
                for symbol in self.symbols[:50]:
                    # Kraken –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä
                    if symbol == 'BTC/USDT':
                        pairs.append('XBT/USDT')
                    else:
                        pairs.append(symbol.replace('/', ''))
                
                # Ticker subscription
                ticker_msg = {
                    "event": "subscribe",
                    "pair": pairs,
                    "subscription": {"name": "ticker"}
                }
                await ws.send(json.dumps(ticker_msg))
                
                # Book subscription
                book_msg = {
                    "event": "subscribe",
                    "pair": pairs,
                    "subscription": {"name": "book", "depth": 5}
                }
                await ws.send(json.dumps(book_msg))
                
                logger.info(f"üì° Kraken –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(pairs)} –ø–∞—Ä")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['kraken'] += 1
                        
                        # Kraken –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
                        if isinstance(data, list) and len(data) >= 3:
                            await self._process_kraken_message(data)
                        elif isinstance(data, dict) and data.get('event') == 'heartbeat':
                            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ heartbeat
                            pass
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kraken: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Kraken WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _process_binance_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Binance"""
        try:
            stream_data = data['data']
            stream = data['stream']
            
            if '@ticker' in stream:
                symbol = stream.split('@')[0].upper()
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                formatted_symbol = f"{symbol[:-4]}/{symbol[-4:]}" if len(symbol) > 4 else symbol
                
                orderbook = OrderBook(
                    symbol=normalize_symbol(formatted_symbol),
                    exchange='binance',
                    bids=[(float(stream_data['b']), float(stream_data['B']))],
                    asks=[(float(stream_data['a']), float(stream_data['A']))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif '@depth' in stream:
                symbol = stream.split('@')[0].upper()
                formatted_symbol = f"{symbol[:-4]}/{symbol[-4:]}" if len(symbol) > 4 else symbol
                
                bids = [(float(b[0]), float(b[1])) for b in stream_data.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in stream_data.get('asks', [])]
                
                if bids and asks:
                    orderbook = OrderBook(
                        symbol=normalize_symbol(formatted_symbol),
                        exchange='binance',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Binance: {e}")
    
    async def _process_kucoin_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è KuCoin"""
        try:
            subject = data['subject']
            topic = data['topic']
            msg_data = data['data']
            
            if 'ticker' in subject:
                symbol = topic.split(':')[1].replace('-', '/')
                
                orderbook = OrderBook(
                    symbol=symbol,
                    exchange='kucoin',
                    bids=[(float(msg_data['bestBid']), float(msg_data['bestBidSize']))],
                    asks=[(float(msg_data['bestAsk']), float(msg_data['bestAskSize']))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif 'level2' in subject:
                symbol = topic.split(':')[1].replace('-', '/')
                
                bids = [(float(b[0]), float(b[1])) for b in msg_data.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in msg_data.get('asks', [])]
                
                if bids and asks:
                    orderbook = OrderBook(
                        symbol=symbol,
                        exchange='kucoin',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ KuCoin: {e}")
    
    async def _process_okx_message(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è OKX"""
        try:
            if isinstance(data, dict) and 'data' in data and 'arg' in data:
                arg = data['arg']
                channel = arg.get('channel', '')
                inst_id = arg.get('instId', '')
                symbol = inst_id.replace('-', '/')
                
                for item in data['data']:
                    if channel == 'tickers' and 'last' in item:
                        # –°–æ–∑–¥–∞–µ–º OrderBook –∏–∑ —Ç–∏–∫–µ—Ä–∞
                        bid_price = float(item.get('bidPx', 0))
                        ask_price = float(item.get('askPx', 0))
                        
                        if bid_price > 0 and ask_price > 0:
                            orderbook = OrderBook(
                                symbol=symbol,
                                exchange='okx',
                                bids=[(bid_price, float(item.get('bidSz', 1)))],
                                asks=[(ask_price, float(item.get('askSz', 1)))],
                                timestamp=time.time()
                            )
                            
                            if self.on_orderbook_update:
                                await self.on_orderbook_update(orderbook)
                    
                    elif channel == 'books5' and 'bids' in item and 'asks' in item:
                        bids = [(float(b[0]), float(b[1])) for b in item['bids'] if len(b) >= 2]
                        asks = [(float(a[0]), float(a[1])) for a in item['asks'] if len(a) >= 2]
                        
                        if bids and asks:
                            orderbook = OrderBook(
                                symbol=symbol,
                                exchange='okx',
                                bids=bids[:5],
                                asks=asks[:5],
                                timestamp=time.time()
                            )
                            
                            if self.on_orderbook_update:
                                await self.on_orderbook_update(orderbook)
                                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OKX: {e} | Data: {str(data)[:200]}")
    
    async def _process_gate_message(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Gate.io"""
        try:
            if isinstance(data, dict) and data.get('event') == 'update':
                channel = data.get('channel', '')
                result = data.get('result', {})
                
                if channel == 'spot.tickers' and isinstance(result, dict):
                    symbol = result.get('currency_pair', '').replace('_', '/')
                    if symbol and 'last' in result:
                        ticker = {
                            'symbol': symbol,
                            'last': float(result['last']),
                            'volume': float(result.get('base_volume', 0)),
                            'timestamp': time.time()
                        }
                        
                        if self.on_ticker_update:
                            await self.on_ticker_update(ticker, 'gate')
                
                elif channel == 'spot.order_book' and isinstance(result, dict):
                    symbol = result.get('s', '').replace('_', '/')
                    if symbol and 'bids' in result and 'asks' in result:
                        bids = [(float(b[0]), float(b[1])) for b in result['bids'] if len(b) >= 2]
                        asks = [(float(a[0]), float(a[1])) for a in result['asks'] if len(a) >= 2]
                        
                        if bids and asks:
                            orderbook = OrderBook(
                                symbol=symbol,
                                exchange='gate',
                                bids=bids[:5],
                                asks=asks[:5],
                                timestamp=time.time()
                            )
                            
                            if self.on_orderbook_update:
                                await self.on_orderbook_update(orderbook)
                                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Gate.io: {e} | Data: {str(data)[:200]}")
    
    async def _process_kraken_message(self, data: List):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Kraken"""
        try:
            if len(data) >= 4:
                msg_data = data[1]
                pair = data[3]
                channel = data[2]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—É –æ–±—Ä–∞—Ç–Ω–æ
                if pair == 'XBT/USDT':
                    symbol = 'BTC/USDT'
                else:
                    symbol = pair
                
                if channel == 'ticker':
                    ticker = msg_data
                    
                    orderbook = OrderBook(
                        symbol=symbol,
                        exchange='kraken',
                        bids=[(float(ticker['b'][0]), float(ticker['b'][1]))],
                        asks=[(float(ticker['a'][0]), float(ticker['a'][1]))],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
                elif channel == 'book-5':
                    book_data = msg_data
                    
                    bids = []
                    asks = []
                    
                    if 'b' in book_data:
                        bids = [(float(b[0]), float(b[1])) for b in book_data['b']]
                    if 'a' in book_data:
                        asks = [(float(a[0]), float(a[1])) for a in book_data['a']]
                        
                    if bids and asks:
                        orderbook = OrderBook(
                            symbol=symbol,
                            exchange='kraken',
                            bids=bids[:5],
                            asks=asks[:5],
                            timestamp=time.time()
                        )
                        
                        if self.on_orderbook_update:
                            await self.on_orderbook_update(orderbook)
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Kraken: {e}")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket"""
        stats = {
            'connected': list(self.connections.keys()),
            'message_counts': dict(self.message_counts),
            'error_counts': dict(self.error_counts),
            'last_ping': dict(self.last_ping),
            'reconnect_delays': dict(self.reconnect_delays)
        }
        return stats
