#!/usr/bin/env python3
"""
üåê WEBSOCKET MANAGER
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
"""

import asyncio
import json
import time
import gzip
import logging
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass
import websockets
import aiohttp
from collections import defaultdict
import hashlib
import hmac
import base64
from urllib.parse import urlencode

from production_config import EXCHANGES_CONFIG, WEBSOCKET_CONFIG, PROXY_CONFIG, API_KEYS

logger = logging.getLogger('WSManager')

@dataclass
class OrderBook:
    """–°—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤"""
    symbol: str
    exchange: str
    bids: List[tuple]  # [(price, volume), ...]
    asks: List[tuple]
    timestamp: float
    
    @property
    def best_bid(self) -> Optional[float]:
        return self.bids[0][0] if self.bids else None
    
    @property
    def best_ask(self) -> Optional[float]:
        return self.asks[0][0] if self.asks else None
    
    @property
    def spread(self) -> Optional[float]:
        if self.best_bid and self.best_ask:
            return (self.best_ask - self.best_bid) / self.best_bid * 100
        return None
    
    @property
    def age(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return time.time() - self.timestamp
    
    def get_depth_volume(self, levels: int = 5) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º –Ω–∞ –≥–ª—É–±–∏–Ω–µ"""
        bid_vol = sum(v for _, v in self.bids[:levels])
        ask_vol = sum(v for _, v in self.asks[:levels])
        return {'bid': bid_vol, 'ask': ask_vol}

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, on_orderbook_update: Optional[Callable] = None):
        self.connections = {}
        self.subscriptions = defaultdict(set)
        self.reconnect_delays = defaultdict(lambda: WEBSOCKET_CONFIG['reconnect_delay'])
        self.running = False
        self.on_orderbook_update = on_orderbook_update
        self.last_ping = defaultdict(float)
        self.message_counts = defaultdict(int)
        self.error_counts = defaultdict(int)
        self.orderbooks = {}  # –ö—ç—à –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
        # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        self.exchanges = [ex for ex, conf in EXCHANGES_CONFIG.items() if conf['enabled']]
        
    async def start(self, symbols: List[str]):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.running = True
        self.symbols = symbols
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        tasks = []
        for exchange in self.exchanges:
            if exchange == 'mexc':
                # MEXC WebSocket v3 API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º REST API
                logger.warning("‚ö†Ô∏è MEXC WebSocket –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è REST API")
                self.connections['mexc'] = None  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                # –ó–∞–ø—É—Å–∫–∞–µ–º REST API polling –¥–ª—è MEXC
                asyncio.create_task(self._poll_mexc_rest())
                continue
            elif exchange == 'bybit':
                tasks.append(self._connect_bybit())
            elif exchange == 'huobi':
                tasks.append(self._connect_huobi())
            elif exchange == 'binance':
                tasks.append(self._connect_binance())
            elif exchange == 'okx':
                tasks.append(self._connect_okx())
            elif exchange == 'kucoin':
                tasks.append(self._connect_kucoin())
            elif exchange == 'kraken':
                tasks.append(self._connect_kraken())
        
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
    
    async def _poll_mexc_rest(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MEXC —á–µ—Ä–µ–∑ REST API"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ REST API polling –¥–ª—è MEXC")
        
        while self.running:
            try:
                async with aiohttp.ClientSession() as session:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    mexc_symbols = [s.replace('/', '') for s in self.symbols if 'USDT' in s]
                    
                    # MEXC API endpoint –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
                    url = f"{EXCHANGES_CONFIG['mexc']['rest_url']}/api/v3/ticker/24hr"
                    
                    async with session.get(url) as resp:
                        if resp.status == 200:
                            tickers = await resp.json()
                            
                            for ticker in tickers:
                                symbol = ticker.get('symbol', '')
                                if symbol in mexc_symbols:
                                    # –°–æ–∑–¥–∞–µ–º OrderBook –∏–∑ —Ç–∏–∫–µ—Ä–∞
                                    bid_price = float(ticker.get('bidPrice', 0))
                                    ask_price = float(ticker.get('askPrice', 0))
                                    
                                    if bid_price > 0 and ask_price > 0:
                                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                                        base = symbol[:-4]  # –£–±–∏—Ä–∞–µ–º USDT
                                        formatted_symbol = f"{base}/USDT"
                                        
                                        orderbook = OrderBook(
                                            symbol=formatted_symbol,
                                            exchange='mexc',
                                            bids=[(bid_price, float(ticker.get('bidQty', 1)))],
                                            asks=[(ask_price, float(ticker.get('askQty', 1)))],
                                            timestamp=time.time()
                                        )
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                                        if 'mexc' not in self.orderbooks:
                                            self.orderbooks['mexc'] = {}
                                        self.orderbooks['mexc'][formatted_symbol] = orderbook
                                        
                                        if self.on_orderbook_update:
                                            await self.on_orderbook_update(orderbook)
                            
                            self.message_counts['mexc'] += len(mexc_symbols)
                            logger.debug(f"üìä MEXC REST: –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(mexc_symbols)} –ø–∞—Ä")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º rate limits)
                await asyncio.sleep(2)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ MEXC REST API: {e}")
                await asyncio.sleep(5)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        self.running = False
        
        for exchange_id, ws in self.connections.items():
            try:
                if ws:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    await ws.close()
                    logger.info(f"‚úÖ {exchange_id} WebSocket –∑–∞–∫—Ä—ã—Ç")
            except:
                pass
        
        self.connections.clear()
    
    async def _connect_mexc(self):
        """MEXC WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['mexc']['ws_url']
        
        async with websockets.connect(
            url,
            ping_interval=WEBSOCKET_CONFIG['ping_interval'],
            ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
        ) as ws:
            self.connections['mexc'] = ws
            self.reconnect_delays['mexc'] = WEBSOCKET_CONFIG['reconnect_delay']
            logger.info("‚úÖ MEXC WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MEXC v3 API
            symbols_to_subscribe = [s.replace('/', '').upper() for s in self.symbols 
                                   if 'USDT' in s][:30]
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏ MEXC v3 API
            for symbol in symbols_to_subscribe:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ miniTickers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω bid/ask
                sub_msg = {
                    "method": "SUBSCRIPTION",
                    "params": [f"spot@public.miniTickers.v3.api@{symbol}"]
                }
                await ws.send(json.dumps(sub_msg))
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in ws:
                try:
                    data = json.loads(message)
                    self.message_counts['mexc'] += 1
                    
                    if 'd' in data:
                        await self._process_mexc_message(data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MEXC: {e}")
    
    async def _process_mexc_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è MEXC"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ miniTickers v3 API
            if 'miniTickers' in str(data.get('c', '')):
                ticker = data['d']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞
                channel = data.get('c', '')
                if '@' in channel:
                    symbol = channel.split('@')[-1]
                else:
                    return
                
                # –°–æ–∑–¥–∞–µ–º OrderBook –∏–∑ miniTicker –¥–∞–Ω–Ω—ã—Ö
                if 'b' in ticker and 'a' in ticker:  # bid –∏ ask —Ü–µ–Ω—ã
                    orderbook = OrderBook(
                        symbol=f"{symbol[:-4]}/USDT",  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTCUSDT -> BTC/USDT
                        exchange='mexc',
                        bids=[(float(ticker['b']), float(ticker.get('B', 1)))],  # bid price –∏ volume
                        asks=[(float(ticker['a']), float(ticker.get('A', 1)))],  # ask price –∏ volume  
                        timestamp=time.time()
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    if 'mexc' not in self.orderbooks:
                        self.orderbooks['mexc'] = {}
                    self.orderbooks['mexc'][orderbook.symbol] = orderbook
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MEXC: {e}")
    
    async def _connect_bybit(self):
        """Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['bybit']['ws_url']
        
        async with websockets.connect(
            url,
            ping_interval=WEBSOCKET_CONFIG['ping_interval'],
            ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
        ) as ws:
            self.connections['bybit'] = ws
            self.reconnect_delays['bybit'] = WEBSOCKET_CONFIG['reconnect_delay']
            logger.info("‚úÖ Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
            symbols_to_subscribe = []
            for symbol in self.symbols[:30]:
                bybit_symbol = symbol.replace('/', '').upper()
                symbols_to_subscribe.append(f"orderbook.1.{bybit_symbol}")
                symbols_to_subscribe.append(f"tickers.{bybit_symbol}")
            
            sub_msg = {
                "op": "subscribe",
                "args": symbols_to_subscribe
            }
            await ws.send(json.dumps(sub_msg))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in ws:
                try:
                    data = json.loads(message)
                    self.message_counts['bybit'] += 1
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping/pong
                    if data.get('op') == 'ping':
                        pong = {"op": "pong"}
                        await ws.send(json.dumps(pong))
                    
                    elif 'topic' in data:
                        await self._process_bybit_message(data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Bybit: {e}")
    
    async def _process_bybit_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Bybit"""
        try:
            topic = data['topic']
            
            if 'orderbook' in topic:
                symbol = topic.split('.')[-1]
                depth = data['data']
                
                bids = [(float(b[0]), float(b[1])) for b in depth.get('b', [])]
                asks = [(float(a[0]), float(a[1])) for a in depth.get('a', [])]
                
                if bids and asks:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                    for base_curr in ['USDT', 'USDC', 'BUSD']:
                        if symbol.endswith(base_curr):
                            formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                            break
                    else:
                        formatted_symbol = symbol
                    
                    orderbook = OrderBook(
                        symbol=formatted_symbol,
                        exchange='bybit',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
            elif 'tickers' in topic:
                ticker = data['data']
                symbol = ticker['symbol']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                for base_curr in ['USDT', 'USDC', 'BUSD']:
                    if symbol.endswith(base_curr):
                        formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                        break
                else:
                    formatted_symbol = symbol
                
                orderbook = OrderBook(
                    symbol=formatted_symbol,
                    exchange='bybit',
                    bids=[(float(ticker.get('bid1Price', 0)), float(ticker.get('bid1Size', 0)))],
                    asks=[(float(ticker.get('ask1Price', 0)), float(ticker.get('ask1Size', 0)))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Bybit: {e}")
    
    async def _connect_huobi(self):
        """Huobi WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['huobi']['ws_url']
        
        async with websockets.connect(url) as ws:
            self.connections['huobi'] = ws
            self.reconnect_delays['huobi'] = WEBSOCKET_CONFIG['reconnect_delay']
            logger.info("‚úÖ Huobi WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
            for symbol in self.symbols[:30]:
                huobi_symbol = symbol.replace('/', '').lower()
                
                # BBO (Best Bid Offer)
                sub_msg = {
                    "sub": f"market.{huobi_symbol}.bbo",
                    "id": f"bbo_{huobi_symbol}"
                }
                await ws.send(json.dumps(sub_msg))
                
                # Depth
                depth_msg = {
                    "sub": f"market.{huobi_symbol}.depth.step0",
                    "id": f"depth_{huobi_symbol}"
                }
                await ws.send(json.dumps(depth_msg))
                await asyncio.sleep(0.1)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in ws:
                try:
                    # Huobi –∏—Å–ø–æ–ª—å–∑—É–µ—Ç gzip —Å–∂–∞—Ç–∏–µ
                    data = gzip.decompress(message)
                    data = json.loads(data)
                    self.message_counts['huobi'] += 1
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                    if 'ping' in data:
                        pong = {'pong': data['ping']}
                        await ws.send(json.dumps(pong))
                        self.last_ping['huobi'] = time.time()
                    
                    elif 'ch' in data:
                        await self._process_huobi_message(data)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Huobi: {e}")
    
    async def _process_huobi_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Huobi"""
        try:
            channel = data['ch']
            
            if 'bbo' in channel:
                parts = channel.split('.')
                symbol = parts[1].upper()
                ticker = data['tick']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                for base_curr in ['USDT', 'USDC', 'BUSD']:
                    if symbol.endswith(base_curr.lower()):
                        formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                        break
                else:
                    formatted_symbol = symbol
                
                orderbook = OrderBook(
                    symbol=formatted_symbol,
                    exchange='huobi',
                    bids=[(ticker['bid'], ticker['bidSize'])],
                    asks=[(ticker['ask'], ticker['askSize'])],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif 'depth' in channel:
                parts = channel.split('.')
                symbol = parts[1].upper()
                depth = data['tick']
                
                bids = [(float(b[0]), float(b[1])) for b in depth.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in depth.get('asks', [])]
                
                if bids and asks:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª
                    for base_curr in ['USDT', 'USDC', 'BUSD']:
                        if symbol.endswith(base_curr.lower()):
                            formatted_symbol = f"{symbol[:-len(base_curr)]}/{base_curr}"
                            break
                    else:
                        formatted_symbol = symbol
                    
                    orderbook = OrderBook(
                        symbol=formatted_symbol,
                        exchange='huobi',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Huobi: {e}")
    
    async def _connect_binance(self):
        """Binance WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Å –ø—Ä–æ–∫—Å–∏)"""
        url = EXCHANGES_CONFIG['binance']['ws_url']
        
        try:
            # Binance —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with websockets.connect(
                url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['binance'] = ws
                self.reconnect_delays['binance'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ Binance WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Binance —Ñ–æ—Ä–º–∞—Ç
                symbols_to_subscribe = []
                for symbol in self.symbols[:30]:
                    binance_symbol = symbol.replace('/', '').lower()
                    symbols_to_subscribe.append(f"{binance_symbol}@ticker")
                    symbols_to_subscribe.append(f"{binance_symbol}@depth5@100ms")
                
                sub_msg = {
                    "method": "SUBSCRIBE",
                    "params": symbols_to_subscribe,
                    "id": 1
                }
                await ws.send(json.dumps(sub_msg))
                logger.info(f"üì° Binance –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(symbols_to_subscribe)} –ø–æ—Ç–æ–∫–æ–≤")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['binance'] += 1
                        
                        if 'stream' in data:
                            await self._process_binance_message(data)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Binance: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Binance WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _connect_okx(self):
        """OKX WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['okx']['ws_url']
        
        try:
            # OKX —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with websockets.connect(
                url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['okx'] = ws
                self.reconnect_delays['okx'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ OKX WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - OKX —Ñ–æ—Ä–º–∞—Ç
                args = []
                for symbol in self.symbols[:30]:
                    okx_symbol = symbol.replace('/', '-').upper()
                    args.append({"channel": "tickers", "instId": okx_symbol})
                    args.append({"channel": "books5", "instId": okx_symbol})
                
                sub_msg = {
                    "op": "subscribe",
                    "args": args
                }
                await ws.send(json.dumps(sub_msg))
                logger.info(f"üì° OKX –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(args)} –∫–∞–Ω–∞–ª–æ–≤")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['okx'] += 1
                        
                        if 'data' in data:
                            await self._process_okx_message(data)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ OKX: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå OKX WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _connect_kucoin(self):
        """KuCoin WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º WebSocket endpoint –æ—Ç KuCoin API
            async with aiohttp.ClientSession() as session:
                endpoint_url = f"{EXCHANGES_CONFIG['kucoin']['rest_url']}/api/v1/bullet-public"
                async with session.post(endpoint_url) as resp:
                    if resp.status == 200:
                        bullet_data = await resp.json()
                        ws_endpoint = bullet_data['data']['instanceServers'][0]['endpoint']
                        ws_token = bullet_data['data']['token']
                        ws_url = f"{ws_endpoint}?token={ws_token}&[connectId=1]"
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å KuCoin WebSocket endpoint: {resp.status}")
            
            async with websockets.connect(
                ws_url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['kucoin'] = ws
                self.reconnect_delays['kucoin'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ KuCoin WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - KuCoin —Ñ–æ—Ä–º–∞—Ç
                for symbol in self.symbols[:30]:
                    kucoin_symbol = symbol.replace('/', '-').upper()
                    
                    # Ticker subscription
                    ticker_msg = {
                        "id": int(time.time() * 1000),
                        "type": "subscribe",
                        "topic": f"/market/ticker:{kucoin_symbol}",
                        "response": True
                    }
                    await ws.send(json.dumps(ticker_msg))
                    
                    # OrderBook subscription
                    book_msg = {
                        "id": int(time.time() * 1000) + 1,
                        "type": "subscribe",
                        "topic": f"/market/level2:{kucoin_symbol}",
                        "response": True
                    }
                    await ws.send(json.dumps(book_msg))
                    await asyncio.sleep(0.1)
                
                logger.info(f"üì° KuCoin –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(self.symbols[:30]) * 2} —Ç–æ–ø–∏–∫–æ–≤")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['kucoin'] += 1
                        
                        if 'subject' in data:
                            await self._process_kucoin_message(data)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ KuCoin: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå KuCoin WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _connect_kraken(self):
        """Kraken WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        url = EXCHANGES_CONFIG['kraken']['ws_url']
        
        try:
            # Kraken —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            async with websockets.connect(
                url,
                ping_interval=WEBSOCKET_CONFIG['ping_interval'],
                ping_timeout=WEBSOCKET_CONFIG['ping_timeout']
            ) as ws:
                self.connections['kraken'] = ws
                self.reconnect_delays['kraken'] = WEBSOCKET_CONFIG['reconnect_delay']
                logger.info("‚úÖ Kraken WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã - Kraken —Ñ–æ—Ä–º–∞—Ç
                pairs = []
                for symbol in self.symbols[:30]:
                    # Kraken –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä
                    if symbol == 'BTC/USDT':
                        pairs.append('XBT/USDT')
                    else:
                        pairs.append(symbol.replace('/', ''))
                
                # Ticker subscription
                ticker_msg = {
                    "event": "subscribe",
                    "pair": pairs,
                    "subscription": {"name": "ticker"}
                }
                await ws.send(json.dumps(ticker_msg))
                
                # Book subscription
                book_msg = {
                    "event": "subscribe",
                    "pair": pairs,
                    "subscription": {"name": "book", "depth": 5}
                }
                await ws.send(json.dumps(book_msg))
                
                logger.info(f"üì° Kraken –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {len(pairs)} –ø–∞—Ä")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in ws:
                    try:
                        data = json.loads(message)
                        self.message_counts['kraken'] += 1
                        
                        # Kraken –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
                        if isinstance(data, list) and len(data) >= 3:
                            await self._process_kraken_message(data)
                        elif isinstance(data, dict) and data.get('event') == 'heartbeat':
                            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ heartbeat
                            pass
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kraken: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Kraken WebSocket –æ—à–∏–±–∫–∞: {e}")
            raise
    
    async def _process_binance_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Binance"""
        try:
            stream_data = data['data']
            stream = data['stream']
            
            if '@ticker' in stream:
                symbol = stream.split('@')[0].upper()
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –æ–±—Ä–∞—Ç–Ω–æ
                formatted_symbol = f"{symbol[:-4]}/{symbol[-4:]}" if len(symbol) > 4 else symbol
                
                orderbook = OrderBook(
                    symbol=formatted_symbol,
                    exchange='binance',
                    bids=[(float(stream_data['b']), float(stream_data['B']))],
                    asks=[(float(stream_data['a']), float(stream_data['A']))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif '@depth' in stream:
                symbol = stream.split('@')[0].upper()
                formatted_symbol = f"{symbol[:-4]}/{symbol[-4:]}" if len(symbol) > 4 else symbol
                
                bids = [(float(b[0]), float(b[1])) for b in stream_data.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in stream_data.get('asks', [])]
                
                if bids and asks:
                    orderbook = OrderBook(
                        symbol=formatted_symbol,
                        exchange='binance',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Binance: {e}")
    
    async def _process_okx_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è OKX"""
        try:
            for item in data['data']:
                channel = data['arg']['channel']
                symbol = data['arg']['instId'].replace('-', '/')
                
                if channel == 'tickers':
                    orderbook = OrderBook(
                        symbol=symbol,
                        exchange='okx',
                        bids=[(float(item['bidPx']), float(item['bidSz']))],
                        asks=[(float(item['askPx']), float(item['askSz']))],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
                elif channel == 'books5':
                    bids = [(float(b[0]), float(b[1])) for b in item.get('bids', [])]
                    asks = [(float(a[0]), float(a[1])) for a in item.get('asks', [])]
                    
                    if bids and asks:
                        orderbook = OrderBook(
                            symbol=symbol,
                            exchange='okx',
                            bids=bids[:5],
                            asks=asks[:5],
                            timestamp=time.time()
                        )
                        
                        if self.on_orderbook_update:
                            await self.on_orderbook_update(orderbook)
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OKX: {e}")
    
    async def _process_kucoin_message(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è KuCoin"""
        try:
            subject = data['subject']
            topic = data['topic']
            msg_data = data['data']
            
            if 'ticker' in subject:
                symbol = topic.split(':')[1].replace('-', '/')
                
                orderbook = OrderBook(
                    symbol=symbol,
                    exchange='kucoin',
                    bids=[(float(msg_data['bestBid']), float(msg_data['bestBidSize']))],
                    asks=[(float(msg_data['bestAsk']), float(msg_data['bestAskSize']))],
                    timestamp=time.time()
                )
                
                if self.on_orderbook_update:
                    await self.on_orderbook_update(orderbook)
                    
            elif 'level2' in subject:
                symbol = topic.split(':')[1].replace('-', '/')
                
                bids = [(float(b[0]), float(b[1])) for b in msg_data.get('bids', [])]
                asks = [(float(a[0]), float(a[1])) for a in msg_data.get('asks', [])]
                
                if bids and asks:
                    orderbook = OrderBook(
                        symbol=symbol,
                        exchange='kucoin',
                        bids=bids[:5],
                        asks=asks[:5],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ KuCoin: {e}")
    
    async def _process_kraken_message(self, data: List):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Kraken"""
        try:
            if len(data) >= 4:
                msg_data = data[1]
                pair = data[3]
                channel = data[2]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—É –æ–±—Ä–∞—Ç–Ω–æ
                if pair == 'XBT/USDT':
                    symbol = 'BTC/USDT'
                else:
                    symbol = pair
                
                if channel == 'ticker':
                    ticker = msg_data
                    
                    orderbook = OrderBook(
                        symbol=symbol,
                        exchange='kraken',
                        bids=[(float(ticker['b'][0]), float(ticker['b'][1]))],
                        asks=[(float(ticker['a'][0]), float(ticker['a'][1]))],
                        timestamp=time.time()
                    )
                    
                    if self.on_orderbook_update:
                        await self.on_orderbook_update(orderbook)
                        
                elif channel == 'book-5':
                    book_data = msg_data
                    
                    bids = []
                    asks = []
                    
                    if 'b' in book_data:
                        bids = [(float(b[0]), float(b[1])) for b in book_data['b']]
                    if 'a' in book_data:
                        asks = [(float(a[0]), float(a[1])) for a in book_data['a']]
                        
                    if bids and asks:
                        orderbook = OrderBook(
                            symbol=symbol,
                            exchange='kraken',
                            bids=bids[:5],
                            asks=asks[:5],
                            timestamp=time.time()
                        )
                        
                        if self.on_orderbook_update:
                            await self.on_orderbook_update(orderbook)
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Kraken: {e}")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WebSocket"""
        stats = {
            'connected': list(self.connections.keys()),
            'message_counts': dict(self.message_counts),
            'error_counts': dict(self.error_counts),
            'last_ping': dict(self.last_ping),
            'reconnect_delays': dict(self.reconnect_delays)
        }
        return stats
