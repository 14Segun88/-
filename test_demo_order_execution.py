#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è demo-–æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö demo-—Å—á–µ—Ç–∞—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç OKX –∏ Bitget –≤ demo —Ä–µ–∂–∏–º–µ
"""

import asyncio
import time
from exchange_connector import ExchangeConnector
from production_config import TRADING_CONFIG, API_KEYS

async def test_demo_order_execution():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è demo-–æ—Ä–¥–µ—Ä–æ–≤"""
    
    print("üß™ –¢–ï–°–¢ DEMO-–û–†–î–ï–†–û–í –ù–ê –†–ï–ê–õ–¨–ù–´–• –ë–†–û–ö–ï–†–°–ö–ò–• –°–ß–ï–¢–ê–•")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ demo —Ä–µ–∂–∏–º–µ
    connector = ExchangeConnector(mode='demo')
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await connector.initialize()
        print("‚úÖ ExchangeConnector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ demo —Ä–µ–∂–∏–º–µ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        test_symbol = 'BTC/USDT'
        test_volume = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –ë–∏—Ä–∂–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å demo API –∫–ª—é—á–∞–º–∏)
        test_exchanges = []
        if API_KEYS.get('okx', {}).get('apiKey'):
            test_exchanges.append('okx')
        if API_KEYS.get('bitget', {}).get('apiKey'):
            test_exchanges.append('bitget')
            
        if not test_exchanges:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è demo —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –±–∏—Ä–∂–∏: {test_exchanges}")
        print(f"üî∏ –°–∏–º–≤–æ–ª: {test_symbol}")
        print(f"üî∏ –û–±—ä–µ–º: {test_volume} BTC")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ demo-–±–∞–ª–∞–Ω—Å–æ–≤:")
        for exchange_id in test_exchanges:
            try:
                balance = await connector.fetch_balance(exchange_id)
                if balance:
                    usdt_balance = balance.get('USDT', {}).get('free', 0)
                    btc_balance = balance.get('BTC', {}).get('free', 0)
                    print(f"  üí∞ {exchange_id.upper()}: {usdt_balance:.2f} USDT, {btc_balance:.6f} BTC")
                else:
                    print(f"  ‚ö†Ô∏è {exchange_id.upper()}: –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"  ‚ùå {exchange_id.upper()}: –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
        print(f"\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω:")
        current_prices = {}
        for exchange_id in test_exchanges:
            try:
                orderbook = await connector.fetch_orderbook(exchange_id, test_symbol)
                if orderbook and orderbook.get('asks'):
                    current_price = orderbook['asks'][0][0]
                    current_prices[exchange_id] = current_price
                    print(f"  üí∏ {exchange_id.upper()}: {current_price:.2f} USDT")
                else:
                    print(f"  ‚ö†Ô∏è {exchange_id.upper()}: —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                print(f"  ‚ùå {exchange_id.upper()}: –æ—à–∏–±–∫–∞ —Ü–µ–Ω—ã - {e}")
        
        if not current_prices:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è market BUY –æ—Ä–¥–µ—Ä–æ–≤
        print(f"\nüõí –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è DEMO BUY –æ—Ä–¥–µ—Ä–æ–≤:")
        created_orders = {}
        
        for exchange_id in test_exchanges:
            if exchange_id not in current_prices:
                continue
                
            try:
                print(f"  üìù –°–æ–∑–¥–∞–Ω–∏–µ BUY –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {exchange_id.upper()}...")
                
                # –°–æ–∑–¥–∞–µ–º market buy –æ—Ä–¥–µ—Ä
                result = await connector.create_order(
                    exchange_id=exchange_id,
                    symbol=test_symbol,
                    order_type='market',
                    side='buy',
                    amount=test_volume,
                    price=None  # Market –æ—Ä–¥–µ—Ä
                )
                
                if result and result.get('id'):
                    order_id = result['id']
                    created_orders[exchange_id] = order_id
                    print(f"  ‚úÖ {exchange_id.upper()}: –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω - {order_id}")
                    print(f"     üìã –î–µ—Ç–∞–ª–∏: {result}")
                else:
                    print(f"  ‚ùå {exchange_id.upper()}: –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω - {result}")
                    
            except Exception as e:
                print(f"  ‚ùå {exchange_id.upper()}: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ - {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤
        if created_orders:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ demo-–æ—Ä–¥–µ—Ä–æ–≤:")
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            
            for exchange_id, order_id in created_orders.items():
                try:
                    status = await connector.fetch_order_status(exchange_id, order_id, test_symbol)
                    if status:
                        order_status = status.get('status', 'unknown')
                        filled = status.get('filled', 0)
                        print(f"  üìä {exchange_id.upper()}: —Å—Ç–∞—Ç—É—Å={order_status}, –∏—Å–ø–æ–ª–Ω–µ–Ω–æ={filled}")
                        print(f"     üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {status}")
                    else:
                        print(f"  ‚ö†Ô∏è {exchange_id.upper()}: —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    print(f"  ‚ùå {exchange_id.upper()}: –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ - {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ demo-–±–∞–ª–∞–Ω—Å–æ–≤:")
        for exchange_id in test_exchanges:
            try:
                balance = await connector.fetch_balance(exchange_id)
                if balance:
                    usdt_balance = balance.get('USDT', {}).get('free', 0)
                    btc_balance = balance.get('BTC', {}).get('free', 0)
                    print(f"  üí∞ {exchange_id.upper()}: {usdt_balance:.2f} USDT, {btc_balance:.6f} BTC")
                else:
                    print(f"  ‚ö†Ô∏è {exchange_id.upper()}: –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"  ‚ùå {exchange_id.upper()}: –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - {e}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç demo-–æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ
        await connector.close()
        print("üîå ExchangeConnector –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    asyncio.run(test_demo_order_execution())
