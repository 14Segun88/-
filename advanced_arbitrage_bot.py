#!/usr/bin/env python3
"""
Advanced Arbitrage Bot v2.0
–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å API –∫–ª—é—á–∞–º–∏, WebSocket, maker –æ—Ä–¥–µ—Ä–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞.
"""
import asyncio
import ccxt.async_support as ccxt
import websockets
import json
import time
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import hmac
import hashlib
import pandas as pd
import numpy as np

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# API –ö–õ–Æ–ß–ò (–í–ê–ñ–ù–û: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
API_KEYS = {
    'mexc': {
        'apiKey': 'mx0vglAj5GaknRsyUQ',
        'secret': '83911cc1cd784568832b624fbfb19751',
        'enableRateLimit': True
    },
    'okx': {
        'apiKey': '',  # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç
        'secret': '',
        'password': '',
        'enableRateLimit': True
    },
    'kucoin': {
        'apiKey': '',  # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç
        'secret': '',
        'password': '',
        'enableRateLimit': True
    },
    'gateio': {
        'apiKey': '',  # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç
        'secret': '',
        'enableRateLimit': True
    },
    'bitget': {
        'apiKey': '',  # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç
        'secret': '',
        'password': '',
        'enableRateLimit': True
    }
}

# –ö–æ–º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º maker –æ—Ä–¥–µ—Ä–æ–≤
EXCHANGE_FEES = {
    'mexc': {'maker': 0.0, 'taker': 0.001},      # 0% maker!
    'okx': {'maker': 0.0008, 'taker': 0.001},    # 0.08% maker
    'kucoin': {'maker': 0.001, 'taker': 0.001},  # 0.1%
    'gateio': {'maker': 0.002, 'taker': 0.002},  # 0.2%
    'bitget': {'maker': 0.001, 'taker': 0.001}   # 0.1%
}

# WebSocket URLs
WS_URLS = {
    'mexc': 'wss://wbs.mexc.com/ws',
    'okx': 'wss://ws.okx.com:8443/ws/v5/public',
    'kucoin': None,  # –¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    'gateio': 'wss://api.gateio.ws/ws/v4/',
    'bitget': 'wss://ws.bitget.com/mix/v1/stream'
}

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_PROFIT_THRESHOLD = 0.15  # 0.15% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è maker –æ—Ä–¥–µ—Ä–æ–≤
POSITION_SIZE_USD = 500      # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
MAX_SLIPPAGE = 0.05          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ª–∏–ø–ø–µ–¥–∂ 0.05%
USE_MAKER_ORDERS = True      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å maker –æ—Ä–¥–µ—Ä–∞
ORDERBOOK_DEPTH = 10         # –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–∞
MIN_LIQUIDITY_USD = 1000     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞–∫–∞–Ω–µ

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ)
SYMBOLS = [
    'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT', 'DOGE/USDT',
    'ADA/USDT', 'AVAX/USDT', 'DOT/USDT', 'LTC/USDT',
    'UNI/USDT', 'LINK/USDT', 'ATOM/USDT'
]

class AdvancedArbitrageBot:
    def __init__(self):
        self.clients = {}
        self.ws_connections = {}
        self.prices = {}  # {symbol: {exchange: {bid, ask, timestamp}}}
        self.orderbooks = {}  # {symbol: {exchange: {bids, asks, timestamp}}}
        self.balances = {}
        self.is_running = True
        self.opportunities_found = 0
        self.real_trades = []
        self.total_profit_usd = 0
        self.active_orders = {}
        self.volatility = {}  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CCXT –∫–ª–∏–µ–Ω—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏."""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Advanced Arbitrage Bot v2.0")
        print("-" * 50)
        
        for exchange_name, credentials in API_KEYS.items():
            if not credentials['apiKey']:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ä–∂–∏ –±–µ–∑ –∫–ª—é—á–µ–π
                continue
                
            try:
                exchange_class = getattr(ccxt, exchange_name)
                self.clients[exchange_name] = exchange_class(credentials)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
                await self.clients[exchange_name].load_markets()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                try:
                    balance = await self.clients[exchange_name].fetch_balance()
                    usdt_balance = balance.get('USDT', {}).get('free', 0)
                    self.balances[exchange_name] = usdt_balance
                    print(f"‚úÖ {exchange_name.upper()}: ${usdt_balance:.2f} USDT")
                except:
                    self.balances[exchange_name] = 0
                    print(f"‚ö†Ô∏è {exchange_name.upper()}: –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∞?)")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {exchange_name}: {e}")
                
        print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {len(self.clients)}")
        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${sum(self.balances.values()):.2f} USDT")
        
    async def connect_websockets(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        for exchange, url in WS_URLS.items():
            if exchange not in self.clients or not url:
                continue
                
            asyncio.create_task(self.ws_handler(exchange, url))
            
    async def ws_handler(self, exchange: str, url: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        while self.is_running:
            try:
                async with websockets.connect(url) as ws:
                    self.ws_connections[exchange] = ws
                    print(f"üîå WebSocket {exchange} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã
                    await self.subscribe_tickers(ws, exchange)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for message in ws:
                        await self.process_ws_message(exchange, message)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è WebSocket {exchange} –æ—Ç–∫–ª—é—á–µ–Ω: {e}")
                await asyncio.sleep(5)
                
    async def subscribe_tickers(self, ws, exchange: str):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ WebSocket."""
        if exchange == 'mexc':
            # MEXC —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–¥–µ–ª—å–Ω–æ
            for symbol in SYMBOLS[:5]:  # –ù–∞—á–Ω–µ–º —Å 5 —Å–∏–º–≤–æ–ª–æ–≤
                sub_msg = {
                    "method": "SUBSCRIPTION",
                    "params": [f"spot@public.deals.v3.api@{symbol.replace('/', '').lower()}"]
                }
                await ws.send(json.dumps(sub_msg))
                await asyncio.sleep(0.1)
            
        elif exchange == 'okx':
            sub_msg = {
                "op": "subscribe",
                "args": [{"channel": "tickers", "instId": s.replace('/', '-')} for s in SYMBOLS[:5]]
            }
            await ws.send(json.dumps(sub_msg))
            
        elif exchange == 'gateio':
            sub_msg = {
                "time": int(time.time()),
                "channel": "spot.tickers",
                "event": "subscribe",
                "payload": [s.replace('/', '_') for s in SYMBOLS[:5]]
            }
            await ws.send(json.dumps(sub_msg))
            
    async def process_ws_message(self, exchange: str, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket."""
        try:
            data = json.loads(message)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
            if exchange == 'mexc':
                if 'd' in data and 'deals' in data['d']:
                    for deal in data['d']['deals']:
                        symbol = data['s'].upper().replace('USDT', '/USDT')
                        price = float(deal['p'])
                        self.update_price(symbol, exchange, price, price)
                        
            elif exchange == 'okx':
                if 'data' in data:
                    for item in data['data']:
                        symbol = item['instId'].replace('-', '/')
                        self.update_price(symbol, exchange,
                                        float(item['bidPx']),
                                        float(item['askPx']))
                                        
            elif exchange == 'gateio':
                if 'result' in data:
                    for item in data['result']:
                        symbol = item['currency_pair'].replace('_', '/')
                        self.update_price(symbol, exchange,
                                        float(item['highest_bid']),
                                        float(item['lowest_ask']))
                                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if len(self.prices) > 0:
                await self.check_arbitrage_opportunity()
            
        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            
    def update_price(self, symbol: str, exchange: str, bid: float, ask: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å."""
        if symbol not in self.prices:
            self.prices[symbol] = {}
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        old_price = self.prices[symbol].get(exchange, {}).get('bid', bid)
        
        self.prices[symbol][exchange] = {
            'bid': bid,
            'ask': ask,
            'timestamp': time.time()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if symbol not in self.volatility:
            self.volatility[symbol] = []
        
        price_change = abs(bid - old_price) / old_price * 100 if old_price else 0
        self.volatility[symbol].append(price_change)
        if len(self.volatility[symbol]) > 100:
            self.volatility[symbol].pop(0)
            
    async def fetch_orderbook(self, exchange: str, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."""
        try:
            client = self.clients[exchange]
            orderbook = await client.fetch_order_book(symbol, ORDERBOOK_DEPTH)
            
            self.orderbooks[symbol] = self.orderbooks.get(symbol, {})
            self.orderbooks[symbol][exchange] = {
                'bids': orderbook['bids'],
                'asks': orderbook['asks'],
                'timestamp': time.time()
            }
            return orderbook
            
        except Exception as e:
            return None
            
    def calculate_slippage(self, orderbook: dict, size_usd: float, side: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–∏–ø–ø–µ–¥–∂ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏."""
        book = orderbook['asks'] if side == 'buy' else orderbook['bids']
        if not book:
            return float('inf')
            
        total_cost = 0
        total_amount = 0
        
        for price, amount in book:
            cost = price * amount
            if total_cost + cost >= size_usd:
                # –î–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
                remaining = size_usd - total_cost
                total_amount += remaining / price
                break
            total_cost += cost
            total_amount += amount
            
        if total_cost < size_usd:
            return float('inf')  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            
        avg_price = size_usd / total_amount
        best_price = book[0][0]
        slippage = abs(avg_price - best_price) / best_price * 100
        
        return slippage
        
    async def check_arbitrage_opportunity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."""
        opportunities = []
        now = time.time()
        
        for symbol in self.prices:
            if symbol not in self.prices or len(self.prices[symbol]) < 2:
                continue
                
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_bid = 0
            best_bid_exchange = None
            best_ask = float('inf')
            best_ask_exchange = None
            
            for exchange, price_data in self.prices[symbol].items():
                if now - price_data['timestamp'] > 2:  # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 2 —Å–µ–∫
                    continue
                    
                if price_data['bid'] > best_bid:
                    best_bid = price_data['bid']
                    best_bid_exchange = exchange
                    
                if price_data['ask'] < best_ask:
                    best_ask = price_data['ask']
                    best_ask_exchange = exchange
                    
            if not best_bid_exchange or not best_ask_exchange:
                continue
                
            if best_bid <= best_ask:
                continue
                
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º maker –∫–æ–º–∏—Å—Å–∏–π
            spread_pct = (best_bid - best_ask) / best_ask * 100
            
            if USE_MAKER_ORDERS:
                buy_fee = EXCHANGE_FEES[best_ask_exchange]['maker'] * 100
                sell_fee = EXCHANGE_FEES[best_bid_exchange]['maker'] * 100
            else:
                buy_fee = EXCHANGE_FEES[best_ask_exchange]['taker'] * 100
                sell_fee = EXCHANGE_FEES[best_bid_exchange]['taker'] * 100
                
            net_profit = spread_pct - buy_fee - sell_fee
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility_score = np.mean(self.volatility.get(symbol, [0]))
            
            if net_profit >= MIN_PROFIT_THRESHOLD:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞–∫–∞–Ω–µ
                buy_book = await self.fetch_orderbook(best_ask_exchange, symbol)
                sell_book = await self.fetch_orderbook(best_bid_exchange, symbol)
                
                if buy_book and sell_book:
                    buy_slippage = self.calculate_slippage(buy_book, POSITION_SIZE_USD, 'buy')
                    sell_slippage = self.calculate_slippage(sell_book, POSITION_SIZE_USD, 'sell')
                    
                    total_slippage = buy_slippage + sell_slippage
                    
                    if total_slippage < MAX_SLIPPAGE:
                        opportunities.append({
                            'symbol': symbol,
                            'buy_exchange': best_ask_exchange,
                            'sell_exchange': best_bid_exchange,
                            'buy_price': best_ask,
                            'sell_price': best_bid,
                            'spread_pct': spread_pct,
                            'net_profit': net_profit,
                            'slippage': total_slippage,
                            'volatility': volatility_score,
                            'timestamp': now
                        })
                        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        opportunities.sort(key=lambda x: x['net_profit'] + x['volatility'] * 0.1, reverse=True)
        
        if opportunities:
            best = opportunities[0]
            await self.execute_arbitrage(best)
            
    async def execute_arbitrage(self, opportunity: dict):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É —Å atomic execution."""
        print(f"\nüíé –ê–†–ë–ò–¢–†–ê–ñ –ù–ê–ô–î–ï–ù!")
        print(f"  {opportunity['symbol']}: {opportunity['buy_exchange']} ‚Üí {opportunity['sell_exchange']}")
        print(f"  –°–ø—Ä–µ–¥: {opportunity['spread_pct']:.3f}%")
        print(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity['net_profit']:.3f}%")
        print(f"  –°–ª–∏–ø–ø–µ–¥–∂: {opportunity['slippage']:.3f}%")
        print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {opportunity['volatility']:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        buy_balance = self.balances.get(opportunity['buy_exchange'], 0)
        sell_exchange_symbol = opportunity['symbol'].split('/')[0]
        
        if buy_balance < POSITION_SIZE_USD:
            print(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ {opportunity['buy_exchange']}")
            return
            
        # Atomic execution - —Ä–∞–∑–º–µ—â–∞–µ–º –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        try:
            amount = POSITION_SIZE_USD / opportunity['buy_price']
            
            if USE_MAKER_ORDERS:
                # Maker –æ—Ä–¥–µ—Ä–∞ - –ª–∏–º–∏—Ç–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
                buy_price = opportunity['buy_price'] * 0.9995
                sell_price = opportunity['sell_price'] * 1.0005
                
                tasks = [
                    self.place_order(opportunity['buy_exchange'], opportunity['symbol'], 
                                   'limit', 'buy', amount, buy_price),
                    self.place_order(opportunity['sell_exchange'], opportunity['symbol'],
                                   'limit', 'sell', amount, sell_price)
                ]
            else:
                # Taker –æ—Ä–¥–µ—Ä–∞ - —Ä—ã–Ω–æ—á–Ω—ã–µ
                tasks = [
                    self.place_order(opportunity['buy_exchange'], opportunity['symbol'],
                                   'market', 'buy', amount),
                    self.place_order(opportunity['sell_exchange'], opportunity['symbol'],
                                   'market', 'sell', amount)
                ]
                
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            buy_order = results[0]
            sell_order = results[1]
            
            if not isinstance(buy_order, Exception) and not isinstance(sell_order, Exception):
                profit_usd = POSITION_SIZE_USD * opportunity['net_profit'] / 100
                self.total_profit_usd += profit_usd
                
                trade = {
                    'timestamp': datetime.now().isoformat(),
                    'symbol': opportunity['symbol'],
                    'buy_exchange': opportunity['buy_exchange'],
                    'sell_exchange': opportunity['sell_exchange'],
                    'buy_order_id': buy_order.get('id', 'N/A'),
                    'sell_order_id': sell_order.get('id', 'N/A'),
                    'size_usd': POSITION_SIZE_USD,
                    'net_profit_pct': opportunity['net_profit'],
                    'profit_usd': profit_usd,
                    'total_profit': self.total_profit_usd
                }
                
                self.real_trades.append(trade)
                self.save_trade(trade)
                
                print(f"  ‚úÖ –ò–°–ü–û–õ–ù–ï–ù–û! –ü—Ä–∏–±—ã–ª—å: ${profit_usd:.2f}")
                print(f"  üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
                
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:")
                if isinstance(buy_order, Exception):
                    print(f"     –ü–æ–∫—É–ø–∫–∞: {buy_order}")
                if isinstance(sell_order, Exception):
                    print(f"     –ü—Ä–æ–¥–∞–∂–∞: {sell_order}")
                    
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
    async def place_order(self, exchange: str, symbol: str, order_type: str, 
                          side: str, amount: float, price: float = None):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ."""
        try:
            client = self.clients[exchange]
            
            if order_type == 'limit':
                order = await client.create_limit_order(symbol, side, amount, price)
            else:
                order = await client.create_market_order(symbol, side, amount)
                
            return order
            
        except Exception as e:
            return e
            
    def save_trade(self, trade: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ —Ñ–∞–π–ª."""
        filename = 'real_trades.json'
        
        try:
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    trades = json.load(f)
            else:
                trades = []
                
            trades.append(trade)
            
            with open(filename, 'w') as f:
                json.dump(trades, f, indent=2)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
    async def monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
        while self.is_running:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ REST API –¥–ª—è –±–∏—Ä–∂ –±–µ–∑ WebSocket
            for exchange in self.clients:
                if exchange not in self.ws_connections:
                    asyncio.create_task(self.fetch_prices_rest(exchange))
                    
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            for exchange in self.clients:
                try:
                    balance = await self.clients[exchange].fetch_balance()
                    self.balances[exchange] = balance.get('USDT', {}).get('free', 0)
                except:
                    pass
                    
            await asyncio.sleep(1)
            
    async def fetch_prices_rest(self, exchange: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ REST API."""
        try:
            client = self.clients[exchange]
            tickers = await client.fetch_tickers(SYMBOLS)
            
            for symbol, ticker in tickers.items():
                if ticker['bid'] and ticker['ask']:
                    self.update_price(symbol, exchange, ticker['bid'], ticker['ask'])
                    
        except Exception as e:
            pass
            
    async def status_loop(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
        while self.is_running:
            await asyncio.sleep(30)
            
            active_prices = sum(1 for s in self.prices.values() 
                              for p in s.values() 
                              if time.time() - p['timestamp'] < 5)
                              
            avg_volatility = np.mean([np.mean(v) for v in self.volatility.values() if v])
            
            print(f"\nüìä –°–¢–ê–¢–£–° –ë–û–¢–ê:")
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: {active_prices}")
            print(f"  WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(self.ws_connections)}")
            print(f"  –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {avg_volatility:.3f}%")
            print(f"  –°–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {len(self.real_trades)}")
            print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        await self.initialize()
        
        if not self.clients:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ —Å API –∫–ª—é—á–∞–º–∏")
            return
            
        print("\nüéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {MIN_PROFIT_THRESHOLD}%")
        print(f"  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${POSITION_SIZE_USD}")
        print(f"  –†–µ–∂–∏–º: {'MAKER –æ—Ä–¥–µ—Ä–∞' if USE_MAKER_ORDERS else 'TAKER –æ—Ä–¥–µ—Ä–∞'}")
        print("-" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tasks = [
            asyncio.create_task(self.connect_websockets()),
            asyncio.create_task(self.monitor_loop()),
            asyncio.create_task(self.status_loop())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.is_running = False
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for client in self.clients.values():
            await client.close()
            
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –°–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {len(self.real_trades)}")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
        if self.real_trades:
            avg_profit = self.total_profit_usd / len(self.real_trades)
            print(f"  –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${avg_profit:.2f}")
            
async def main():
    bot = AdvancedArbitrageBot()
    await bot.run()
    
if __name__ == "__main__":
    print("=" * 50)
    print("   ADVANCED ARBITRAGE BOT v2.0")
    print("   –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å API –∫–ª—é—á–∞–º–∏")
    print("=" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
