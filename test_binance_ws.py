# -*- coding: utf-8 -*-
"""
Binance WebSocket Smoke Test

–¶–µ–ª—å:
- –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance WebSocket —Å –∑–∞–ø–∞—Å–Ω—ã–º–∏ —Ö–æ—Å—Ç–∞–º–∏ (–æ–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
- –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–∏–∫–µ—Ä—ã (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Å—Ç–∞–∫–∞–Ω—ã) –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
- –°—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
- –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

–ó–∞–ø—É—Å–∫:
python3 test_binance_ws.py --symbols "BTC/USDT,ETH/USDT,SOL/USDT" --duration 30
python3 test_binance_ws.py --duration 30 --depth  # –∞–≤—Ç–æ-—Å–∏–º–≤–æ–ª—ã –∏–∑ production_config
"""

import asyncio
import json
import logging
import time
import argparse
from typing import List, Optional

import websockets

try:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ websocket-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, —á—Ç–æ –∏ –≤ –ø—Ä–æ–¥–µ
    from production_config import WEBSOCKET_CONFIG, DYNAMIC_PAIRS_CONFIG
except Exception:
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–º–ø–æ—Ä—Ç–∞
    WEBSOCKET_CONFIG = {
        'ping_interval': 20,
        'ping_timeout': 10,
        'close_timeout': 10,
        'reconnect_delay': 1,
        'max_reconnect_delay': 60,
        'message_queue_size': 10000,
        'compression': 'deflate',
    }
    DYNAMIC_PAIRS_CONFIG = {
        'priority_pairs': ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'ADA/USDT']
    }

logger = logging.getLogger("binance_smoke")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
    datefmt='%H:%M:%S',
)

# –¢–µ –∂–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL, —á—Ç–æ –∏ –≤ websocket_manager._connect_binance()
ALTERNATIVE_URLS = [
    'wss://stream.binance.com:9443/ws',
    'wss://stream.binance.com:443/ws',
    'wss://stream.binancezh.com:9443/ws',  # –ö–∏—Ç–∞–π—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
]


def resolve_symbols(user_symbols: Optional[str], limit: int) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTC/USDT'."""
    if user_symbols:
        syms = [s.strip().upper() for s in user_symbols.split(',') if s.strip()]
    else:
        syms = [s for s in DYNAMIC_PAIRS_CONFIG.get('priority_pairs', [])]
        if not syms:
            syms = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT', 'ADA/USDT']
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ —Å–º–æ–∫-—Ç–µ—Å—Ç–∞
    return syms[:max(1, limit)]


def build_streams(symbols: List[str], include_depth: bool) -> List[str]:
    """–°—Ç—Ä–æ–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ Binance: <symbol>@ticker (+ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ depth5)."""
    streams: List[str] = []
    for s in symbols:
        b = s.replace('/', '').lower()
        streams.append(f"{b}@ticker")
        if include_depth:
            streams.append(f"{b}@depth5@100ms")
    return streams


async def run_smoke(symbols: List[str], duration: int, include_depth: bool) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–º–æ–∫-—Ç–µ—Å—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É URL."""
    streams = build_streams(symbols, include_depth)

    for attempt_url in ALTERNATIVE_URLS:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {attempt_url}")
        try:
            async with websockets.connect(
                attempt_url,
                ping_interval=WEBSOCKET_CONFIG.get('ping_interval', 20),
                ping_timeout=WEBSOCKET_CONFIG.get('ping_timeout', 10),
                close_timeout=WEBSOCKET_CONFIG.get('close_timeout', 10),
            ) as ws:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

                sub_msg = {"method": "SUBSCRIBE", "params": streams, "id": 1}
                await ws.send(json.dumps(sub_msg))
                logger.info(
                    f"üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {len(streams)} –ø–æ—Ç–æ–∫–æ–≤ (—Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}, depth={'on' if include_depth else 'off'})"
                )

                start = time.time()
                deadline = start + duration

                total_msgs = 0
                ticker_msgs = 0
                depth_msgs = 0
                confirm_msgs = 0
                parse_errors = 0
                other_msgs = 0
                samples: List[str] = []

                while time.time() < deadline:
                    timeout_left = max(0.1, deadline - time.time())
                    try:
                        raw = await asyncio.wait_for(ws.recv(), timeout=min(2.0, timeout_left))
                    except asyncio.TimeoutError:
                        continue
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        break

                    try:
                        data = json.loads(raw)
                        total_msgs += 1

                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                        if isinstance(data, dict) and data.get('id') == 1 and 'result' in data:
                            confirm_msgs += 1
                            if confirm_msgs <= 1:
                                logger.info("Binance –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                            continue

                        # –§–æ—Ä–º–∞—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {'stream': 'btcusdt@ticker', 'data': {...}}
                        if isinstance(data, dict) and 'stream' in data:
                            stream = data.get('stream', '')
                            if '@ticker' in stream:
                                ticker_msgs += 1
                            elif '@depth' in stream:
                                depth_msgs += 1
                            else:
                                other_msgs += 1
                            if len(samples) < 3:
                                samples.append(raw[:200])
                            continue

                        # –§–æ—Ä–º–∞—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞/–∏–≤–µ–Ω—Ç–∞: {'e': '24hrTicker', ...}
                        if isinstance(data, dict) and 'e' in data:
                            ev = str(data.get('e', '')).lower()
                            if 'ticker' in ev:
                                ticker_msgs += 1
                            else:
                                other_msgs += 1
                            if len(samples) < 3:
                                samples.append(raw[:200])
                            continue

                        # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∞–∫–∞–Ω (partial depth), –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–µ–∑ 'stream' –∏ –±–µ–∑ 'e'
                        if isinstance(data, dict) and 'bids' in data and 'asks' in data:
                            depth_msgs += 1
                            if len(samples) < 3:
                                samples.append(raw[:200])
                            continue

                        other_msgs += 1
                        if len(samples) < 3:
                            samples.append(raw[:200])

                    except json.JSONDecodeError as e:
                        parse_errors += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    except Exception as e:
                        other_msgs += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                elapsed = max(0.001, time.time() - start)
                logger.info("\n===== –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Binance WebSocket =====")
                logger.info(f"URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {attempt_url}")
                logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {elapsed:.1f} —Å–µ–∫")
                logger.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_msgs} (~{total_msgs/elapsed:.1f} msg/s)")
                logger.info(f"–¢–∏–∫–µ—Ä—ã: {ticker_msgs}")
                logger.info(f"–°—Ç–∞–∫–∞–Ω—ã: {depth_msgs}")
                logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {confirm_msgs}")
                logger.info(f"–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_errors}")
                logger.info(f"–ü—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {other_msgs}")
                if samples:
                    logger.info("–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 3):")
                    for i, s in enumerate(samples, 1):
                        logger.info(f"[{i}] {s}")

                return 0
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {attempt_url}: {e}")
            continue

    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket –Ω–µ—É–¥–∞—á–Ω—ã")
    return 1


async def amain(args: argparse.Namespace) -> int:
    symbols = resolve_symbols(args.symbols, args.limit)
    logger.info(f"–°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–º–æ–∫-—Ç–µ—Å—Ç–∞ ({len(symbols)}): {', '.join(symbols)}")
    return await run_smoke(symbols, args.duration, args.depth)


def main() -> None:
    parser = argparse.ArgumentParser(description="Binance WebSocket Smoke Test")
    parser.add_argument(
        "--symbols",
        type=str,
        default=None,
        help="–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC/USDT,ETH/USDT). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—É—Ç—Å—è –∏–∑ production_config.DYNAMIC_PAIRS_CONFIG",
    )
    parser.add_argument(
        "--duration",
        type=int,
        default=30,
        help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)",
    )
    parser.add_argument(
        "--limit",
        type=int,
        default=10,
        help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)",
    )
    parser.add_argument(
        "--depth",
        action="store_true",
        help="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å—Ç–∞–∫–∞–Ω—ã (depth5@100ms)",
    )
    args = parser.parse_args()

    rc = asyncio.run(amain(args))
    raise SystemExit(rc)


if __name__ == "__main__":
    main()
