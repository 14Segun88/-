#!/usr/bin/env python3
"""
Real-Time Trader Monitor - 100% —Ç–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–¥–µ—Ä–∞ –±–µ–∑ —Ñ–µ–π–∫–æ–≤
–ß–∏—Ç–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∏–∑ –ª–æ–≥–æ–≤
"""

import asyncio
import os
import re
import json
from datetime import datetime, timedelta
from collections import deque
import time

# ANSI —Ü–≤–µ—Ç–∞
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    RESET = '\033[0m'
    BOLD = '\033[1m'

class RealTraderMonitor:
    def __init__(self):
        self.log_file = 'production_bot.log'  # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –æ—Ç production_multi_exchange_bot.py
        self.log_position = 0
        self.start_time = datetime.now()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
        self.metrics = {
            'opportunities_checked': 0,
            'opportunities_validated': 0,
            'orders_placed': 0,
            'orders_filled': 0,
            'orders_failed': 0,
            'total_volume': 0.0,
            'total_profit': 0.0,
            'fill_rate': 0.0,
            'avg_fill_time': 0.0,
            'last_update': None
        }
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ü–û–†–û–ì–ò –ö–ê–ß–ï–°–¢–í–ê 10/10 –¥–ª—è REAL TRADER MONITOR
        self.quality_thresholds = {
            'MIN_WIN_RATE': 80.0,           # ‚â•80% —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ - –ö–õ–ê–°–° 10/10
            'MIN_PROFIT_FACTOR': 2.5,       # ‚â•2.5 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ - –≠–õ–ò–¢–ù–´–ô
            'MAX_DRAWDOWN': 2.5,            # ‚â§2.5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ - –ü–†–ï–ú–ò–£–ú
            'MIN_MONTHLY_RETURN': 15.0,     # ‚â•15% –º–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å - –¢–û–ü–û–í–´–ô
            'MAX_RISK_PER_TRADE': 1.0,      # ‚â§1.0% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É - –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô
            'MIN_SHARP_RATIO': 2.0,         # ‚â•2.0 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ - –û–¢–õ–ò–ß–ù–´–ô
            'MAX_ORDER_LATENCY': 50,        # ‚â§50–º—Å —Å—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å - –ú–û–õ–ù–ò–ï–ù–û–°–ù–û
            'MIN_FILL_RATE': 99.0,          # ‚â•99% –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ - –ë–ï–ó–£–ü–†–ï–ß–ù–û
            'MIN_OPPORTUNITIES_PER_HOUR': 20, # ‚â•20 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Å - –ê–ö–¢–ò–í–ù–´–ô –ü–û–ò–°–ö
            'MAX_ERROR_RATE': 0.2           # ‚â§0.2% –æ—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã - –ù–ê–î–ï–ñ–ù–û–°–¢–¨ 10/10
        }
        
        # –ë–∞–ª–∞–Ω—Å—ã –±–∏—Ä–∂
        self.balances = {}
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.fill_times = deque(maxlen=100)
        self.profits = deque(maxlen=100)
        self.spreads = deque(maxlen=100)
        
    async def read_logs(self):
        """–ß–∏—Ç–∞–µ—Ç –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        while True:
            try:
                if not os.path.exists(self.log_file):
                    await asyncio.sleep(1)
                    continue
                
                with open(self.log_file, 'r') as f:
                    f.seek(self.log_position)
                    new_lines = f.readlines()
                    self.log_position = f.tell()
                
                for line in new_lines:
                    self.parse_line(line)
                
                await asyncio.sleep(0.5)
                
            except Exception:
                await asyncio.sleep(1)
    
    def parse_line(self, line):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
        try:
            self.metrics['last_update'] = datetime.now()
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏–∑ production_multi_exchange_bot.py
            if 'üíé –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:' in line:
                self.metrics['opportunities_checked'] += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                profit_match = re.search(r'–ü—Ä–∏–±—ã–ª—å: ([0-9.]+)%', line)
                if profit_match:
                    profit = float(profit_match.group(1))
                    self.spreads.append(profit)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            if '‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' in line:
                self.metrics['opportunities_validated'] += 1
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            if 'üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫:' in line:
                trades_match = re.search(r'üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: ([0-9]+)', line)
                if trades_match:
                    self.metrics['orders_placed'] = int(trades_match.group(1))
            
            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            if '‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' in line:
                self.metrics['orders_filled'] += 1
            
            # –ù–µ—É–¥–∞—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            if '‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞' in line:
                self.metrics['orders_failed'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
            if 'üí∞ –ü—Ä–∏–±—ã–ª—å: $' in line:
                profit_match = re.search(r'üí∞ –ü—Ä–∏–±—ã–ª—å: \$([0-9.]+)', line)
                if profit_match:
                    self.metrics['total_profit'] = float(profit_match.group(1))
                    if self.metrics['total_profit'] > 0:
                        self.profits.append(self.metrics['total_profit'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–∞
            if 'üì¶ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: $' in line:
                volume_match = re.search(r'üì¶ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: \$([0-9.]+)', line)
                if volume_match:
                    self.metrics['total_volume'] = float(volume_match.group(1))
            
            # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if 'Opportunity skipped' in line:
                pass  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –Ω–æ –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞
                
        except Exception:
            pass
    
    def calculate_metrics(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        # Fill rate
        if self.metrics['orders_placed'] > 0:
            self.metrics['fill_rate'] = (self.metrics['orders_filled'] / self.metrics['orders_placed']) * 100
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.fill_times:
            self.metrics['avg_fill_time'] = sum(self.fill_times) / len(self.fill_times)
    
    def get_status_color(self, value, good, bad, reverse=False):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
        if reverse:
            if value <= good:
                return Colors.GREEN
            elif value <= bad:
                return Colors.YELLOW
            else:
                return Colors.RED
        else:
            if value >= good:
                return Colors.GREEN
            elif value >= bad:
                return Colors.YELLOW
            else:
                return Colors.RED
    
    def format_uptime(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        uptime = datetime.now() - self.start_time
        hours = int(uptime.total_seconds() // 3600)
        minutes = int((uptime.total_seconds() % 3600) // 60)
        seconds = int(uptime.total_seconds() % 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    async def display_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        while True:
            self.calculate_metrics()
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            print('\033[2J\033[H', end='')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            print(f"{Colors.BOLD}{Colors.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.RESET}")
            print(f"{Colors.BOLD}{Colors.CYAN}‚ïë         REAL-TIME TRADER MONITOR (NO FAKE DATA)         ‚ïë{Colors.RESET}")
            print(f"{Colors.BOLD}{Colors.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}")
            print()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            print(f"{Colors.BOLD}üíº –¢–û–†–ì–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:{Colors.RESET}")
            print(f"‚îú‚îÄ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {Colors.CYAN}{self.format_uptime()}{Colors.RESET}")
            print(f"‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {Colors.CYAN}{self.metrics['opportunities_checked']}{Colors.RESET}")
            print(f"‚îú‚îÄ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: {Colors.GREEN}{self.metrics['opportunities_validated']}{Colors.RESET}")
            
            validation_rate = 0
            if self.metrics['opportunities_checked'] > 0:
                validation_rate = (self.metrics['opportunities_validated'] / self.metrics['opportunities_checked']) * 100
            val_color = self.get_status_color(validation_rate, 50, 30)
            print(f"‚îî‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {val_color}{validation_rate:.1f}%{Colors.RESET}")
            print()
            
            # –û—Ä–¥–µ—Ä–∞
            print(f"{Colors.BOLD}üìã –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–†–î–ï–†–û–í:{Colors.RESET}")
            print(f"‚îú‚îÄ –†–∞–∑–º–µ—â–µ–Ω–æ: {Colors.CYAN}{self.metrics['orders_placed']}{Colors.RESET}")
            print(f"‚îú‚îÄ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {Colors.GREEN}{self.metrics['orders_filled']}{Colors.RESET}")
            print(f"‚îú‚îÄ –ù–µ—É–¥–∞—á–Ω–æ: {Colors.RED}{self.metrics['orders_failed']}{Colors.RESET}")
            
            fill_color = self.get_status_color(self.metrics['fill_rate'], 90, 70)
            print(f"‚îú‚îÄ Fill Rate: {fill_color}{self.metrics['fill_rate']:.1f}%{Colors.RESET}")
            
            time_color = self.get_status_color(self.metrics['avg_fill_time'], 500, 1000, reverse=True)
            print(f"‚îî‚îÄ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {time_color}{self.metrics['avg_fill_time']:.0f}ms{Colors.RESET}")
            print()
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            print(f"{Colors.BOLD}üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:{Colors.RESET}")
            print(f"‚îú‚îÄ –û–±—â–∏–π –æ–±—ä–µ–º: {Colors.CYAN}${self.metrics['total_volume']:.2f}{Colors.RESET}")
            print(f"‚îú‚îÄ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {Colors.GREEN}${self.metrics['total_profit']:.2f}{Colors.RESET}")
            
            if self.metrics['total_volume'] > 0:
                roi = (self.metrics['total_profit'] / self.metrics['total_volume']) * 100
                roi_color = self.get_status_color(roi, 0.5, 0.2)
                print(f"‚îú‚îÄ ROI: {roi_color}{roi:.2f}%{Colors.RESET}")
            
            if self.profits:
                avg_profit = sum(self.profits) / len(self.profits)
                max_profit = max(self.profits)
                print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {Colors.CYAN}${avg_profit:.2f}{Colors.RESET}")
                print(f"‚îî‚îÄ –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {Colors.CYAN}${max_profit:.2f}{Colors.RESET}")
            print()
            
            # –ë–∞–ª–∞–Ω—Å—ã –±–∏—Ä–∂
            if self.balances:
                print(f"{Colors.BOLD}üí≥ –ë–ê–õ–ê–ù–°–´ –ë–ò–†–ñ:{Colors.RESET}")
                total_balance = 0
                for exchange, balance in self.balances.items():
                    total_balance += balance
                    if balance > 100:
                        bal_color = Colors.GREEN
                    elif balance > 50:
                        bal_color = Colors.YELLOW
                    else:
                        bal_color = Colors.RED
                    print(f"‚îú‚îÄ {exchange:8s}: {bal_color}${balance:.2f}{Colors.RESET}")
                print(f"‚îî‚îÄ –í—Å–µ–≥–æ: {Colors.CYAN}${total_balance:.2f}{Colors.RESET}")
                print()
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–µ–¥–æ–≤
            if self.spreads:
                print(f"{Colors.BOLD}üìä –ê–ù–ê–õ–ò–ó –°–ü–†–ï–î–û–í:{Colors.RESET}")
                avg_spread = sum(self.spreads) / len(self.spreads)
                max_spread = max(self.spreads)
                min_spread = min(self.spreads)
                print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π: {Colors.CYAN}{avg_spread:.2f}%{Colors.RESET}")
                print(f"‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {Colors.CYAN}{max_spread:.2f}%{Colors.RESET}")
                print(f"‚îî‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {Colors.CYAN}{min_spread:.2f}%{Colors.RESET}")
                print()
            
            print(f"{Colors.CYAN}{'‚îÄ' * 60}{Colors.RESET}")
            
            # –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if self.metrics['last_update']:
                age = (datetime.now() - self.metrics['last_update']).total_seconds()
                if age < 5:
                    update_color = Colors.GREEN
                elif age < 30:
                    update_color = Colors.YELLOW
                else:
                    update_color = Colors.RED
                print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_color}{age:.1f}s –Ω–∞–∑–∞–¥{Colors.RESET}")
            else:
                print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {Colors.YELLOW}–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...{Colors.RESET}")
            
            await asyncio.sleep(1)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        tasks = [
            asyncio.create_task(self.read_logs()),
            asyncio.create_task(self.display_dashboard())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}–ú–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.RESET}")

async def main():
    monitor = RealTraderMonitor()
    await monitor.run()

if __name__ == "__main__":
    import sys
    sys.stdout.reconfigure(line_buffering=True)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥...")
