#!/usr/bin/env python3
import ccxt
import os
import asyncio

async def test_complete_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Å–µ—Ö 3 –±–∏—Ä–∂"""
    print("üîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò –í–°–ï–• 3 –ë–ò–†–ñ")
    print("=" * 60)
    
    results = {}
    
    # OKX —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
    print("üè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OKX (–Ω–æ–≤—ã–µ –∫–ª—é—á–∏):")
    try:
        okx = ccxt.okx({
            'apiKey': '352206e1-5463-453f-9a52-18cab50ec146',
            'secret': 'D5C10767153C75D5FCA193D249FB1747',
            'password': 'Egor1998!',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'enableRateLimit': True,
        })
        
        markets = okx.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        try:
            balance = okx.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
            results['okx'] = 'full'
        except Exception as be:
            print(f"  ‚ö†Ô∏è –†—ã–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(be)[:80]}")
            results['okx'] = 'partial'
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['okx'] = False
    
    # Bitget
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitget:")
    try:
        bitget = ccxt.bitget({
            'apiKey': 'bg_1d2ce1e1b74f17527e88d0aaff6609a0',
            'secret': '311ad3c3d52e3caa1af61f27049fc0dcefce16ec94192eb7795698fc1f5ef4da',
            'password': '0502794579Egor',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'test': True,
            'enableRateLimit': True,
        })
        
        markets = bitget.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        try:
            balance = bitget.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
            results['bitget'] = 'full'
        except Exception as be:
            print(f"  ‚ö†Ô∏è –†—ã–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(be)[:80]}")
            results['bitget'] = 'partial'
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['bitget'] = False
    
    # Phemex
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Phemex:")
    try:
        phemex = ccxt.phemex({
            'apiKey': '3f9decb6-b6bf-453f-b27e-087ee595812d',
            'secret': 'bohdKr9wmSL_OBtJtP3T9TcJkTADnqCEKvIRC3znTUs5Y2FkYTg2ZS1iNzMxLTQ4NmQtODk0Ni1mZmFhM2JiMWQ5MWI',
            'sandbox': True,  # Testnet —Ä–µ–∂–∏–º
            'enableRateLimit': True,
        })
        
        markets = phemex.load_markets()
        print(f"  ‚úÖ Testnet —Ä—ã–Ω–∫–∏: {len(markets)} –ø–∞—Ä")
        
        try:
            balance = phemex.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            print(f"  ‚úÖ Demo –±–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
            results['phemex'] = 'full'
        except Exception as be:
            print(f"  ‚ö†Ô∏è –†—ã–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(be)[:80]}")
            results['phemex'] = 'partial'
        
    except Exception as e:
        error_str = str(e)[:120]
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
        results['phemex'] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    full_working = sum(1 for r in results.values() if r == 'full')
    partial_working = sum(1 for r in results.values() if r == 'partial')
    total_working = full_working + partial_working
    
    print(f"  ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {full_working}/3")
    print(f"  ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö: {partial_working}/3") 
    print(f"  üéØ –í—Å–µ–≥–æ –≥–æ—Ç–æ–≤—ã—Ö: {total_working}/3")
    
    for exchange, status in results.items():
        if status == 'full':
            emoji = "‚úÖ"
            status_text = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤"
        elif status == 'partial':
            emoji = "‚ö†Ô∏è"
            status_text = "–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤"
        else:
            emoji = "‚ùå"
            status_text = "–ù–µ –≥–æ—Ç–æ–≤"
        print(f"  {emoji} {exchange.upper()}: {status_text}")
    
    if total_working >= 2:
        print(f"\nüéâ –ì–û–¢–û–í–û! {total_working} –±–∏—Ä–∂ –≥–æ—Ç–æ–≤—ã –∫ testnet –∞—Ä–±–∏—Ç—Ä–∞–∂—É!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ä–∂ ({total_working}) –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
        return False

if __name__ == "__main__":
    asyncio.run(test_complete_setup())
