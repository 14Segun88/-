#!/usr/bin/env python3
"""
–¢–µ—Å—Ç REST API Binance —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
"""
import asyncio
import os
import sys
sys.path.append('.')

import config
from exchanges.binance import BinanceExchange

async def test_rest_api():
    """–¢–µ—Å—Ç REST API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("=== –¢–µ—Å—Ç REST API Binance —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    api_config = config.EXCHANGES['binance']['API_CONFIG']
    client = BinanceExchange(api_config)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –±–µ–∑ WebSocket
        print("–°–æ–∑–¥–∞–Ω–∏–µ AsyncClient...")
        from binance import AsyncClient
        
        if config.PROXY_URL:
            print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏: {config.PROXY_URL}")
            os.environ['HTTP_PROXY'] = config.PROXY_URL
            os.environ['HTTPS_PROXY'] = config.PROXY_URL
        
        client.client = await AsyncClient.create(
            api_key=client.api_key,
            api_secret=client.api_secret
        )
        
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
        print("\n--- –¢–µ—Å—Ç 1: Ping —Å–µ—Ä–≤–µ—Ä–∞ ---")
        ping = await client.client.ping()
        print(f"‚úÖ Ping —É—Å–ø–µ—à–µ–Ω: {ping}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("\n--- –¢–µ—Å—Ç 2: –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ ---")
        server_time = await client.client.get_server_time()
        print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
        print("\n--- –¢–µ—Å—Ç 3: –¢–∏–∫–µ—Ä BTC/USDT ---")
        ticker = await client.get_ticker('BTC/USDT')
        print(f"‚úÖ –¢–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω: {ticker}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("\n--- –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ---")
        account = await client.client.get_account()
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç: –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—É—á–µ–Ω—ã ({len(account['balances'])} –≤–∞–ª—é—Ç)")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("REST API Binance —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    finally:
        if client.client:
            await client.client.close_connection()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(test_rest_api())
    sys.exit(0 if success else 1)
