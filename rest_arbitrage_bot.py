#!/usr/bin/env python3
"""
üöÄ REST API ARBITRAGE BOT
–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ REST API
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import aiohttp
import json
import time
import sys
from datetime import datetime
from collections import defaultdict
from typing import Dict, List, Optional, Tuple
import logging

# ============================================
# üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================
CONFIG = {
    # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    'MIN_PROFIT_THRESHOLD': 0.15,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.15% (—Å–Ω–∏–∂–µ–Ω–æ)
    'SLIPPAGE_TOLERANCE': 0.03,    # –î–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ª–∏–ø–ø–µ–¥–∂ 0.03% (—Å–Ω–∏–∂–µ–Ω–æ)
    'POSITION_SIZE_USD': 100,      # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $100
    'SCAN_INTERVAL': 1,             # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 1 —Å–µ–∫ (—É—Å–∫–æ—Ä–µ–Ω–æ)
    
    # –ë–∏—Ä–∂–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏ (–±–µ–∑ —Å–∫–∏–¥–æ–∫)
    'EXCHANGES': {
        'mexc': {
            'enabled': True,
            'fees': 0.20,  # 0.20% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'api_url': 'https://api.mexc.com',
        },
        'huobi': {
            'enabled': True,
            'fees': 0.20,  # 0.20% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è  
            'api_url': 'https://api.huobi.pro',
        },
        'binance': {
            'enabled': True,
            'fees': 0.10,  # 0.10% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'api_url': 'https://api.binance.com',
        },
        'okx': {
            'enabled': True,
            'fees': 0.15,  # 0.15% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'api_url': 'https://www.okx.com',
        },
        'kucoin': {
            'enabled': True,
            'fees': 0.10,  # 0.10% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            'api_url': 'https://api.kucoin.com',
        },
        'bybit': {
            'enabled': False,  # –û—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 403
            'fees': 0.08,
            'api_url': 'https://api.bybit.com',
            'proxy': 'http://172.31.128.1:2080'  # –ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        }
    },
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã)
    'TRADING_PAIRS': [
        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT',
        'XRP/USDT', 'DOGE/USDT', 'ADA/USDT', 'MATIC/USDT',
        'AVAX/USDT', 'DOT/USDT', 'LINK/USDT', 'UNI/USDT',
        'SHIB/USDT', 'LTC/USDT', 'TRX/USDT', 'ATOM/USDT',
        'APT/USDT', 'ARB/USDT', 'OP/USDT', 'INJ/USDT',
        'PEPE/USDT', 'WIF/USDT', 'BONK/USDT', 'FLOKI/USDT'
    ],
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    'MODE': 'demo',  # 'demo', 'paper', 'real'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger('RESTBot')

class PriceData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–µ–Ω—ã"""
    def __init__(self, exchange: str, symbol: str, bid: float, ask: float, timestamp: float):
        self.exchange = exchange
        self.symbol = symbol
        self.bid = bid
        self.ask = ask
        self.spread = (ask - bid) / bid * 100
        self.timestamp = timestamp
        self.age = time.time() - timestamp

class ArbitrageOpportunity:
    """–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
    def __init__(self, symbol: str, buy_exchange: str, sell_exchange: str,
                 buy_price: float, sell_price: float):
        self.symbol = symbol
        self.buy_exchange = buy_exchange
        self.sell_exchange = sell_exchange
        self.buy_price = buy_price
        self.sell_price = sell_price
        self.spread_pct = (sell_price - buy_price) / buy_price * 100
        
        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
        buy_fee = CONFIG['EXCHANGES'][buy_exchange]['fees']
        sell_fee = CONFIG['EXCHANGES'][sell_exchange]['fees']
        self.total_fees = buy_fee + sell_fee
        
        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
        self.net_profit = self.spread_pct - self.total_fees - CONFIG['SLIPPAGE_TOLERANCE']
        self.is_profitable = self.net_profit >= CONFIG['MIN_PROFIT_THRESHOLD']
        
        self.timestamp = time.time()

class RESTArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ REST API"""
    
    def __init__(self):
        self.prices = defaultdict(dict)  # {symbol: {exchange: PriceData}}
        self.opportunities = []
        self.executed_trades = []
        self.running = False
        self.session = None
        self.statistics = {
            'scans': 0,
            'opportunities_found': 0,
            'profitable_opportunities': 0,
            'trades_executed': 0,
            'total_profit_pct': 0,
            'errors': 0
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö REST API ARBITRAGE BOT")
        logger.info("=" * 60)
        logger.info(f"–†–µ–∂–∏–º: {CONFIG['MODE'].upper()}")
        logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {CONFIG['MIN_PROFIT_THRESHOLD']}%")
        logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${CONFIG['POSITION_SIZE_USD']}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏
        active_exchanges = [ex for ex, conf in CONFIG['EXCHANGES'].items() if conf['enabled']]
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏: {', '.join(active_exchanges)}")
        logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {len(CONFIG['TRADING_PAIRS'])}")
        
        self.session = aiohttp.ClientSession()
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await asyncio.gather(
                self._price_fetcher_loop(),
                self._arbitrage_scanner_loop(),
                self._statistics_loop(),
                self._signal_handler()
            )
        except KeyboardInterrupt:
            logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        if self.session:
            await self.session.close()
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 60)
        self._print_statistics()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _price_fetcher_loop(self):
        """–¶–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
                tasks = []
                for exchange, config in CONFIG['EXCHANGES'].items():
                    if config['enabled']:
                        tasks.append(self._fetch_prices(exchange))
                
                results = await asyncio.gather(*tasks, return_exceptions=True)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for result in results:
                    if isinstance(result, Exception):
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {result}")
                        self.statistics['errors'] += 1
                
                await asyncio.sleep(CONFIG['SCAN_INTERVAL'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ price_fetcher: {e}")
                await asyncio.sleep(5)
    
    async def _fetch_prices(self, exchange: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å –±–∏—Ä–∂–∏"""
        try:
            if exchange == 'mexc':
                return await self._fetch_mexc_prices()
            elif exchange == 'huobi':
                return await self._fetch_huobi_prices()
            elif exchange == 'binance':
                return await self._fetch_binance_prices()
            elif exchange == 'okx':
                return await self._fetch_okx_prices()
            elif exchange == 'kucoin':
                return await self._fetch_kucoin_prices()
            elif exchange == 'bybit':
                return await self._fetch_bybit_prices()
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ {exchange}: {e}")
            raise
    
    async def _fetch_mexc_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å MEXC"""
        url = f"{CONFIG['EXCHANGES']['mexc']['api_url']}/api/v3/ticker/bookTicker"
        
        async with self.session.get(url, timeout=5) as resp:
            if resp.status == 200:
                data = await resp.json()
                timestamp = time.time()
                
                for item in data:
                    symbol = item['symbol']
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                    if symbol.endswith('USDT'):
                        pair = symbol[:-4] + '/USDT'
                        if pair in CONFIG['TRADING_PAIRS']:
                            self.prices[pair]['mexc'] = PriceData(
                                'mexc', pair,
                                float(item['bidPrice']),
                                float(item['askPrice']),
                                timestamp
                            )
                
                return {'status': 'ok', 'exchange': 'mexc'}
    
    async def _fetch_huobi_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å Huobi"""
        url = f"{CONFIG['EXCHANGES']['huobi']['api_url']}/market/tickers"
        
        async with self.session.get(url, timeout=5) as resp:
            if resp.status == 200:
                data = await resp.json()
                timestamp = time.time()
                
                if data.get('status') == 'ok':
                    for item in data.get('data', []):
                        symbol = item['symbol'].upper()
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
                        if symbol.endswith('USDT'):
                            pair = symbol[:-4] + '/USDT'
                            if pair in CONFIG['TRADING_PAIRS']:
                                self.prices[pair]['huobi'] = PriceData(
                                    'huobi', pair,
                                    float(item['bid']),
                                    float(item['ask']),
                                    timestamp
                                )
                
                return {'status': 'ok', 'exchange': 'huobi'}
    
    async def _fetch_binance_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å Binance"""
        url = f"{CONFIG['EXCHANGES']['binance']['api_url']}/api/v3/ticker/bookTicker"
        
        async with self.session.get(url, timeout=5) as resp:
            if resp.status == 200:
                data = await resp.json()
                timestamp = time.time()
                
                for item in data:
                    symbol = item['symbol']
                    if symbol.endswith('USDT'):
                        pair = symbol[:-4] + '/USDT'
                        if pair in CONFIG['TRADING_PAIRS']:
                            self.prices[pair]['binance'] = PriceData(
                                'binance', pair,
                                float(item['bidPrice']),
                                float(item['askPrice']),
                                timestamp
                            )
                
                return {'status': 'ok', 'exchange': 'binance'}
    
    async def _fetch_okx_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å OKX"""
        url = f"{CONFIG['EXCHANGES']['okx']['api_url']}/api/v5/market/tickers?instType=SPOT"
        
        async with self.session.get(url, timeout=5) as resp:
            if resp.status == 200:
                data = await resp.json()
                timestamp = time.time()
                
                if data.get('code') == '0':
                    for item in data.get('data', []):
                        inst_id = item['instId']
                        if inst_id.endswith('-USDT'):
                            pair = inst_id.replace('-', '/') 
                            if pair in CONFIG['TRADING_PAIRS']:
                                self.prices[pair]['okx'] = PriceData(
                                    'okx', pair,
                                    float(item['bidPx']),
                                    float(item['askPx']),
                                    timestamp
                                )
                
                return {'status': 'ok', 'exchange': 'okx'}
    
    async def _fetch_kucoin_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å KuCoin"""
        url = f"{CONFIG['EXCHANGES']['kucoin']['api_url']}/api/v1/market/allTickers"
        
        async with self.session.get(url, timeout=5) as resp:
            if resp.status == 200:
                data = await resp.json()
                timestamp = time.time()
                
                if data.get('code') == '200000':
                    for item in data.get('data', {}).get('ticker', []):
                        symbol = item['symbol']
                        if symbol.endswith('-USDT'):
                            pair = symbol.replace('-', '/')
                            if pair in CONFIG['TRADING_PAIRS']:
                                self.prices[pair]['kucoin'] = PriceData(
                                    'kucoin', pair,
                                    float(item.get('buy', 0)),
                                    float(item.get('sell', 0)),
                                    timestamp
                                )
                
                return {'status': 'ok', 'exchange': 'kucoin'}
    
    async def _fetch_bybit_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Å Bybit (—Å –ø—Ä–æ–∫—Å–∏)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –ø—Ä–æ–∫—Å–∏
        return {'status': 'disabled', 'exchange': 'bybit'}
    
    async def _arbitrage_scanner_loop(self):
        """–¶–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
        
        while self.running:
            try:
                self.statistics['scans'] += 1
                opportunities_found = 0
                
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
                for symbol in CONFIG['TRADING_PAIRS']:
                    if symbol not in self.prices:
                        continue
                    
                    exchanges_with_price = list(self.prices[symbol].keys())
                    if len(exchanges_with_price) < 2:
                        continue
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
                    best_bid = None
                    best_ask = None
                    
                    for exchange in exchanges_with_price:
                        price_data = self.prices[symbol][exchange]
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫)
                        if price_data.age > 10:
                            continue
                        
                        if best_bid is None or price_data.bid > best_bid[1]:
                            best_bid = (exchange, price_data.bid)
                        
                        if best_ask is None or price_data.ask < best_ask[1]:
                            best_ask = (exchange, price_data.ask)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂
                    if best_bid and best_ask and best_bid[0] != best_ask[0]:
                        opportunity = ArbitrageOpportunity(
                            symbol,
                            best_ask[0],  # –ü–æ–∫—É–ø–∞–µ–º –ø–æ ask
                            best_bid[0],  # –ü—Ä–æ–¥–∞–µ–º –ø–æ bid
                            best_ask[1],
                            best_bid[1]
                        )
                        
                        if opportunity.spread_pct > 0:
                            opportunities_found += 1
                            self.statistics['opportunities_found'] += 1
                            
                            if opportunity.is_profitable:
                                self.statistics['profitable_opportunities'] += 1
                                await self._execute_arbitrage(opportunity)
                                
                                logger.info(f"üí∞ –ü–†–ò–ë–´–õ–¨–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨:")
                                logger.info(f"  {symbol}: {opportunity.buy_exchange} ‚Üí {opportunity.sell_exchange}")
                                logger.info(f"  –°–ø—Ä–µ–¥: {opportunity.spread_pct:.3f}%")
                                logger.info(f"  –ö–æ–º–∏—Å—Å–∏–∏: {opportunity.total_fees:.2f}%")
                                logger.info(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity.net_profit:.3f}%")
                
                await asyncio.sleep(CONFIG['SCAN_INTERVAL'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ scanner: {e}")
                await asyncio.sleep(5)
    
    async def _execute_arbitrage(self, opportunity: ArbitrageOpportunity):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if CONFIG['MODE'] == 'demo':
            # –í demo —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.statistics['trades_executed'] += 1
            self.statistics['total_profit_pct'] += opportunity.net_profit
            self.executed_trades.append({
                'timestamp': datetime.now().isoformat(),
                'symbol': opportunity.symbol,
                'route': f"{opportunity.buy_exchange}‚Üí{opportunity.sell_exchange}",
                'spread': opportunity.spread_pct,
                'net_profit': opportunity.net_profit,
                'size': CONFIG['POSITION_SIZE_USD']
            })
            
            logger.info(f"‚úÖ DEMO —Å–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: +{opportunity.net_profit:.3f}%")
        
        elif CONFIG['MODE'] == 'paper':
            # Paper trading - —Å–∏–º—É–ª—è—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            await asyncio.sleep(0.5)
            self.statistics['trades_executed'] += 1
            self.statistics['total_profit_pct'] += opportunity.net_profit
            logger.info(f"üìù PAPER —Å–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: +{opportunity.net_profit:.3f}%")
        
        elif CONFIG['MODE'] == 'real':
            # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è - TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            logger.warning("‚ö†Ô∏è –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    async def _statistics_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self._print_statistics()
    
    def _print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"  –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.statistics['scans']}")
        logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.statistics['opportunities_found']}")
        logger.info(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.statistics['profitable_opportunities']}")
        logger.info(f"  –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.statistics['trades_executed']}")
        
        if self.statistics['trades_executed'] > 0:
            avg_profit = self.statistics['total_profit_pct'] / self.statistics['trades_executed']
            total_profit_usd = CONFIG['POSITION_SIZE_USD'] * self.statistics['total_profit_pct'] / 100
            logger.info(f"  –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.3f}%")
            logger.info(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit_usd:.2f}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã
        active_prices = sum(1 for symbol_prices in self.prices.values() 
                          for price in symbol_prices.values() 
                          if price.age < 10)
        logger.info(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: {active_prices}")
        logger.info(f"  –û—à–∏–±–æ–∫: {self.statistics['errors']}")
    
    async def _signal_handler(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            while self.running:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = RESTArbitrageBot()
    await bot.start()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
