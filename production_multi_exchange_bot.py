#!/usr/bin/env python3
"""
üöÄ PRODUCTION MULTI-EXCHANGE ARBITRAGE BOT
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è 7 –±–∏—Ä–∂
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
import signal
import sys
import time
import json
import os
import time
from pathlib import Path
from datetime import datetime
from order_book_analyzer import OrderBookAnalyzer, LiquidityAnalysis
from triangular_arbitrage import TriangularArbitrageScanner, TriangularExecutor, TriangularOpportunity
from typing import Dict, List, Optional, Set
from collections import defaultdict
import aiohttp
from colorama import init as colorama_init, Fore, Style
from tabulate import tabulate

from production_config import (
    EXCHANGES_CONFIG, API_KEYS, TRADING_CONFIG, 
    WEBSOCKET_CONFIG, DYNAMIC_PAIRS_CONFIG,
    RISK_MANAGEMENT, LOGGING_CONFIG
)
from websocket_manager import WebSocketManager, OrderBook
from trading_engine import TradingEngine, ArbitrageOpportunity
from exchange_connector import ExchangeConnector
from symbol_utils import normalize_symbol, is_normalized

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=LOGGING_CONFIG['level'],
    format=LOGGING_CONFIG['format'],
    handlers=[
        logging.FileHandler(LOGGING_CONFIG['file']),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('ProductionBot')
colorama_init(autoreset=True)

class ProductionArbitrageBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.ws_manager = None
        self.trading_engine = TradingEngine()
        self.exchange_connector = ExchangeConnector(mode=TRADING_CONFIG['mode'])
        self.orderbooks = defaultdict(dict)  # {symbol: {exchange: OrderBook}}
        self.active_pairs = set()
        self.running = False
        self.last_pair_update = 0
        self.opportunity_cooldowns = {}  # {opportunity_key: timestamp} –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        self.scan_counter = 0  # –°—á–µ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        # –û—á–µ—Ä–µ–¥–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        self.opportunity_queue = asyncio.Queue()
        self.balances = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
        self.enabled_exchanges = [exchange_id for exchange_id, config in EXCHANGES_CONFIG.items() 
                                 if config.get('enabled', False)]
        
        # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        self.orderbook_analyzer = OrderBookAnalyzer()
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–∑ TRADING_CONFIG (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ paper-–Ω–∞—Å—Ç—Ä–æ–µ–∫)
        try:
            self.orderbook_analyzer.min_liquidity_usd = TRADING_CONFIG.get('min_liquidity_usd', TRADING_CONFIG.get('position_size_usd', 100))
            self.orderbook_analyzer.max_price_impact = TRADING_CONFIG.get('max_price_impact_pct', 2.0)
            self.orderbook_analyzer.min_depth_levels = TRADING_CONFIG.get('min_depth_levels', 1)
        except Exception:
            pass
        self.triangular_scanner = TriangularArbitrageScanner()
        self.triangular_executor = TriangularExecutor(self.trading_engine) 
        
        self.statistics = {
            'start_time': time.time(),
            'scans': 0,
            'opportunities_found': 0,
            'trades_executed': 0,
            'ws_messages': 0,
            'errors': 0,
            'candidates_detected': 0
        }
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        # –ü–æ –±–∏—Ä–∂–µ: —Å—á–∏—Ç–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Å–¥–µ–ª–∫–∏, —É—Å–ø–µ—Ö–∏/–ø—Ä–æ–≤–∞–ª—ã, —Å—É–º–º—É –ø—Ä–∏–±—ã–ª–∏ –∏ –æ–±—ä–µ–º–∞, —Å—É–º–º—É –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–∏–±—ã–ª–∏
        self.stats_by_exchange = defaultdict(lambda: {
            'opportunities': 0,
            'trades': 0,
            'successful': 0,
            'failed': 0,
            'profit_usd': 0.0,
            'profit_pct_sum': 0.0,
            'volume_usd': 0.0
        })
        # –ü–æ —Å–≤—è–∑–∫–µ (symbol + buy->sell)
        self.stats_by_pair = defaultdict(lambda: {
            'opportunities': 0,
            'trades': 0,
            'successful': 0,
            'failed': 0,
            'profit_usd': 0.0,
            'profit_pct_sum': 0.0,
            'volume_usd': 0.0
        })
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö PRODUCTION ARBITRAGE BOT v1.0.0")
        logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üíº –†–µ–∂–∏–º: {TRADING_CONFIG['mode'].upper()}")
        logger.info(f"üí∞ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: {TRADING_CONFIG['min_profit_threshold']}%")
        logger.info("=" * 60)
        logger.info(
            f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {'WebSocket' if TRADING_CONFIG.get('use_websocket', True) else 'REST polling only'}"
        )
        
        self.running = True
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫, —á—Ç–æ–±—ã CCXT —Ä—ã–Ω–∫–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            await self.trading_engine.start()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExchangeConnector –¥–ª—è REST –¥–∞–Ω–Ω—ã—Ö (–æ—Å–æ–±–µ–Ω–Ω–æ Bitget)
            await self.exchange_connector.initialize()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–∂–∫–∞ (discover_pairs –ø—Ä–∏–º–µ–Ω–∏—Ç CCXT-—Ñ–∏–ª—å—Ç—Ä)
            await self._initialize()
            # –ö—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä
            try:
                self._print_start_banner()
            except Exception:
                pass
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            tasks = [
                self._run_websocket_manager(),
                self._run_rest_polling(),  # REST polling –¥–ª—è Bitget –∏ –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂ –±–µ–∑ WS
                self._scan_opportunities(),
                self._run_executor(),
                self._run_pair_updater(),
                self._run_statistics()
            ]
            
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.ws_manager:
            await self.ws_manager.stop()
        
        await self.trading_engine.stop()
        await self.exchange_connector.close()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_final_statistics()
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _run_rest_polling(self):
        """REST polling –¥–ª—è –±–∏—Ä–∂ –±–µ–∑ WebSocket (–æ—Å–æ–±–µ–Ω–Ω–æ Bitget)"""
        logger.info("üì° –ó–∞–ø—É—Å–∫ REST polling –¥–ª—è Bitget –∏ –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂...")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ orderbook –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ REST
                for symbol in list(self.active_pairs):
                    for exchange_id in ['bitget', 'phemex']:  # ‚úÖ –í–∫–ª—é—á–∞–µ–º –∏ Phemex
                        if exchange_id not in self.enabled_exchanges:
                            continue
                        
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º orderbook —á–µ—Ä–µ–∑ ExchangeConnector
                            orderbook_data = await self.exchange_connector.fetch_orderbook(exchange_id, symbol)
                            
                            if orderbook_data and orderbook_data.get('bids') and orderbook_data.get('asks'):
                                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç OrderBook
                                orderbook = OrderBook(
                                    symbol=symbol,
                                    exchange=exchange_id,
                                    bids=orderbook_data['bids'][:10],  # –¢–æ–ø 10 —É—Ä–æ–≤–Ω–µ–π
                                    asks=orderbook_data['asks'][:10],
                                    timestamp=time.time()
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                                self.orderbooks[symbol][exchange_id] = orderbook
                                logger.debug(f"‚úÖ {exchange_id} {symbol}: bid={orderbook.bids[0][0]:.6f}, ask={orderbook.asks[0][0]:.6f}")
                                
                        except Exception as e:
                            logger.warning(f"REST polling –æ—à–∏–±–∫–∞ {exchange_id} {symbol}: {e}")
                            continue
                
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª polling - –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"REST polling –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)
    
    async def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        await self.discover_pairs()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.ws_manager = WebSocketManager(
            on_orderbook_update=self._on_orderbook_update
        )
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(self.active_pairs)}")
    
    def _print_start_banner(self):
        """–¶–≤–µ—Ç–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–Ω–Ω–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ –±–∏—Ä–∂–∞–º–∏."""
        try:
            mode = TRADING_CONFIG.get('mode', 'demo').upper()
            ws_source = 'WebSocket' if TRADING_CONFIG.get('use_websocket', True) else 'REST only'
            header = f"üöÄ PRODUCTION ARBITRAGE BOT v1.0.0 | {mode} | Data: {ws_source}"
            print("\n" + Fore.CYAN + "‚ïê" * 80)
            print(Fore.CYAN + header)
            print(Fore.CYAN + "‚ïê" * 80)

            # –ë–∏—Ä–∂–∏
            ex_rows = []
            for ex_id in self.enabled_exchanges:
                cfg = EXCHANGES_CONFIG.get(ex_id, {})
                ex_rows.append([
                    ex_id,
                    cfg.get('name', ex_id.upper()),
                    'ON' if cfg.get('websocket', False) else 'OFF',
                    'ON' if cfg.get('poll_rest', False) else 'OFF',
                    f"{cfg.get('fee', 0.0) * 100:.2f}%"
                ])
            if ex_rows:
                print(Fore.YELLOW + "–ë–∏—Ä–∂–∏ (–≤–∫–ª—é—á–µ–Ω—ã):")
                print(tabulate(ex_rows, headers=['ID', '–ë–∏—Ä–∂–∞', 'WS', 'REST', '–ö–æ–º–∏—Å—Å–∏—è'], tablefmt='github'))

            # –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
            conf_rows = [
                ['Min Profit %', TRADING_CONFIG.get('min_profit_threshold')],
                ['Scan Interval (s)', TRADING_CONFIG.get('scan_interval')],
                ['Slippage %', TRADING_CONFIG.get('slippage_tolerance', 0.0)],
                ['Pair Cooldown (s)', TRADING_CONFIG.get('pair_cooldown_seconds')],
                ['Position Size $', TRADING_CONFIG.get('position_size_usd')],
                ['Inter-Exchange', TRADING_CONFIG.get('enable_inter_exchange', True)],
                ['Triangular', TRADING_CONFIG.get('enable_triangular', False)],
                ['Exhaustive Scan', TRADING_CONFIG.get('enable_exhaustive_pair_scanning', False)]
            ]
            print(Fore.YELLOW + "–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(tabulate(conf_rows, headers=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'], tablefmt='github'))

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã discovery
            dp = DYNAMIC_PAIRS_CONFIG
            disc_rows = [
                ['Enabled', dp.get('enabled', True)],
                ['Min Exchanges', dp.get('min_exchanges')],
                ['Max Pairs', dp.get('max_pairs')],
                ['Per-Exchange Limit', dp.get('per_exchange_discovery_limit')],
                ['Priority Pairs', len(dp.get('priority_pairs', []))]
            ]
            print(Fore.YELLOW + "Discovery –ø–∞—Ä:")
            print(tabulate(disc_rows, headers=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ'], tablefmt='github'))
            print(Fore.CYAN + "‚ïê" * 80 + "\n")
        except Exception as e:
            logger.debug(f"_print_start_banner error: {e}")
    
    async def discover_pairs(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        logger.info("üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        
        all_pairs = defaultdict(set)  # {symbol: set(exchanges)}
        
        for exchange_id, config in EXCHANGES_CONFIG.items():
            if not config['enabled']:
                continue
                
            try:
                pairs = await self._fetch_exchange_pairs(exchange_id)
                for pair in pairs:
                    all_pairs[pair].add(exchange_id)
                    
                logger.info(f"‚úÖ {config['name']}: {len(pairs)} –ø–∞—Ä")
                if len(pairs) == 0:
                    logger.warning(f"‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê {exchange_id}: –ø–æ–ª—É—á–µ–Ω–æ 0 –ø–∞—Ä –∏–∑ API")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä {config['name']}: {e}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä: –≤ DEMO/TESTNET —Ä–µ–∂–∏–º–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 2 –∏–∑ 3 –±–∏—Ä–∂ (OKX, Bitget, Phemex)
        enabled_set = set(self.enabled_exchanges)
        demo_mode = TRADING_CONFIG.get('mode', 'demo') in ['demo', 'testnet']  # ‚úÖ –í–∫–ª—é—á–∞–µ–º testnet
        real_mode = TRADING_CONFIG.get('mode') == 'real'
        self.active_pairs = set()
        priority_pairs = DYNAMIC_PAIRS_CONFIG['priority_pairs']

        used_intersection = False
        # –†–µ–∂–∏–º —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä (CLI --only-pairs)
        only_pairs_mode = TRADING_CONFIG.get('only_pairs', False)
        if only_pairs_mode:
            desired = set(priority_pairs)
            for pair in desired:
                exs = all_pairs.get(pair, set())
                if exs & enabled_set:
                    self.active_pairs.add(pair)
            logger.info(f"üéØ Only-pairs mode: –≤—ã–±—Ä–∞–Ω–æ {len(self.active_pairs)} –∏–∑ {len(desired)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä")
            if not self.active_pairs:
                logger.warning("‚ö†Ô∏è Only-pairs: –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö")
            used_intersection = True
            logger.info("üîí Only-pairs strict: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä (–¥–µ–º–æ-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è 2-–∏–∑-3)")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–±—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 3-–∏–∑-3 (OKX, Bitget, Phemex)
        if real_mode and not only_pairs_mode:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 2-–∏–∑-2 –¥–ª—è OKX & Bitget
            duo = {'okx', 'bitget'} & enabled_set
            if len(duo) == 2:
                two_of_two_duo = {s for s, exs in all_pairs.items() if duo.issubset(exs)}
                if two_of_two_duo:
                    # 1) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã
                    for pair in priority_pairs:
                        if pair in two_of_two_duo:
                            self.active_pairs.add(pair)
                            if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                break
                    # 2) –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã OKX&Bitget
                    if len(self.active_pairs) < DYNAMIC_PAIRS_CONFIG['max_pairs']:
                        for pair in sorted(two_of_two_duo):
                            if pair not in self.active_pairs:
                                self.active_pairs.add(pair)
                                if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                    break
                    logger.info(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 2-–∏–∑-2 (OKX, Bitget): {len(self.active_pairs)} –ø–∞—Ä")
                    used_intersection = True
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º 2-–∏–∑-2 –¥–ª—è (OKX, Bitget)")
            else:
                # –§–æ–ª–±–µ–∫: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ —Ç—Ä–∏ ‚Äî –¥–æ–ø—É—Å–∫–∞–µ–º 3-–∏–∑-3
                trio = {'okx', 'bitget', 'phemex'} & enabled_set
                if len(trio) == 3:
                    three_of_three = {s for s, exs in all_pairs.items() if trio.issubset(exs)}
                    if three_of_three:
                        for pair in priority_pairs:
                            if pair in three_of_three:
                                self.active_pairs.add(pair)
                                if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                    break
                        if len(self.active_pairs) < DYNAMIC_PAIRS_CONFIG['max_pairs']:
                            for pair in sorted(three_of_three):
                                if pair not in self.active_pairs:
                                    self.active_pairs.add(pair)
                                    if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                        break
                        logger.info(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 3-–∏–∑-3 (OKX, Bitget, Phemex): {len(self.active_pairs)} –ø–∞—Ä")
                        used_intersection = True
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º 3-–∏–∑-3 –¥–ª—è (OKX, Bitget, Phemex)")
                else:
                    logger.warning(f"‚ö†Ô∏è –î–ª—è —Ä–µ–∂–∏–º–∞ real –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å okx –∏ bitget; —Ç–µ–∫—É—â–∏–µ –≤–∫–ª—é—á–µ–Ω—ã: {sorted(list(enabled_set))}")
        if demo_mode and not only_pairs_mode:  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è testnet
            trio = {'okx', 'bitget', 'phemex'} & enabled_set
            if len(trio) >= 2:
                # –ü–∞—Ä—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∏–Ω–∏–º—É–º –Ω–∞ 2 –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ –∏–∑ –Ω–∞–±–æ—Ä–∞ (OKX, Bitget, Phemex)
                two_of_three = {s for s, exs in all_pairs.items() if len(exs & trio) >= 2}
                if two_of_three:
                    # 1) –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞—Ä
                    for pair in priority_pairs:
                        if pair in two_of_three:
                            self.active_pairs.add(pair)
                            if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                break
                    # 2) –î–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ 2-–∏–∑-3
                    if len(self.active_pairs) < DYNAMIC_PAIRS_CONFIG['max_pairs']:
                        for pair in sorted(two_of_three):
                            if pair not in self.active_pairs:
                                self.active_pairs.add(pair)
                                if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                                    break
                    logger.info(f"üéØ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 2-–∏–∑-3 (OKX, Bitget, Phemex): {len(self.active_pairs)} –ø–∞—Ä")
                    used_intersection = True

        if not used_intersection and not real_mode:
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞ 2 –±–∏—Ä–∂–∞—Ö
            for pair in priority_pairs:
                if pair in all_pairs and len(all_pairs[pair]) >= DYNAMIC_PAIRS_CONFIG['min_exchanges']:
                    self.active_pairs.add(pair)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å –º–∏–Ω–∏–º—É–º 2 –±–∏—Ä–∂–∞–º–∏
            for symbol, exchanges in all_pairs.items():
                if len(self.active_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                    break
                if symbol not in self.active_pairs and len(exchanges) >= DYNAMIC_PAIRS_CONFIG['min_exchanges']:
                    self.active_pairs.add(symbol)

        # –ï—Å–ª–∏ –ø–∞—Ä –º–∞–ª–æ, —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–Ω–æ –ù–ï –≤ —Ä–µ–∂–∏–º–µ only-pairs)
        if len(self.active_pairs) < 10 and demo_mode and not only_pairs_mode and {'okx', 'bitget'}.issubset(enabled_set):
            # –ñ–µ—Å—Ç–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
            for pair in ['BTC/USDT', 'ETH/USDT']:
                if pair in all_pairs and 'okx' in all_pairs[pair] and 'bitget' in all_pairs[pair]:
                    self.active_pairs.add(pair)
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è real: OKX & Bitget
        if len(self.active_pairs) < 10 and real_mode and not only_pairs_mode and {'okx', 'bitget'}.issubset(enabled_set):
            top_pairs = [
                'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT', 'DOGE/USDT',
                'PEPE/USDT', 'OP/USDT', 'ARB/USDT', 'TON/USDT', 'LINK/USDT',
                'BCH/USDT', 'LTC/USDT', 'ADA/USDT', 'MATIC/USDT'
            ]
            for pair in top_pairs:
                if pair in all_pairs and 'okx' in all_pairs[pair] and 'bitget' in all_pairs[pair]:
                    self.active_pairs.add(pair)
        elif only_pairs_mode:
            logger.info("üîí Only-pairs strict: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –∑–∞—â–∏—Ç–µ")

        if len(self.active_pairs) < 30 and not used_intersection and not only_pairs_mode:
            logger.info(f"‚ö†Ô∏è –ú–∞–ª–æ –ø–∞—Ä —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º. –î–æ–±–∞–≤–ª—è—é —Ç–æ–ø–æ–≤—ã–µ –ø–∞—Ä—ã...")
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 50 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            for pair in priority_pairs[:50]:
                if pair in all_pairs:
                    self.active_pairs.add(pair)
        elif only_pairs_mode and not used_intersection:
            logger.info("üîí Only-pairs strict: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–æ–≤—ã—Ö –ø–∞—Ä")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã —Ç–µ–º–∏,
        # –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ ccxt markets –Ω–∞ —Ç—Ä–µ–±—É–µ–º–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏.
        try:
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ markets –Ω–∞ OKX&Bitget (2-–∏–∑-2) —Å —Ñ–æ–ª–±–µ–∫–æ–º
            if real_mode and not only_pairs_mode:
                duo_set = {'okx', 'bitget'} & enabled_set
                if len(duo_set) >= 2:
                    # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ ccxt –¥–ª—è OKX –∏ Bitget
                    ccxt_symbols_by_ex = {}
                    for ex in sorted(duo_set):
                        info = self.trading_engine.exchange_clients.get(ex, {}) if hasattr(self, 'trading_engine') else {}
                        ccxt_client = info.get('ccxt') if isinstance(info, dict) else None
                        if ccxt_client:
                            try:
                                syms = set(getattr(ccxt_client, 'symbols', []) or list((getattr(ccxt_client, 'markets', {}) or {}).keys()))
                            except Exception:
                                syms = set()
                            ccxt_symbols_by_ex[ex] = syms
                    loaded_sets = {ex for ex, syms in ccxt_symbols_by_ex.items() if syms}
                    loaded_count = len(loaded_sets)
                    if loaded_count >= 2:
                        def ccxt_presence_both(sym: str) -> bool:
                            return all(sym in syms for ex, syms in ccxt_symbols_by_ex.items())
                        before_cnt = len(self.active_pairs)
                        self.active_pairs = {s for s in self.active_pairs if ccxt_presence_both(s)}
                        logger.info(f"üéØ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ CCXT markets (real, OKX&Bitget 2-–∏–∑-2): {before_cnt} -> {len(self.active_pairs)} –ø–∞—Ä")
                    elif loaded_count == 1:
                        def ccxt_presence_loaded(sym: str) -> bool:
                            return any(sym in syms for ex, syms in ccxt_symbols_by_ex.items())
                        before_cnt = len(self.active_pairs)
                        self.active_pairs = {s for s in self.active_pairs if ccxt_presence_loaded(s)}
                        logger.info(f"üéØ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ CCXT markets (real, >=1 –∏–∑ {sorted(list(loaded_sets))}): {before_cnt} -> {len(self.active_pairs)} –ø–∞—Ä")
                    else:
                        logger.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ CCXT: –Ω–∏ —É OKX/Bitget –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã markets (real)")
                else:
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ CCXT: OKX –∏ Bitget –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –Ω–µ –æ–±–∞ –≤–∫–ª—é—á–µ–Ω—ã")
            elif demo_mode and not only_pairs_mode:
                demo_set = enabled_set & set(TRADING_CONFIG.get('demo_supported_exchanges', []))
                # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ ccxt –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                ccxt_symbols_by_ex = {}
                for ex in sorted(demo_set):
                    info = self.trading_engine.exchange_clients.get(ex, {}) if hasattr(self, 'trading_engine') else {}
                    ccxt_client = info.get('ccxt') if isinstance(info, dict) else None
                    if ccxt_client:
                        try:
                            syms = set(getattr(ccxt_client, 'symbols', []) or list((getattr(ccxt_client, 'markets', {}) or {}).keys()))
                        except Exception:
                            syms = set()
                        ccxt_symbols_by_ex[ex] = syms
                # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–∏—Ä–∂–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö markets –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–Ω–µ –ø—É—Å—Ç—ã–µ)
                loaded_sets = {ex for ex, syms in ccxt_symbols_by_ex.items() if syms}
                loaded_count = len(loaded_sets)
                if loaded_count >= 2:
                    def ccxt_presence_count(sym: str) -> int:
                        return sum(1 for syms in ccxt_symbols_by_ex.values() if sym in syms)
                    before_cnt = len(self.active_pairs)
                    self.active_pairs = {s for s in self.active_pairs if ccxt_presence_count(s) >= 2}
                    logger.info(f"üéØ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ CCXT markets (demo, 2-–∏–∑-3): {before_cnt} -> {len(self.active_pairs)} –ø–∞—Ä")
                    # –ï—Å–ª–∏ –ø–∞—Ä —Å—Ç–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∏–Ω–∏–º—É–º –≤ 2 markets
                    if len(self.active_pairs) < 5:
                        for pair in ['BTC/USDT', 'ETH/USDT']:
                            if ccxt_presence_count(pair) >= 2:
                                self.active_pairs.add(pair)
                elif loaded_count == 1:
                    # –°–º—è–≥—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º markets
                    def ccxt_presence_count(sym: str) -> int:
                        return sum(1 for syms in ccxt_symbols_by_ex.values() if sym in syms)
                    before_cnt = len(self.active_pairs)
                    self.active_pairs = {s for s in self.active_pairs if ccxt_presence_count(s) >= 1}
                    logger.info(f"üéØ –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ CCXT markets (demo, >=1 –∏–∑ {sorted(list(loaded_sets))}): {before_cnt} -> {len(self.active_pairs)} –ø–∞—Ä")
                    if len(self.active_pairs) < 5:
                        for pair in ['BTC/USDT', 'ETH/USDT']:
                            if ccxt_presence_count(pair) >= 1:
                                self.active_pairs.add(pair)
                else:
                    # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª markets, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º CCXT-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                    logger.info("‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ CCXT: –Ω–∏ —É –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã markets")
            elif only_pairs_mode:
                logger.info("üîí Only-pairs strict: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ CCXT markets")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ CCXT markets: {e}")

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        if len(self.active_pairs) == 0:
            logger.warning(f"‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: enabled_set={enabled_set}, trio intersection={enabled_set & {'okx', 'bitget', 'phemex'}}, all_pairs count={len(all_pairs)}")
            logger.warning(f"‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: demo_mode={demo_mode}, used_intersection={used_intersection}, only_pairs_mode={only_pairs_mode}")
        if only_pairs_mode:
            try:
                logger.info(f"üîí Only-pairs —Å–ø–∏—Å–æ–∫: {sorted(list(self.active_pairs))}")
            except Exception:
                logger.info("üîí Only-pairs —Å–ø–∏—Å–æ–∫: <error formatting pairs list>")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.last_pair_update = time.time()
    
    async def _fetch_exchange_pairs(self, exchange_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å –±–∏—Ä–∂–∏"""
        if exchange_id not in EXCHANGES_CONFIG:
            logger.error(f"Exchange {exchange_id} not found in EXCHANGES_CONFIG")
            logger.error(f"Available exchanges: {list(EXCHANGES_CONFIG.keys())}")
            return []
        
        config = EXCHANGES_CONFIG[exchange_id]
        # –õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä, –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ –ø—Ä–∏ discovery
        discovery_limit = DYNAMIC_PAIRS_CONFIG.get('per_exchange_discovery_limit', 100)
        
        try:
            async with aiohttp.ClientSession() as session:
                if exchange_id == 'mexc':
                    url = f"{config['rest_url']}/api/v3/exchangeInfo"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data.get('symbols', []):
                            # MEXC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "1" = –∞–∫—Ç–∏–≤–µ–Ω
                            if symbol.get('status') == '1' and symbol.get('quoteAsset') == 'USDT':
                                base = symbol['baseAsset']
                                pairs.append(f"{base}/USDT")
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'bybit':
                    url = f"{config['rest_url']}/v5/market/instruments-info?category=spot"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data['result']['list']:
                            if symbol['status'] == 'Trading' and 'USDT' in symbol['symbol']:
                                base = symbol['symbol'].replace('USDT', '')
                                pairs.append(f"{base}/USDT")
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'huobi':
                    url = f"{config['rest_url']}/v1/common/symbols"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data.get('data', []):
                            if symbol['state'] == 'online' and symbol['quote-currency'] == 'usdt':
                                pairs.append(f"{symbol['base-currency'].upper()}/USDT")
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'binance':
                    url = "https://api.binance.com/api/v3/exchangeInfo"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data.get('symbols', []):
                            if symbol['status'] == 'TRADING' and symbol['quoteAsset'] == 'USDT':
                                pairs.append(f"{symbol['baseAsset']}/USDT")
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'okx':
                    url = "https://www.okx.com/api/v5/market/tickers?instType=SPOT"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for ticker in data.get('data', []):
                            if 'USDT' in ticker['instId']:
                                symbol = ticker['instId'].replace('-', '/')
                                pairs.append(symbol)
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'gate':
                    url = "https://api.gateio.ws/api/v4/spot/currency_pairs"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for pair in data:
                            if pair['trade_status'] == 'tradable' and 'USDT' in pair['id']:
                                pairs.append(pair['id'].replace('_', '/'))
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'bitget':
                    url = "https://api.bitget.com/api/spot/v1/market/tickers"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for ticker in data.get('data', []):
                            sym_raw = str(ticker.get('symbol', '')).upper()
                            if not sym_raw:
                                continue
                            # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –∫–∞–Ω–∞–ª–∞ —Å–ø–æ—Ç–∞ Bitget (–Ω–∞–ø—Ä–∏–º–µ—Ä, _SPBL)
                            basequote = sym_raw.split('_')[0]
                            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –æ–∂–∏–¥–∞–µ–º BASEUSDT
                            if basequote.endswith('USDT') and len(basequote) > 4:
                                base = basequote[:-4]
                                pairs.append(f"{base}/USDT")
                        return pairs[:discovery_limit]
                        
                elif exchange_id == 'phemex':
                    url = "https://api.phemex.com/public/products"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for product in data.get('data', {}).get('products', []):
                            if product.get('type') == 'Spot' and product['quoteCurrency'] == 'USDT':
                                pairs.append(f"{product['baseCurrency']}/USDT")
                        return pairs[:discovery_limit]
                        
                # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–∏—Ä–∂
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏—Ä–∂–∞ {exchange_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
                    return [
                        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT',
                        'XRP/USDT', 'DOGE/USDT', 'ADA/USDT', 'MATIC/USDT'
                    ]
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä {exchange_id}: {e}")
            return []
    
    async def _on_orderbook_update(self, orderbook: OrderBook):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–∫–∞–Ω (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–∏–º–≤–æ–ª–∞)
            norm_symbol = normalize_symbol(getattr(orderbook, 'symbol', None))
            if not norm_symbol:
                return
            # –û–±–Ω–æ–≤–∏–º —Å–∏–º–≤–æ–ª —É –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            orderbook.symbol = norm_symbol
            if norm_symbol in self.active_pairs:
                if norm_symbol not in self.orderbooks:
                    self.orderbooks[norm_symbol] = {}
                self.orderbooks[norm_symbol][orderbook.exchange] = orderbook
                self.statistics['ws_messages'] += 1
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
                pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")
            self.statistics['errors'] += 1
    
    async def _run_websocket_manager(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            await self.ws_manager.start(list(self.active_pairs))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    
    async def _scan_opportunities(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...")
        
        while self.running:
            # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∞–º–∏; –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            delay = TRADING_CONFIG['scan_interval']
            try:
                scan_start = time.time()
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∏
                current_time = time.time()
                opportunities = []
                
                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                if TRADING_CONFIG.get('enable_inter_exchange', True):
                    for symbol, exchanges_data in self.orderbooks.items():
                        if len(exchanges_data) < 2:
                            continue
                        # –†–µ–∂–∏–º: –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –ø–µ—Ä–µ–±–æ—Ä –ø–∞—Ä –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è –ª—É—á—à–∞—è –ø–∞—Ä–∞
                        if TRADING_CONFIG.get('enable_exhaustive_pair_scanning', False):
                            found_opps = self._find_inter_exchange_pairs(symbol, exchanges_data)
                            for opp in found_opps:
                                # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                                self.statistics['candidates_detected'] += 1
                                if self._check_liquidity_for_opportunity(opp):
                                    await self.opportunity_queue.put(opp)
                                    opportunities.append(opp)
                                    self.last_opportunity_time = time.time()
                                    # –ü–µ—Ä-–º–µ—Ç—Ä–∏–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                                    symbol = opp.symbols[0]
                                    buy_ex, sell_ex = opp.exchanges[0], opp.exchanges[1]
                                    pair_key = f"{symbol}|{buy_ex}->{sell_ex}"
                                    self.stats_by_pair[pair_key]['opportunities'] += 1
                                    self.stats_by_exchange[buy_ex]['opportunities'] += 1
                                    self.stats_by_exchange[sell_ex]['opportunities'] += 1
                                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–∞—Ä—ã –ø–æ–∫—É–ø–∫–∞->–ø—Ä–æ–¥–∞–∂–∞
                                    key = f"{symbol}_{opp.exchanges[0]}_{opp.exchanges[1]}"
                                    self.opportunity_cooldowns[key] = time.time()
                                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                                    print("\n" + "üéØ"*40)
                                    print(f"\nüíé –ù–ê–ô–î–ï–ù–ê –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!")
                                    print(f"  –ü–∞—Ä–∞: {symbol}")
                                    print(f"  –ú–∞—Ä—à—Ä—É—Ç: {opp.exchanges[0]} ‚Üí {opp.exchanges[1]}")
                                    print(f"  –ü—Ä–∏–±—ã–ª—å: {opp.expected_profit_pct:.4f}%")
                                    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${opp.expected_profit_usd:.2f}")
                                    print("üéØ"*40 + "\n")
                        else:
                            opportunity = self._check_inter_exchange_arbitrage(
                                symbol, exchanges_data
                            )
                            if opportunity:
                                # –°—á–∏—Ç–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                                self.statistics['candidates_detected'] += 1
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                                if self._check_liquidity_for_opportunity(opportunity):
                                    await self.opportunity_queue.put(opportunity)
                                    opportunities.append(opportunity)
                                    self.last_opportunity_time = time.time()
                                    # –ü–µ—Ä-–º–µ—Ç—Ä–∏–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                                    symbol = opportunity.symbols[0]
                                    buy_ex, sell_ex = opportunity.exchanges[0], opportunity.exchanges[1]
                                    pair_key = f"{symbol}|{buy_ex}->{sell_ex}"
                                    self.stats_by_pair[pair_key]['opportunities'] += 1
                                    self.stats_by_exchange[buy_ex]['opportunities'] += 1
                                    self.stats_by_exchange[sell_ex]['opportunities'] += 1
                                    
                                    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                                    print("\n" + "üéØ"*40)
                                    print(f"\nüíé –ù–ê–ô–î–ï–ù–ê –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!")
                                    print(f"  –ü–∞—Ä–∞: {symbol}")
                                    print(f"  –ú–∞—Ä—à—Ä—É—Ç: {opportunity.exchanges[0]} ‚Üí {opportunity.exchanges[1]}")
                                    print(f"  –ü—Ä–∏–±—ã–ª—å: {opportunity.expected_profit_pct:.4f}%")
                                    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${opportunity.expected_profit_usd:.2f}")
                                    print("üéØ"*40 + "\n") 
                
                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                if TRADING_CONFIG.get('enable_triangular', False):
                    for exchange, config in EXCHANGES_CONFIG.items():
                        if not config['enabled']:
                            continue
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
                        exchange_orderbooks = {}
                        for symbol, exchanges_data in self.orderbooks.items():
                            if exchange in exchanges_data:
                                orderbook = exchanges_data[exchange]
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OrderBook –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                                exchange_orderbooks[symbol] = {
                                    'bids': orderbook.bids if hasattr(orderbook, 'bids') else [],
                                    'asks': orderbook.asks if hasattr(orderbook, 'asks') else []
                                }
                        
                        if len(exchange_orderbooks) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –ø–∞—Ä—ã –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
                            triangular_opportunities = self.triangular_scanner.scan_opportunities(
                                exchange,
                                exchange_orderbooks,
                                config.get('fee', 0.001) * 100
                            )
                            
                            for t_opp in triangular_opportunities:
                                await self.opportunity_queue.put(t_opp)
                                opportunities.append(t_opp)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
                if len(opportunities) > 0:
                    self.statistics['opportunities_found'] += len(opportunities)
                    self.last_opportunity_time = time.time()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
                self.statistics['errors'] += 1
                delay = 5
            finally:
                # Exception-safe –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–∫–∞–Ω–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10
                try:
                    self.scan_counter += 1
                    self.statistics['scans'] = self.statistics.get('scans', 0) + 1
                    if self.scan_counter % 10 == 0:
                        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.scan_counter}")
                except Exception:
                    pass
                # –ï–¥–∏–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
                await asyncio.sleep(delay)
    
    async def _run_executor(self):
        """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        logger.info("üíº –ó–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫...")
        
        while self.running:
            try:
                # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                opportunity = await asyncio.wait_for(
                    self.opportunity_queue.get(),
                    timeout=10
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏
                if not opportunity.is_fresh:
                    logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–ª–∞")
                    continue
                
                # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
                if isinstance(opportunity, ArbitrageOpportunity):
                    result = await self.trading_engine.execute_arbitrage(
                        opportunity
                    )
                elif isinstance(opportunity, TriangularOpportunity):
                    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                    result = await self.triangular_executor.execute_triangular(
                        opportunity
                    )
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä-–º–µ—Ç—Ä–∏–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(opportunity, ArbitrageOpportunity):
                    symbol = opportunity.symbols[0]
                    buy_ex, sell_ex = opportunity.exchanges[0], opportunity.exchanges[1]
                    pair_key = f"{symbol}|{buy_ex}->{sell_ex}"
                    # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã
                    self.stats_by_pair[pair_key]['trades'] += 1
                    self.stats_by_exchange[buy_ex]['trades'] += 1
                    self.stats_by_exchange[sell_ex]['trades'] += 1
                    if result:
                        self.statistics['trades_executed'] += 1
                        self.stats_by_pair[pair_key]['successful'] += 1
                        self.stats_by_exchange[buy_ex]['successful'] += 1
                        self.stats_by_exchange[sell_ex]['successful'] += 1
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏ –∏–∑ trade_history –¥–≤–∏–∂–∫–∞
                        profit_usd = 0.0
                        profit_pct = 0.0
                        volume_usd = TRADING_CONFIG.get('position_size_usd', 100)
                        if getattr(self.trading_engine, 'trade_history', None):
                            last_trade = self.trading_engine.trade_history[-1]
                            try:
                                if (last_trade.get('exchanges') == [buy_ex, sell_ex] and
                                    last_trade.get('symbols') == [symbol]):
                                    profit_usd = float(last_trade.get('net_profit', 0.0))
                                    profit_pct = float(last_trade.get('profit_pct', 0.0))
                                    volume_usd = float(last_trade.get('position_size', volume_usd))
                            except Exception:
                                pass
                        # –ê—Ç—Ä–∏–±—É—Ç–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å —Å–≤—è–∑–∫–µ –∏ –æ–±–µ–∏–º –±–∏—Ä–∂–∞–º (–ø–æ–ª–Ω–∞—è —Å—É–º–º–∞ –∫–∞–∂–¥–æ–π)
                        self.stats_by_pair[pair_key]['profit_usd'] += profit_usd
                        self.stats_by_pair[pair_key]['profit_pct_sum'] += profit_pct
                        self.stats_by_pair[pair_key]['volume_usd'] += volume_usd
                        self.stats_by_exchange[buy_ex]['profit_usd'] += profit_usd
                        self.stats_by_exchange[buy_ex]['profit_pct_sum'] += profit_pct
                        self.stats_by_exchange[buy_ex]['volume_usd'] += volume_usd
                        self.stats_by_exchange[sell_ex]['profit_usd'] += profit_usd
                        self.stats_by_exchange[sell_ex]['profit_pct_sum'] += profit_pct
                        self.stats_by_exchange[sell_ex]['volume_usd'] += volume_usd
                        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.stats_by_pair[pair_key]['failed'] += 1
                        self.stats_by_exchange[buy_ex]['failed'] += 1
                        self.stats_by_exchange[sell_ex]['failed'] += 1
                        logger.warning(f"‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (–º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂)
                    if result:
                        try:
                            if TRADING_CONFIG.get('mode') == 'real':
                                await self.trading_engine.update_balances()
                                logger.info("üîÑ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏ (real)")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏: {e}")
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                if isinstance(opportunity, TriangularOpportunity) and result and TRADING_CONFIG.get('mode') == 'real':
                    try:
                        await self.trading_engine.update_balances()
                        logger.info("üîÑ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ (real)")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
                self.statistics['errors'] += 1
                await asyncio.sleep(1)
    
    async def _run_pair_updater(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if time.time() - self.last_pair_update > DYNAMIC_PAIRS_CONFIG['update_interval']:
                    logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                    try:
                        await self.discover_pairs()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—Ä: {e}")
                        import traceback
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        raise
                    
                    if not self.active_pairs:
                        raise Exception("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
                    await self.ws_manager.stop()
                    await asyncio.sleep(2)
                    asyncio.create_task(
                        self.ws_manager.start(list(self.active_pairs))
                    )
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")
                await asyncio.sleep(300)
    
    async def _run_statistics(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            try:
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö
                connected_exchanges = []
                disconnected_exchanges = []
                if self.ws_manager and hasattr(self.ws_manager, 'connections'):
                    conns = set(self.ws_manager.connections.keys())
                else:
                    conns = set()
                for exchange_id in self.enabled_exchanges:
                    if exchange_id in conns:
                        connected_exchanges.append(exchange_id)
                    else:
                        disconnected_exchanges.append(exchange_id)

                # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –ø–æ –±–∏—Ä–∂–∞–º
                pairs_by_exchange = {}
                for symbol in self.active_pairs:
                    if symbol in self.orderbooks:
                        for exchange in self.orderbooks[symbol]:
                            pairs_by_exchange[exchange] = pairs_by_exchange.get(exchange, 0) + 1

                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                print("\n" + Fore.CYAN + "‚ïê" * 80)
                print(Fore.CYAN + "üìä –°–¢–ê–¢–£–° –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê" + Style.RESET_ALL + f"  |  {datetime.now().strftime('%H:%M:%S')}")
                print(Fore.CYAN + "‚ïê" * 80)

                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                conn_rows = []
                for ex_id in self.enabled_exchanges:
                    name = EXCHANGES_CONFIG.get(ex_id, {}).get('name', ex_id.upper())
                    # –ë–∏—Ä–∂–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–Ω–ª–∞–π–Ω –µ—Å–ª–∏ –µ—Å—Ç—å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–õ–ò –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã (REST polling)
                    ws_connected = ex_id in connected_exchanges
                    has_active_pairs = pairs_by_exchange.get(ex_id, 0) > 0
                    online = ws_connected or has_active_pairs
                    status = (Fore.GREEN + 'ONLINE' + Style.RESET_ALL) if online else (Fore.RED + 'OFFLINE' + Style.RESET_ALL)
                    conn_rows.append([ex_id, name, status, pairs_by_exchange.get(ex_id, 0)])
                if conn_rows:
                    print(Fore.YELLOW + "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                    print(tabulate(conn_rows, headers=['ID', '–ë–∏—Ä–∂–∞', '–°—Ç–∞—Ç—É—Å', '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä'], tablefmt='github'))

                # –°–≤–æ–¥–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
                scans = self.statistics.get('scans', 0)
                candidates = self.statistics.get('candidates_detected', 0)
                opps = self.statistics.get('opportunities_found', 0)
                trades = self.statistics.get('trades_executed', 0)
                errors = self.statistics.get('errors', 0)
                if scans > 0:
                    uptime = time.time() - self.statistics.get('start_time', time.time())
                    scan_rate = scans / max(uptime, 1)
                else:
                    scan_rate = 0.0
                print(Fore.YELLOW + "üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂:")
                print(tabulate([
                    ['Scans', scans],
                    ['Candidates', candidates],
                    ['Opportunities', opps],
                    ['Trades', trades],
                    ['Errors', errors],
                    ['Scan rate (1/s)', f"{scan_rate:.2f}"]
                ], headers=['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'], tablefmt='github'))

                # –¢–æ–ø –ø–æ –±–∏—Ä–∂–∞–º
                if self.stats_by_exchange:
                    top_ex = sorted(self.stats_by_exchange.items(), key=lambda kv: kv[1]['trades'], reverse=True)[:5]
                    ex_rows = []
                    for ex, s in top_ex:
                        avg_pct = (s['profit_pct_sum'] / s['successful']) if s['successful'] > 0 else 0.0
                        ex_rows.append([ex, s['opportunities'], s['trades'], f"‚úÖ{s['successful']}/‚ùå{s['failed']}", f"${s['profit_usd']:.2f}", f"{avg_pct:.3f}%"]) 
                    if ex_rows:
                        print(Fore.YELLOW + "üìà –ü–æ –±–∏—Ä–∂–∞–º (—Ç–æ–ø-5):")
                        print(tabulate(ex_rows, headers=['–ë–∏—Ä–∂–∞', '–í–æ–∑–º.', '–°–¥–µ–ª–∫–∏', '–£—Å–ø–µ—Ö/–ü—Ä–æ–≤–∞–ª', '–ü—Ä–∏–±—ã–ª—å $', '–°—Ä.%'], tablefmt='github'))

                # –¢–æ–ø –ø–æ —Å–≤—è–∑–∫–∞–º
                if self.stats_by_pair:
                    top_pairs = sorted(self.stats_by_pair.items(), key=lambda kv: kv[1]['successful'], reverse=True)[:5]
                    pair_rows = []
                    for pair, s in top_pairs:
                        avg_pct = (s['profit_pct_sum'] / s['successful']) if s['successful'] > 0 else 0.0
                        pair_rows.append([pair, s['opportunities'], s['trades'], f"‚úÖ{s['successful']}/‚ùå{s['failed']}", f"${s['profit_usd']:.2f}", f"{avg_pct:.3f}%"]) 
                    if pair_rows:
                        print(Fore.YELLOW + "üîó –ü–æ —Å–≤—è–∑–∫–∞–º (—Ç–æ–ø-5):")
                        print(tabulate(pair_rows, headers=['–°–≤—è–∑–∫–∞', '–í–æ–∑–º.', '–°–¥–µ–ª–∫–∏', '–£—Å–ø–µ—Ö/–ü—Ä–æ–≤–∞–ª', '–ü—Ä–∏–±—ã–ª—å $', '–°—Ä.%'], tablefmt='github'))

                # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                if hasattr(self, 'last_opportunity_time') and self.last_opportunity_time:
                    time_since = time.time() - self.last_opportunity_time
                    print(Fore.YELLOW + f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {time_since:.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥")

                print(Fore.CYAN + "‚ïê" * 80 + "\n")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _check_liquidity_for_opportunity(self, opportunity: ArbitrageOpportunity) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏
            buy_exchange = opportunity.exchanges[0]
            sell_exchange = opportunity.exchanges[1]
            symbol = opportunity.symbols[0]
            
            if symbol not in self.orderbooks:
                return False
            
            buy_orderbook_obj = self.orderbooks[symbol].get(buy_exchange)
            sell_orderbook_obj = self.orderbooks[symbol].get(sell_exchange)
            
            if not buy_orderbook_obj or not sell_orderbook_obj:
                return False
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OrderBook –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            buy_orderbook = {
                'bids': buy_orderbook_obj.bids if hasattr(buy_orderbook_obj, 'bids') else [],
                'asks': buy_orderbook_obj.asks if hasattr(buy_orderbook_obj, 'asks') else []
            }
            sell_orderbook = {
                'bids': sell_orderbook_obj.bids if hasattr(sell_orderbook_obj, 'bids') else [],
                'asks': sell_orderbook_obj.asks if hasattr(sell_orderbook_obj, 'asks') else []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            volume_usd = TRADING_CONFIG.get('position_size_usd', 100)
            buy_analysis = self.orderbook_analyzer.analyze_liquidity(
                buy_orderbook,
                'buy',
                volume_usd,
                buy_exchange,
                symbol
            )
            
            sell_analysis = self.orderbook_analyzer.analyze_liquidity(
                sell_orderbook,
                'sell',
                volume_usd,
                sell_exchange,
                symbol
            )
            
            # –ü—Ä–æ—Ö–æ–¥–∏—Ç –µ—Å–ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            if buy_analysis.can_execute and sell_analysis.can_execute:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
                slippage_impact = buy_analysis.price_impact + sell_analysis.price_impact
                opportunity.expected_profit_pct -= slippage_impact
                
                return opportunity.expected_profit_pct > TRADING_CONFIG['min_profit_threshold']
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def _check_inter_exchange_arbitrage(self, symbol: str, exchanges_data: Dict) -> Optional[ArbitrageOpportunity]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_bid = None
            best_bid_exchange = None
            best_bid_volume = 0
            best_ask = None
            best_ask_exchange = None
            best_ask_volume = 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            prices_info = []
            stale_info = []
            considered_exchanges = 0
            stale_exchanges = 0
            
            for exchange, orderbook in exchanges_data.items():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä-"–±–∏—Ä–∂–µ–≤–æ–π" TTL —Å —É—á—ë—Ç–æ–º REST-–ø–æ–ª–ª–∏–Ω–≥–∞)
                allowed_age = TRADING_CONFIG['max_opportunity_age']
                ex_cfg = EXCHANGES_CONFIG.get(exchange, {})
                if ex_cfg.get('poll_rest'):
                    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–µ–Ω—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å 0.5s
                    poll_interval = ex_cfg.get('poll_interval', 0)
                    allowed_age = max(allowed_age, poll_interval + 0.5)
                
                if orderbook.age > allowed_age:
                    stale_exchanges += 1
                    stale_info.append(f"{exchange}:{orderbook.age:.2f}s>TTL{allowed_age:.2f}s")
                    continue
                
                considered_exchanges += 1
                
                if orderbook.best_bid and orderbook.best_ask:
                    prices_info.append(f"{exchange}: bid={orderbook.best_bid:.4f}, ask={orderbook.best_ask:.4f}")
                
                if orderbook.best_bid and (not best_bid or orderbook.best_bid > best_bid):
                    best_bid = orderbook.best_bid
                    best_bid_exchange = exchange
                    best_bid_volume = orderbook.get_depth_volume(1)['bid']
                
                if orderbook.best_ask and (not best_ask or orderbook.best_ask < best_ask):
                    best_ask = orderbook.best_ask
                    best_ask_exchange = exchange
                    best_ask_volume = orderbook.get_depth_volume(1)['ask']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if hasattr(self, '_check_counter'):
                self._check_counter += 1
            else:
                self._check_counter = 1
                
            if self._check_counter % 100 == 0 and prices_info:
                logger.info(f"üìä {symbol} —Ü–µ–Ω—ã: {' | '.join(prices_info[:3])}")
                if stale_exchanges:
                    logger.info(f"‚è±Ô∏è {symbol} —Å–≤–µ–∂–µ—Å—Ç—å: –¥–æ–ø—É—â–µ–Ω–æ={considered_exchanges}, –æ—Ç–±—Ä–æ—à–µ–Ω–æ –ø–æ —Å—Ç–∞—Ä–æ—Å—Ç–∏={stale_exchanges} [{'; '.join(stale_info[:3])}]")
            
            if not (best_bid and best_ask):
                if self._check_counter % 500 == 0:
                    logger.debug(f"  {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (bid={best_bid}, ask={best_ask})")
                return None
                
            if best_bid_exchange == best_ask_exchange:
                return None
            # CCXT –ø—Ä–µ–¥-—Ñ–∏–ª—å—Ç—Ä: —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö –ø–æ –¥–∞–Ω–Ω—ã–º ccxt
            try:
                if not self._ccxt_pair_present(symbol, best_ask_exchange, best_bid_exchange):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–º —á–∞—Å—Ç–æ—Ç—É –ª–æ–≥–æ–≤
                    cnt = getattr(self, '_ccxt_skip_log_counter', 0)
                    if cnt % 50 == 0:
                        p_buy, m_buy, s_buy = self._ccxt_presence(best_ask_exchange, symbol)
                        p_sell, m_sell, s_sell = self._ccxt_presence(best_bid_exchange, symbol)
                        logger.info(
                            f"‚è≠Ô∏è CCXT prefilter skip {symbol}: {best_ask_exchange}[has={p_buy},mkt={m_buy}] -> {best_bid_exchange}[has={p_sell},mkt={m_sell}]"
                        )
                    self._ccxt_skip_log_counter = cnt + 1
                    return None
            except Exception:
                pass
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            spread_pct = (best_bid - best_ask) / best_ask * 100
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–ê–ù–î–ò–î–ê–¢–û–í –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∂–¥—ã–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫)
            if self._check_counter % 100 == 0 and spread_pct > 0.01:
                logger.info(f"üìä –ö–∞–Ω–¥–∏–¥–∞—Ç {symbol}: —Å–ø—Ä–µ–¥={spread_pct:.3f}% {best_ask_exchange}@{best_ask:.6f} ‚Üí {best_bid_exchange}@{best_bid:.6f}")
            
            # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π  
            if best_ask_exchange in EXCHANGES_CONFIG:
                buy_fee = EXCHANGES_CONFIG[best_ask_exchange].get('fee', 0.001) * 100
            else:
                buy_fee = 0.1
                
            if best_bid_exchange in EXCHANGES_CONFIG:
                sell_fee = EXCHANGES_CONFIG[best_bid_exchange].get('fee', 0.001) * 100
            else:
                sell_fee = 0.1
                
            total_fees = buy_fee + sell_fee
            
            # –£—á–µ—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞
            slippage = TRADING_CONFIG['slippage_tolerance'] * 100
            
            # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            net_profit_pct = spread_pct - total_fees - slippage
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–ª–∏–∑–∫–∏—Ö –∫ –ø–æ—Ä–æ–≥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            if spread_pct > 0:
                if self._check_counter % 50 == 0 or net_profit_pct > -0.1:
                    logger.info(f"üîç {symbol}: {best_ask_exchange}‚Üí{best_bid_exchange}")
                    logger.info(f"   –°–ø—Ä–µ–¥: {spread_pct:.4f}% (bid={best_bid:.4f}, ask={best_ask:.4f})")
                    logger.info(f"   –ö–æ–º–∏—Å—Å–∏–∏: {total_fees:.4f}% (–ø–æ–∫—É–ø–∫–∞={buy_fee:.3f}%, –ø—Ä–æ–¥–∞–∂–∞={sell_fee:.3f}%)")
                    logger.info(f"   –°–ª–∏–ø–ø–µ–¥–∂: {slippage:.3f}%")
                    logger.info(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}% (–ø–æ—Ä–æ–≥: {TRADING_CONFIG['min_profit_threshold']}%)")
                    logger.info(f"   –û–±—ä–µ–º—ã: bid={best_bid_volume:.2f}, ask={best_ask_volume:.2f}")
            
            if net_profit_pct < TRADING_CONFIG['min_profit_threshold']:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è —ç—Ç–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            opportunity_key = f"{symbol}_{best_ask_exchange}_{best_bid_exchange}"
            current_time = time.time()
            
            cooldown = TRADING_CONFIG.get('pair_cooldown_seconds', 30)
            if opportunity_key in self.opportunity_cooldowns:
                if current_time - self.opportunity_cooldowns[opportunity_key] < cooldown:
                    return None
            
            # –ù–ê–ô–î–ï–ù–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!
            logger.warning(f"üéØ –ê–†–ë–ò–¢–†–ê–ñ –ù–ê–ô–î–ï–ù! {symbol}: {best_ask_exchange}‚Üí{best_bid_exchange}, –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}%")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
            self.opportunity_cooldowns[opportunity_key] = current_time
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            min_volume = min(best_bid_volume, best_ask_volume) * best_ask
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ USD
            position_size = TRADING_CONFIG.get('position_size_usd', 100)
            expected_profit_usd = position_size * net_profit_pct / 100
            
            return ArbitrageOpportunity(
                type='inter_exchange',
                path=[best_ask_exchange, best_bid_exchange],
                exchanges=[best_ask_exchange, best_bid_exchange],
                symbols=[symbol],
                prices={
                    f'{best_ask_exchange}_ask': best_ask,
                    f'{best_bid_exchange}_bid': best_bid
                },
                volumes={
                    best_ask_exchange: best_ask_volume,
                    best_bid_exchange: best_bid_volume
                },
                expected_profit_pct=net_profit_pct,
                expected_profit_usd=expected_profit_usd,
                min_volume=min_volume
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return None

    def _ccxt_presence(self, exchange: str, symbol: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (present, markets_count, symbols_count) –¥–ª—è –ø–∞—Ä—ã –Ω–∞ –±–∏—Ä–∂–µ –ø–æ –¥–∞–Ω–Ω—ã–º ccxt."""
        try:
            info = self.trading_engine.exchange_clients.get(exchange, {}) if hasattr(self, 'trading_engine') else {}
            ccxt_client = info.get('ccxt') if isinstance(info, dict) else None
            if not ccxt_client:
                return False, 0, 0
            try:
                markets = getattr(ccxt_client, 'markets', {}) or {}
                mkt_count = len(markets)
            except Exception:
                markets = {}
                mkt_count = 0
            try:
                symbols = set(getattr(ccxt_client, 'symbols', []))
            except Exception:
                symbols = set()
            if not symbols:
                try:
                    symbols = set(getattr(ccxt_client, 'symbols', []) or list(markets.keys()))
                except Exception:
                    symbols = set(markets.keys())
            sym_count = len(symbols)
            present = (symbol in symbols) or (symbol in markets)
            return present, mkt_count, sym_count
        except Exception:
            return False, 0, 0

    def _ccxt_pair_present(self, symbol: str, ex1: str, ex2: str) -> bool:
        """–û—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"""
        p1, m1, s1 = self._ccxt_presence(ex1, symbol)
        p2, m2, s2 = self._ccxt_presence(ex2, symbol)
        
        # –ï—Å–ª–∏ markets –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (0), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É (—Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–∞—Ä–∞ –µ—Å—Ç—å)
        if m1 == 0 or m2 == 0:
            return True
            
        # –ï—Å–ª–∏ symbols –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É    
        if s1 == 0 or s2 == 0:
            return True
            
        # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ exchange –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        return p1 and p2

    def _find_inter_exchange_pairs(self, symbol: str, exchanges_data: Dict) -> List[ArbitrageOpportunity]:
        """–ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –ø–æ–∏—Å–∫ –º–µ–∂–±–∏—Ä–∂–µ–≤—ã—Ö –ø–∞—Ä (–ø–æ–∫—É–ø–∫–∞->–ø—Ä–æ–¥–∞–∂–∞) –¥–ª—è —Å–∏–º–≤–æ–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–∏–±—ã–ª–∏."""
        opportunities: List[ArbitrageOpportunity] = []
        try:
            # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
            buy_candidates = []  # (exchange, ask_price, ask_vol, eff_price, fee_pct)
            sell_candidates = []  # (exchange, bid_price, bid_vol, eff_price, fee_pct)
            for exchange, orderbook in exchanges_data.items():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                allowed_age = TRADING_CONFIG['max_opportunity_age']
                ex_cfg = EXCHANGES_CONFIG.get(exchange, {})
                if ex_cfg.get('poll_rest'):
                    poll_interval = ex_cfg.get('poll_interval', 0)
                    allowed_age = max(allowed_age, poll_interval + 0.5)
                if not hasattr(orderbook, 'age') or orderbook.age > allowed_age:
                    continue
                fee_pct = EXCHANGES_CONFIG.get(exchange, {}).get('fee', 0) * 100
                if getattr(orderbook, 'best_ask', None):
                    try:
                        ask_vol = orderbook.get_depth_volume(1)['ask']
                    except Exception:
                        ask_vol = 0
                    eff_buy = orderbook.best_ask * (1 + fee_pct / 100)
                    buy_candidates.append((exchange, orderbook.best_ask, ask_vol, eff_buy, fee_pct))
                if getattr(orderbook, 'best_bid', None):
                    try:
                        bid_vol = orderbook.get_depth_volume(1)['bid']
                    except Exception:
                        bid_vol = 0
                    eff_sell = orderbook.best_bid * (1 - fee_pct / 100)
                    sell_candidates.append((exchange, orderbook.best_bid, bid_vol, eff_sell, fee_pct))

            if not buy_candidates or not sell_candidates:
                return opportunities

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–±—Ä–µ–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            buy_candidates.sort(key=lambda x: (x[3], x[4]))  # –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–µ –ø–æ–∫—É–ø–∫–∏, –∑–∞—Ç–µ–º –ø–æ –∫–æ–º–∏—Å—Å–∏–∏
            sell_candidates.sort(key=lambda x: (-x[3], x[4]))  # –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏ —É–±—ã–≤., –∑–∞—Ç–µ–º –∫–æ–º–∏—Å—Å–∏—è
            max_buys = TRADING_CONFIG.get('max_buy_candidates_per_symbol', 3)
            max_sells = TRADING_CONFIG.get('max_sell_candidates_per_symbol', 3)
            buy_candidates = buy_candidates[:max_buys]
            sell_candidates = sell_candidates[:max_sells]

            slippage_tol_pct = TRADING_CONFIG.get('slippage_tolerance', 0) * 100
            min_profit_pct = TRADING_CONFIG.get('min_profit_threshold', 0)
            cooldown = TRADING_CONFIG.get('pair_cooldown_seconds', 30)
            position_size = TRADING_CONFIG.get('position_size_usd', 100)

            # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–∞—Ä –ø–æ–∫—É–ø–∫–∞->–ø—Ä–æ–¥–∞–∂–∞
            for buy_ex, ask, ask_vol, _, buy_fee_pct in buy_candidates:
                for sell_ex, bid, bid_vol, _, sell_fee_pct in sell_candidates:
                    if buy_ex == sell_ex:
                        continue
                    if ask <= 0:
                        continue
                    # CCXT –ø—Ä–µ–¥-—Ñ–∏–ª—å—Ç—Ä: —Å–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö
                    try:
                        if not self._ccxt_pair_present(symbol, buy_ex, sell_ex):
                            continue
                    except Exception:
                        pass
                    spread_pct = (bid - ask) / ask * 100
                    total_fees = buy_fee_pct + sell_fee_pct
                    net_profit_pct = spread_pct - total_fees - slippage_tol_pct
                    if net_profit_pct < min_profit_pct:
                        continue
                    # –ö—É–ª–¥–∞—É–Ω
                    key = f"{symbol}_{buy_ex}_{sell_ex}"
                    now = time.time()
                    if key in self.opportunity_cooldowns and (now - self.opportunity_cooldowns[key]) < cooldown:
                        continue
                    # –û–±—ä–µ–º –∏ –æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å
                    min_volume_usd = min(bid_vol, ask_vol) * ask
                    expected_profit_usd = position_size * net_profit_pct / 100
                    opp = ArbitrageOpportunity(
                        type='inter_exchange',
                        path=[buy_ex, sell_ex],
                        exchanges=[buy_ex, sell_ex],
                        symbols=[symbol],
                        prices={
                            f'{buy_ex}_ask': ask,
                            f'{sell_ex}_bid': bid
                        },
                        volumes={
                            buy_ex: ask_vol,
                            sell_ex: bid_vol
                        },
                        expected_profit_pct=net_profit_pct,
                        expected_profit_usd=expected_profit_usd,
                        min_volume=min_volume_usd
                    )
                    opportunities.append(opp)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–π –ø—Ä–∏–±—ã–ª–∏
            opportunities.sort(key=lambda o: o.expected_profit_pct, reverse=True)
            
            return opportunities
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä –¥–ª—è {symbol}: {e}")
            return opportunities
    
    
    
    def _print_final_statistics(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = (time.time() - self.statistics['start_time']) / 3600
        trading_stats = self.trading_engine.get_stats()
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 60)
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.2f} —á–∞—Å–æ–≤")
        logger.info(f"üîç –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.statistics['scans']}")
        logger.info(f"üßÆ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏): {self.statistics['candidates_detected']}")
        logger.info(f"üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.statistics['opportunities_found']}")
        logger.info(f"üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.statistics['trades_executed']}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {trading_stats.get('successful', 0)}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {trading_stats.get('failed', 0)}")
        logger.info(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π: {self.statistics['ws_messages']}")
        logger.info(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {self.statistics['errors']}")
        logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${trading_stats.get('total_profit_usd', 0):.2f}")
        logger.info(f"üìä –ü—Ä–∏–±—ã–ª—å %: {trading_stats.get('total_profit_pct', 0):.3f}%")
        logger.info(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: ${trading_stats.get('total_volume', 0):.2f}")
        # –†–∞–∑–¥–µ–ª—ã –ø–æ –±–∏—Ä–∂–∞–º –∏ –ø–æ —Å–≤—è–∑–∫–∞–º
        if self.stats_by_exchange:
            logger.info("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏—Ä–∂–∞–º:")
            for ex, s in sorted(self.stats_by_exchange.items(), key=lambda kv: kv[1]['trades'], reverse=True):
                avg_pct = (s['profit_pct_sum'] / s['successful']) if s['successful'] > 0 else 0.0
                logger.info(f"  ‚Ä¢ {ex}: –≤–æ–∑–º={s['opportunities']}, —Å–¥–µ–ª–∫–∏={s['trades']} (‚úÖ{s['successful']}/‚ùå{s['failed']}), –ø—Ä–∏–±—ã–ª—å=${s['profit_usd']:.2f}, —Å—Ä.%={avg_pct:.3f}%")
        if self.stats_by_pair:
            logger.info("\nüîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–≤—è–∑–∫–∞–º:")
            for pair, s in sorted(self.stats_by_pair.items(), key=lambda kv: kv[1]['trades'], reverse=True):
                avg_pct = (s['profit_pct_sum'] / s['successful']) if s['successful'] > 0 else 0.0
                logger.info(f"  ‚Ä¢ {pair}: –≤–æ–∑–º={s['opportunities']}, —Å–¥–µ–ª–∫–∏={s['trades']} (‚úÖ{s['successful']}/‚ùå{s['failed']}), –ø—Ä–∏–±—ã–ª—å=${s['profit_usd']:.2f}, —Å—Ä.%={avg_pct:.3f}%")
        logger.info("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ProductionArbitrageBot()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def signal_handler(sig, frame):
        logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        asyncio.create_task(bot.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.start()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
