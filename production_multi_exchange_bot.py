#!/usr/bin/env python3
"""
üöÄ PRODUCTION MULTI-EXCHANGE ARBITRAGE BOT
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è 7 –±–∏—Ä–∂
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
import signal
import sys
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Set
from collections import defaultdict
import aiohttp

from production_config import (
    EXCHANGES_CONFIG, API_KEYS, TRADING_CONFIG, 
    WEBSOCKET_CONFIG, DYNAMIC_PAIRS_CONFIG,
    RISK_MANAGEMENT, LOGGING_CONFIG
)
from websocket_manager import WebSocketManager, OrderBook
from trading_engine import TradingEngine, ArbitrageOpportunity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=LOGGING_CONFIG['level'],
    format=LOGGING_CONFIG['format'],
    handlers=[
        logging.FileHandler(LOGGING_CONFIG['file']),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('ProductionBot')

class ProductionArbitrageBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.ws_manager = None
        self.trading_engine = TradingEngine()
        self.orderbooks = defaultdict(dict)  # {symbol: {exchange: OrderBook}}
        self.active_pairs = set()
        self.running = False
        self.last_pair_update = 0
        self.scan_counter = 0
        self.opportunity_queue = asyncio.Queue()
        self.statistics = {
            'start_time': time.time(),
            'scans': 0,
            'opportunities_found': 0,
            'trades_executed': 0,
            'ws_messages': 0,
            'errors': 0
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö PRODUCTION ARBITRAGE BOT v1.0.0")
        logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üíº –†–µ–∂–∏–º: {TRADING_CONFIG['mode'].upper()}")
        logger.info(f"üí∞ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: {TRADING_CONFIG['min_profit_threshold']}%")
        logger.info("=" * 60)
        
        self.running = True
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self._initialize()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            tasks = [
                self._run_websocket_manager(),
                self._run_scanner(),
                self._run_executor(),
                self._run_pair_updater(),
                self._run_statistics()
            ]
            
            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            await self.trading_engine.start()
            
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.ws_manager:
            await self.ws_manager.stop()
        
        await self.trading_engine.stop()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_final_statistics()
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        await self._discover_trading_pairs()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.ws_manager = WebSocketManager(
            on_orderbook_update=self._on_orderbook_update
        )
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(self.active_pairs)}")
    
    async def _discover_trading_pairs(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        logger.info("üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        
        all_pairs = defaultdict(set)  # {symbol: set(exchanges)}
        
        for exchange_id, config in EXCHANGES_CONFIG.items():
            if not config['enabled']:
                continue
                
            try:
                pairs = await self._fetch_exchange_pairs(exchange_id)
                for pair in pairs:
                    all_pairs[pair].add(exchange_id)
                    
                logger.info(f"‚úÖ {config['name']}: {len(pairs)} –ø–∞—Ä")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä {config['name']}: {e}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä
        self.active_pairs = set()
        for symbol, exchanges in all_pairs.items():
            # –ü–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ N –±–∏—Ä–∂–∞—Ö
            if len(exchanges) >= DYNAMIC_PAIRS_CONFIG['min_exchanges']:
                self.active_pairs.add(symbol)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
        if len(self.active_pairs) > DYNAMIC_PAIRS_CONFIG['max_pairs']:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø–æ–≤—ã–µ –ø–∞—Ä—ã
            priority_pairs = [
                'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 
                'XRP/USDT', 'DOGE/USDT', 'ADA/USDT', 'MATIC/USDT',
                'DOT/USDT', 'TRX/USDT', 'AVAX/USDT', 'SHIB/USDT',
                'LINK/USDT', 'UNI/USDT', 'ATOM/USDT', 'LTC/USDT',
                'ETC/USDT', 'XLM/USDT', 'APT/USDT', 'ARB/USDT'
            ]
            
            final_pairs = set()
            for pair in priority_pairs:
                if pair in self.active_pairs:
                    final_pairs.add(pair)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ –ª–∏–º–∏—Ç–∞
            for pair in self.active_pairs:
                if len(final_pairs) >= DYNAMIC_PAIRS_CONFIG['max_pairs']:
                    break
                final_pairs.add(pair)
            
            self.active_pairs = final_pairs
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.active_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.last_pair_update = time.time()
    
    async def _fetch_exchange_pairs(self, exchange_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å –±–∏—Ä–∂–∏"""
        if exchange_id not in EXCHANGES_CONFIG:
            logger.error(f"Exchange {exchange_id} not found in EXCHANGES_CONFIG")
            logger.error(f"Available exchanges: {list(EXCHANGES_CONFIG.keys())}")
            return []
        
        config = EXCHANGES_CONFIG[exchange_id]
        
        try:
            async with aiohttp.ClientSession() as session:
                if exchange_id == 'mexc':
                    url = f"{config['rest_url']}/api/v3/exchangeInfo"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data.get('symbols', []):
                            # MEXC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "1" = –∞–∫—Ç–∏–≤–µ–Ω
                            if symbol.get('status') == '1' and symbol.get('quoteAsset') == 'USDT':
                                base = symbol['baseAsset']
                                pairs.append(f"{base}/USDT")
                        return pairs[:100]
                        
                elif exchange_id == 'bybit':
                    url = f"{config['rest_url']}/v5/market/instruments-info?category=spot"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data['result']['list']:
                            if symbol['status'] == 'Trading' and 'USDT' in symbol['symbol']:
                                base = symbol['symbol'].replace('USDT', '')
                                pairs.append(f"{base}/USDT")
                        return pairs[:100]
                        
                elif exchange_id == 'huobi':
                    url = f"{config['rest_url']}/v1/common/symbols"
                    async with session.get(url) as resp:
                        data = await resp.json()
                        pairs = []
                        for symbol in data.get('data', []):
                            if symbol['state'] == 'online' and symbol['quote-currency'] == 'usdt':
                                pairs.append(f"{symbol['base-currency'].upper()}/USDT")
                        return pairs[:100]
                        
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                else:
                    return [
                        'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT',
                        'XRP/USDT', 'DOGE/USDT', 'ADA/USDT', 'MATIC/USDT'
                    ]
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä {exchange_id}: {e}")
            return []
    
    async def _on_orderbook_update(self, orderbook: OrderBook):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–∫–∞–Ω
            if orderbook.symbol in self.active_pairs:
                if orderbook.symbol not in self.orderbooks:
                    self.orderbooks[orderbook.symbol] = {}
                    
                self.orderbooks[orderbook.symbol][orderbook.exchange] = orderbook
                self.statistics['ws_messages'] += 1
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")
            self.statistics['errors'] += 1
    
    async def _run_websocket_manager(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            await self.ws_manager.start(list(self.active_pairs))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    
    async def _run_scanner(self):
        """–°–∫–∞–Ω–µ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞...")
        
        while self.running:
            try:
                self.scan_counter += 1
                opportunities_found = 0
                
                # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
                for symbol, exchanges_data in self.orderbooks.items():
                    if len(exchanges_data) < 2:
                        continue
                    
                    opportunity = self._check_inter_exchange_arbitrage(
                        symbol, exchanges_data
                    )
                    
                    if opportunity:
                        await self.opportunity_queue.put(opportunity)
                        opportunities_found += 1
                        
                        logger.info(
                            f"üíé –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} "
                            f"{opportunity.exchanges[0]}‚Üí{opportunity.exchanges[1]} "
                            f"–ü—Ä–∏–±—ã–ª—å: {opportunity.expected_profit_pct:.3f}%"
                        )
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.statistics['scans'] += 1
                if opportunities_found > 0:
                    self.statistics['opportunities_found'] += opportunities_found
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∞–º–∏
                await asyncio.sleep(TRADING_CONFIG['scan_interval'])
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")
                self.statistics['errors'] += 1
                await asyncio.sleep(5)
    
    def _check_inter_exchange_arbitrage(
        self, 
        symbol: str, 
        exchanges_data: Dict[str, OrderBook]
    ) -> Optional[ArbitrageOpportunity]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_bid = None
            best_bid_exchange = None
            best_bid_volume = 0
            best_ask = None
            best_ask_exchange = None
            best_ask_volume = 0
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            prices_info = []
            
            for exchange, orderbook in exchanges_data.items():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                if orderbook.age > TRADING_CONFIG['max_opportunity_age']:
                    logger.debug(f"  {exchange}: –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (–≤–æ–∑—Ä–∞—Å—Ç: {orderbook.age:.1f}s)")
                    continue
                
                if orderbook.best_bid and orderbook.best_ask:
                    prices_info.append(f"{exchange}: bid={orderbook.best_bid:.4f}, ask={orderbook.best_ask:.4f}")
                
                if orderbook.best_bid and (not best_bid or orderbook.best_bid > best_bid):
                    best_bid = orderbook.best_bid
                    best_bid_exchange = exchange
                    best_bid_volume = orderbook.get_depth_volume(1)['bid']
                
                if orderbook.best_ask and (not best_ask or orderbook.best_ask < best_ask):
                    best_ask = orderbook.best_ask
                    best_ask_exchange = exchange
                    best_ask_volume = orderbook.get_depth_volume(1)['ask']
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 100 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if hasattr(self, '_check_counter'):
                self._check_counter += 1
            else:
                self._check_counter = 1
                
            if self._check_counter % 100 == 0 and prices_info:
                logger.info(f"üìä {symbol} —Ü–µ–Ω—ã: {' | '.join(prices_info[:3])}")
            
            if not (best_bid and best_ask):
                if self._check_counter % 500 == 0:
                    logger.debug(f"  {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (bid={best_bid}, ask={best_ask})")
                return None
                
            if best_bid_exchange == best_ask_exchange:
                return None
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            spread_pct = (best_bid - best_ask) / best_ask * 100
            
            # –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º maker –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç
            # MEXC: 0% maker, Bybit: 0.01% maker, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º taker
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if best_ask_exchange in EXCHANGES_CONFIG:
                if best_ask_exchange == 'mexc':
                    buy_fee = EXCHANGES_CONFIG[best_ask_exchange]['fees']['maker'] * 100
                elif best_ask_exchange == 'bybit':
                    buy_fee = EXCHANGES_CONFIG[best_ask_exchange]['fees']['maker'] * 100
                else:
                    buy_fee = EXCHANGES_CONFIG[best_ask_exchange]['fees']['taker'] * 100
            else:
                # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –µ—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                buy_fee = 0.1  # 0.1% taker fee –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            if best_bid_exchange in EXCHANGES_CONFIG:
                if best_bid_exchange == 'mexc':
                    sell_fee = EXCHANGES_CONFIG[best_bid_exchange]['fees']['maker'] * 100
                elif best_bid_exchange == 'bybit':
                    sell_fee = EXCHANGES_CONFIG[best_bid_exchange]['fees']['maker'] * 100
                else:
                    sell_fee = EXCHANGES_CONFIG[best_bid_exchange]['fees']['taker'] * 100
            else:
                # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –µ—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ  
                sell_fee = 0.1  # 0.1% taker fee –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            total_fees = buy_fee + sell_fee
            
            # –£—á–µ—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞
            slippage = TRADING_CONFIG['slippage_tolerance'] * 100
            
            # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
            net_profit_pct = spread_pct - total_fees - slippage
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–ª–∏–∑–∫–∏—Ö –∫ –ø–æ—Ä–æ–≥—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            if spread_pct > 0:
                if self._check_counter % 50 == 0 or net_profit_pct > -0.1:
                    logger.info(f"üîç {symbol}: {best_ask_exchange}‚Üí{best_bid_exchange}")
                    logger.info(f"   –°–ø—Ä–µ–¥: {spread_pct:.4f}% (bid={best_bid:.4f}, ask={best_ask:.4f})")
                    logger.info(f"   –ö–æ–º–∏—Å—Å–∏–∏: {total_fees:.4f}% (–ø–æ–∫—É–ø–∫–∞={buy_fee:.3f}%, –ø—Ä–æ–¥–∞–∂–∞={sell_fee:.3f}%)")
                    logger.info(f"   –°–ª–∏–ø–ø–µ–¥–∂: {slippage:.3f}%")
                    logger.info(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}% (–ø–æ—Ä–æ–≥: {TRADING_CONFIG['min_profit_threshold']}%)")
                    logger.info(f"   –û–±—ä–µ–º—ã: bid={best_bid_volume:.2f}, ask={best_ask_volume:.2f}")
            
            if net_profit_pct < TRADING_CONFIG['min_profit_threshold']:
                return None
            
            # –ù–ê–ô–î–ï–ù–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!
            logger.warning(f"üéØ –ê–†–ë–ò–¢–†–ê–ñ –ù–ê–ô–î–ï–ù! {symbol}: {best_ask_exchange}‚Üí{best_bid_exchange}, –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}%")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            min_volume = min(best_bid_volume, best_ask_volume) * best_ask
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ USD
            position_size = min(
                min_volume * 0.1,  # 10% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
                1000  # –ú–∞–∫—Å–∏–º—É–º $1000
            )
            expected_profit_usd = position_size * net_profit_pct / 100
            
            return ArbitrageOpportunity(
                type='inter_exchange',
                path=[best_ask_exchange, best_bid_exchange],
                exchanges=[best_ask_exchange, best_bid_exchange],
                symbols=[symbol],
                prices={
                    f'{best_ask_exchange}_ask': best_ask,
                    f'{best_bid_exchange}_bid': best_bid
                },
                volumes={
                    best_ask_exchange: best_ask_volume,
                    best_bid_exchange: best_bid_volume
                },
                expected_profit_pct=net_profit_pct,
                expected_profit_usd=expected_profit_usd,
                min_volume=min_volume
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return None
    
    async def _run_executor(self):
        """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        logger.info("üíº –ó–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫...")
        
        while self.running:
            try:
                # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                opportunity = await asyncio.wait_for(
                    self.opportunity_queue.get(),
                    timeout=10
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏
                if not opportunity.is_fresh:
                    logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–ª–∞")
                    continue
                
                # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
                success = await self.trading_engine.execute_arbitrage(opportunity)
                
                if success:
                    self.statistics['trades_executed'] += 1
                    logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞")
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
                self.statistics['errors'] += 1
                await asyncio.sleep(1)
    
    async def _run_pair_updater(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if time.time() - self.last_pair_update > DYNAMIC_PAIRS_CONFIG['update_interval']:
                    logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                    try:
                        await self.discover_pairs()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—Ä: {e}")
                        import traceback
                        logger.error(f"Traceback: {traceback.format_exc()}")
                        raise
                    
                    if not self.active_pairs:
                        raise Exception("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
                    await self.ws_manager.stop()
                    await asyncio.sleep(2)
                    asyncio.create_task(
                        self.ws_manager.start(list(self.active_pairs))
                    )
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")
                await asyncio.sleep(300)
    
    async def _run_statistics(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            try:
                await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                runtime = (time.time() - self.statistics['start_time']) / 60
                ws_stats = self.ws_manager.get_statistics() if self.ws_manager else {}
                trading_stats = self.trading_engine.get_stats()
                
                logger.info("=" * 50)
                logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´")
                logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} –º–∏–Ω")
                logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.statistics['scans']}")
                logger.info(f"üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.statistics['opportunities_found']}")
                logger.info(f"üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.statistics['trades_executed']}")
                logger.info(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π: {self.statistics['ws_messages']}")
                logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.statistics['errors']}")
                
                if ws_stats:
                    logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –±–∏—Ä–∂: {len(ws_stats.get('connected', []))}")
                    
                logger.info(f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${trading_stats.get('total_profit_usd', 0):.2f} "
                          f"({trading_stats.get('total_profit_pct', 0):.3f}%)")
                logger.info(f"üì¶ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${trading_stats.get('total_volume', 0):.2f}")
                logger.info("=" * 50)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _print_final_statistics(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        runtime = (time.time() - self.statistics['start_time']) / 3600
        trading_stats = self.trading_engine.get_stats()
        
        logger.info("\n" + "=" * 60)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("=" * 60)
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.2f} —á–∞—Å–æ–≤")
        logger.info(f"üîç –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {self.statistics['scans']}")
        logger.info(f"üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {self.statistics['opportunities_found']}")
        logger.info(f"üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.statistics['trades_executed']}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {trading_stats.get('successful', 0)}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {trading_stats.get('failed', 0)}")
        logger.info(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π: {self.statistics['ws_messages']}")
        logger.info(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {self.statistics['errors']}")
        logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${trading_stats.get('total_profit_usd', 0):.2f}")
        logger.info(f"üìä –ü—Ä–∏–±—ã–ª—å %: {trading_stats.get('total_profit_pct', 0):.3f}%")
        logger.info(f"üì¶ –û–±—â–∏–π –æ–±—ä–µ–º: ${trading_stats.get('total_volume', 0):.2f}")
        logger.info("=" * 60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ProductionArbitrageBot()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def signal_handler(sig, frame):
        logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        asyncio.create_task(bot.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.start()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
