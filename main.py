"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –±–æ—Ç–∞
"""

import sys
import signal
import logging
import threading

import config
from htx_api import HtxApi
from arbitrage_strategy import TriangularArbitrageStrategy
from trade_logger import TradeLogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ graceful shutdown
stop_event = threading.Event()

class ArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""
    def __init__(self, trade_logger):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.trade_logger = trade_logger
        self.api = HtxApi(
            api_key=config.API_KEY,
            secret_key=config.SECRET_KEY,
            base_url=config.API_BASE_URL
        )
        self.strategy = TriangularArbitrageStrategy(
            api=self.api,
            logger=self.trade_logger,
            min_profit_threshold=config.MIN_PROFIT_THRESHOLD,
            position_size=config.POSITION_SIZE
        )

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è HTX")
        self.logger.info(f"üìä –†–µ–∂–∏–º: {'–î–ï–ú–û' if config.DEMO_MODE else '–†–ï–ê–õ–¨–ù–´–ô'}")
        self.trade_logger.log_start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Å–≤–æ–µ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –º–æ–≥ –∂–¥–∞—Ç—å stop_event
        strategy_thread = threading.Thread(target=self.strategy.run, daemon=True)
        strategy_thread.start()

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        self.logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if self.strategy:
            self.strategy.stop() # –ì–æ–≤–æ—Ä–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        self.trade_logger.log_end()

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    stop_event.set()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    trade_logger = TradeLogger()
    bot = ArbitrageBot(trade_logger)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    bot.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–¥–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    stop_event.wait() # –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –≤—ã–∑–æ–≤–∞ stop_event.set()

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    bot.stop()
    logging.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    main()
