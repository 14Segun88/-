"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –±–æ—Ç–∞
"""

import sys
import signal
import logging
import threading
import time

import config
from htx_api import HtxApi
from arbitrage_strategy import TriangularArbitrageStrategy
from htx_api import HtxApi
from trade_logger import TradeLogger


class ArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç–æ–º."""

    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.api = HtxApi(api_key=config.API_KEY, secret_key=config.SECRET_KEY, base_url=config.BASE_URL)
        self.trade_logger = TradeLogger()
        self.strategy = TriangularArbitrageStrategy(
            api=self.api,
            logger=self.trade_logger,
            min_profit_threshold=config.MIN_PROFIT_THRESHOLD,
            position_size=config.POSITION_SIZE,
            fee_rate=config.FEE_RATE
        )
        self.strategy_thread = None

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.strategy.start() # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º running = True
        
        self.strategy_thread = threading.Thread(target=self.strategy.run, daemon=True)
        self.strategy_thread.start()

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        self.logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if self.strategy:
            self.strategy.stop()
        if self.strategy_thread and self.strategy_thread.is_alive():
            self.strategy_thread.join()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ –ª–æ–≥–≥–µ—Ä
        if self.strategy:
            self.trade_logger.log_end(self.strategy.balance)


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É."""
    global bot
    if bot:
        bot.stop()
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    time.sleep(5) 
    exit(0)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    bot = ArbitrageBot()

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    bot.start()

    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ strategy_thread - –¥–µ–º–æ–Ω
        # –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º.
        # signal_handler –æ–±–µ—Å–ø–µ—á–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.
        while bot.strategy_thread.is_alive():
            time.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.")
    finally:
        if bot.strategy.running:
            bot.stop()
