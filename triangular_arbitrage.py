"""
üî∫ –ú–æ–¥—É–ª—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏
"""

import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class TriangularOpportunity:
    """–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    exchange: str
    path: List[str]  # –ù–∞–ø—Ä–∏–º–µ—Ä: ['BTC/USDT', 'ETH/BTC', 'ETH/USDT']
    direction: List[str]  # ['buy', 'sell', 'sell']
    prices: List[float]
    expected_profit_pct: float
    volume_usd: float
    timestamp: datetime
    
    def __str__(self):
        path_str = " ‚Üí ".join([f"{p.split('/')[0]}" for p in self.path])
        return f"üî∫ {self.exchange}: {path_str} ‚Üí USDT | Profit: {self.expected_profit_pct:.3f}%"

class TriangularArbitrageScanner:
    """–°–∫–∞–Ω–µ—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    
    def __init__(self):
        self.min_profit_pct = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.05%
        self.common_bases = ['USDT', 'USDC', 'BUSD', 'BTC', 'ETH', 'BNB']
        self.triangular_paths = []
        self.initialized = False
        
    def initialize_paths(self, available_pairs: List[str]) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –ø—É—Ç–∏"""
        self.triangular_paths = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä –ø–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
        pairs_by_base = {}
        pairs_by_quote = {}
        
        for pair in available_pairs:
            try:
                base, quote = pair.split('/')
                
                if quote not in pairs_by_base:
                    pairs_by_base[quote] = []
                pairs_by_base[quote].append((base, pair))
                
                if base not in pairs_by_quote:
                    pairs_by_quote[base] = []
                pairs_by_quote[base].append((quote, pair))
                
            except:
                continue
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
        for stable in ['USDT', 'USDC', 'BUSD']:
            if stable not in pairs_by_base:
                continue
                
            # –ü–∞—Ä—ã –≤–∏–¥–∞ XXX/USDT
            direct_pairs = pairs_by_base[stable]
            
            for base1, pair1 in direct_pairs:
                if base1 in ['BTC', 'ETH', 'BNB']:  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                    # –ò—â–µ–º –ø–∞—Ä—ã –≤–∏–¥–∞ YYY/BTC
                    if base1 in pairs_by_base:
                        for base2, pair2 in pairs_by_base[base1]:
                            if base2 != stable and base2 != base1:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –ø–∞—Ä—ã YYY/USDT
                                closing_pair = f"{base2}/{stable}"
                                if closing_pair in available_pairs:
                                    # –ù–∞—à–ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: USDT ‚Üí BTC ‚Üí YYY ‚Üí USDT
                                    path = {
                                        'pairs': [pair1, pair2, closing_pair],
                                        'path': [stable, base1, base2, stable],
                                        'directions': ['buy', 'buy', 'sell']
                                    }
                                    self.triangular_paths.append(path)
                                    
                                    # –û–±—Ä–∞—Ç–Ω—ã–π –ø—É—Ç—å
                                    reverse_path = {
                                        'pairs': [closing_pair, pair2, pair1],
                                        'path': [stable, base2, base1, stable],
                                        'directions': ['buy', 'sell', 'sell']
                                    }
                                    self.triangular_paths.append(reverse_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
        classic_triangles = [
            # BTC —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            {'pairs': ['BTC/USDT', 'ETH/BTC', 'ETH/USDT'], 'directions': ['buy', 'buy', 'sell']},
            {'pairs': ['ETH/USDT', 'ETH/BTC', 'BTC/USDT'], 'directions': ['buy', 'sell', 'sell']},
            
            # BNB —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            {'pairs': ['BNB/USDT', 'ETH/BNB', 'ETH/USDT'], 'directions': ['buy', 'buy', 'sell']},
            {'pairs': ['BNB/USDT', 'BTC/BNB', 'BTC/USDT'], 'directions': ['buy', 'buy', 'sell']},
            
            # –°—Ç–µ–π–±–ª–∫–æ–∏–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            {'pairs': ['USDC/USDT', 'BTC/USDC', 'BTC/USDT'], 'directions': ['buy', 'buy', 'sell']},
            {'pairs': ['BUSD/USDT', 'BTC/BUSD', 'BTC/USDT'], 'directions': ['buy', 'buy', 'sell']},
        ]
        
        for triangle in classic_triangles:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–∞—Ä
            if all(pair in available_pairs for pair in triangle['pairs']):
                path = triangle.copy()
                currencies = []
                for pair in triangle['pairs']:
                    base, quote = pair.split('/')
                    if not currencies:
                        currencies.append(quote)
                    currencies.append(base)
                path['path'] = currencies
                self.triangular_paths.append(path)
        
        self.initialized = True
        logger.info(f"üìê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.triangular_paths)} —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π")
    
    def calculate_triangular_profit(
        self,
        prices: Dict[str, float],
        path: Dict,
        commission_pct: float = 0.1
    ) -> Optional[float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        
        Args:
            prices: –°–ª–æ–≤–∞—Ä—å —Ü–µ–Ω {pair: price}
            path: –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –ø—É—Ç—å
            commission_pct: –ö–æ–º–∏—Å—Å–∏—è –≤ %
        
        Returns:
            –ü—Ä–∏–±—ã–ª—å –≤ % –∏–ª–∏ None –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ–ø—Ä–∏–±—ã–ª—å–Ω—ã–π
        """
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å 1 –µ–¥–∏–Ω–∏—Ü—ã –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
            amount = 1.0
            
            for i, (pair, direction) in enumerate(zip(path['pairs'], path['directions'])):
                if pair not in prices or prices[pair] <= 0:
                    return None
                    
                price = prices[pair]
                
                if direction == 'buy':
                    # –ü–æ–∫—É–ø–∞–µ–º base –∑–∞ quote
                    amount = amount / price
                else:
                    # –ü—Ä–æ–¥–∞–µ–º base –∑–∞ quote
                    amount = amount * price
                
                # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                amount *= (1 - commission_pct / 100)
            
            # –ü—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            profit_pct = (amount - 1) * 100
            
            return profit_pct if profit_pct > self.min_profit_pct else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏: {e}")
            return None
    
    def scan_opportunities(
        self,
        exchange: str,
        orderbooks: Dict[str, Dict],
        commission_pct: float = 0.1
    ) -> List[TriangularOpportunity]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∏—Ä–∂–µ
        
        Args:
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            orderbooks: –°–ª–æ–≤–∞—Ä—å –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤ {pair: orderbook}
            commission_pct: –ö–æ–º–∏—Å—Å–∏—è –±–∏—Ä–∂–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        """
        if not self.initialized:
            available_pairs = list(orderbooks.keys())
            self.initialize_paths(available_pairs)
        
        opportunities = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
        prices = {}
        for pair, orderbook in orderbooks.items():
            try:
                bids = orderbook.get('bids', [])
                asks = orderbook.get('asks', [])
                
                if bids and asks:
                    # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –º–µ–∂–¥—É –ª—É—á—à–∏–º –±–∏–¥–æ–º –∏ –∞—Å–∫–æ–º
                    prices[pair] = (bids[0][0] + asks[0][0]) / 2
            except:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –ø—É—Ç—å
        for path in self.triangular_paths:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–∞—Ä
            if not all(pair in prices for pair in path['pairs']):
                continue
            
            profit_pct = self.calculate_triangular_profit(prices, path, commission_pct)
            
            if profit_pct and profit_pct > self.min_profit_pct:
                opportunity = TriangularOpportunity(
                    exchange=exchange,
                    path=path['pairs'],
                    direction=path['directions'],
                    prices=[prices[pair] for pair in path['pairs']],
                    expected_profit_pct=profit_pct,
                    volume_usd=100,  # –ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                    timestamp=datetime.now()
                )
                opportunities.append(opportunity)
                
                logger.info(f"üî∫ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂: {opportunity}")
        
        return opportunities
    
    def optimize_volume(
        self,
        opportunity: TriangularOpportunity,
        orderbooks: Dict[str, Dict],
        max_volume_usd: float = 1000
    ) -> float:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏
        
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD
        """
        try:
            min_available = max_volume_usd
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
            for pair, direction in zip(opportunity.path, opportunity.direction):
                if pair not in orderbooks:
                    return 0
                    
                orderbook = orderbooks[pair]
                
                if direction == 'buy':
                    # –ü–æ–∫—É–ø–∞–µ–º –ø–æ –∞—Å–∫–∞–º
                    orders = orderbook.get('asks', [])
                else:
                    # –ü—Ä–æ–¥–∞–µ–º –ø–æ –±–∏–¥–∞–º
                    orders = orderbook.get('bids', [])
                
                if not orders:
                    return 0
                
                # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
                available_base = orders[0][1] if len(orders[0]) > 1 else 0
                available_usd = available_base * orders[0][0]
                
                min_available = min(min_available, available_usd)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return min(min_available * 0.5, max_volume_usd)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–º–∞: {e}")
            return 100  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º

class TriangularExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"""
    
    def __init__(self, trading_engine):
        self.trading_engine = trading_engine
        self.executing = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        
    async def execute_triangular(
        self,
        opportunity: TriangularOpportunity
    ) -> bool:
        """
        –ò—Å–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            logger.info(f"üî∫ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {opportunity}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ
            key = f"{opportunity.exchange}:{':'.join(opportunity.path)}"
            if key in self.executing:
                logger.warning("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                return False
            
            self.executing[key] = True
            
            try:
                # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≥—É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
                amount = opportunity.volume_usd
                
                for i, (pair, direction, price) in enumerate(
                    zip(opportunity.path, opportunity.direction, opportunity.prices)
                ):
                    logger.info(f"  –®–∞–≥ {i+1}: {direction} {pair} @ {price}")
                    
                    # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    if self.trading_engine.demo_mode:
                        base, quote = pair.split('/')
                        if direction == 'buy':
                            amount = amount / price * 0.999  # –° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                        else:
                            amount = amount * price * 0.999
                        
                        logger.info(f"    [DEMO] –†–µ–∑—É–ª—å—Ç–∞—Ç: {amount:.4f} {quote if direction == 'buy' else base}")
                    else:
                        # –†–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ trading_engine
                        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
                        pass
                
                # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                final_profit_pct = (amount / opportunity.volume_usd - 1) * 100
                logger.info(f"‚úÖ –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏–±—ã–ª—å: {final_profit_pct:.3f}%")
                
                return True
                
            finally:
                del self.executing[key]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return False
