#!/usr/bin/env python3
"""
Multi-Exchange Arbitrage Bot with 7 Exchanges
WebSocket + Proxy support for geo-blocking bypass
"""

import asyncio
import ccxt.pro as ccxt
import logging
import json
import time
from datetime import datetime
from typing import Dict, List, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('multi_exchange_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
PROXY_CONFIG = {
    'http': 'http://172.31.128.1:2080',  # NekoBox proxy
    'https': 'http://172.31.128.1:2080'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 7 –±–∏—Ä–∂ —Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –ø–æ $100
EXCHANGE_CONFIG = {
    'MEXC': {
        'apiKey': '',  # –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        'secret': '',
        'enableWS': True,
        'useProxy': False,  # MEXC –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∫—Å–∏
        'deposit': 100,
        'fees': {'maker': 0.0, 'taker': 0.001}  # 0% maker, 0.1% taker
    },
    'binance': {
        'apiKey': 'MvV3eNsenTdNinmtt1hXVOjNg1VsmjtNY4iZpqddN6f03DuX1GB8DuuKPOiUSOEy',
        'secret': 'XcDJGf39tlsl4G8qUu86wQqpEoqZgRfrl5yS8j7yiampncgrJ05PxQYUJYdUyPmG',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.00075, 'taker': 0.00075}  # –° BNB —Å–∫–∏–¥–∫–æ–π
    },
    'bybit': {
        'apiKey': 'YOUR_BYBIT_API_KEY',  # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á
        'secret': 'YOUR_BYBIT_SECRET',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.0001, 'taker': 0.0006}
    },
    'gateio': {
        'apiKey': 'YOUR_GATEIO_API_KEY',  # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á
        'secret': 'YOUR_GATEIO_SECRET',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.002, 'taker': 0.002}
    },
    'bitget': {
        'apiKey': 'YOUR_BITGET_API_KEY',  # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á
        'secret': 'YOUR_BITGET_SECRET',
        'passphrase': 'YOUR_BITGET_PASSPHRASE',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.001, 'taker': 0.001}
    },
    'okx': {
        'apiKey': 'YOUR_OKX_API_KEY',  # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á
        'secret': 'YOUR_OKX_SECRET',
        'passphrase': 'YOUR_OKX_PASSPHRASE',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.0008, 'taker': 0.001}
    },
    'kucoin': {
        'apiKey': 'YOUR_KUCOIN_API_KEY',  # TODO: –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á
        'secret': 'YOUR_KUCOIN_SECRET',
        'password': 'YOUR_KUCOIN_PASSWORD',
        'enableWS': True,
        'useProxy': True,  # –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        'deposit': 100,
        'fees': {'maker': 0.001, 'taker': 0.001}
    }
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
ARBITRAGE_CONFIG = {
    'min_profit_threshold': 0.0001,  # 0.01% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) 0.05%
    'position_size': 50,  # $50 –Ω–∞ —Å–¥–µ–ª–∫—É (–¥–ª—è 7 –±–∏—Ä–∂)
    'max_positions': 14,  # –î–æ 2 –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂—É
    'cooldown_seconds': 30,  # –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
    'total_capital': 700,  # $100 * 7 –±–∏—Ä–∂
    'check_liquidity': True,
    'min_volume_24h': 10000
}

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –º–µ–º-—Ç–æ–∫–µ–Ω—ã)
TRADING_PAIRS = [
    'BTC/USDT',
    'ETH/USDT', 
    'BNB/USDT',
    'SOL/USDT',
    'XRP/USDT',
    'DOGE/USDT',
    'ADA/USDT',
    'AVAX/USDT',
    'SHIB/USDT',
    'DOT/USDT',
    'TRX/USDT',
    'POL/USDT',  # –ó–∞–º–µ–Ω–∏–ª–∏ MATIC –Ω–∞ POL
    'UNI/USDT',
    'LTC/USDT',
    'PEPE/USDT',  # –ú–µ–º-—Ç–æ–∫–µ–Ω —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    'WIF/USDT',   # Dogwifhat - –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π
    'BONK/USDT',  # Bonk - –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π
    'FLOKI/USDT', # Floki - –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π
    'ARB/USDT',   # Arbitrum
    'OP/USDT',    # Optimism
    'INJ/USDT',   # Injective
    'SEI/USDT',   # Sei
    'SUI/USDT',   # Sui
    'APT/USDT'    # Aptos
]

class MultiExchangeArbitrageBot:
    def __init__(self):
        self.exchanges = {}
        self.prices = {}
        self.balances = {}
        self.opportunities = []
        self.trades = []
        self.last_trades = {}
        self.ws_connections = {}
        self.running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö 7 –±–∏—Ä–∂"""
        logger.info("=" * 70)
        logger.info("üöÄ –ó–ê–ü–£–°–ö MULTI-EXCHANGE ARBITRAGE BOT")
        logger.info("=" * 70)
        
        total_deposit = 0
        active_exchanges = []
        
        for exchange_id, config in EXCHANGE_CONFIG.items():
            try:
                logger.info(f"\nüì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange_id.upper()}...")
                
                exchange_config = {
                    'enableRateLimit': True,
                    'rateLimit': 50,
                    'options': {
                        'defaultType': 'spot',
                        'adjustForTimeDifference': True
                    }
                }
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if config.get('useProxy'):
                    exchange_config['proxies'] = PROXY_CONFIG
                    exchange_config['options']['createMarketBuyOrderRequiresPrice'] = False
                    logger.info(f"   üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
                has_api_keys = False
                if config.get('apiKey') and not config['apiKey'].startswith('YOUR_'):
                    exchange_config['apiKey'] = config['apiKey']
                    exchange_config['secret'] = config['secret']
                    has_api_keys = True
                    
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–∏—Ä–∂
                    if exchange_id == 'okx' and config.get('passphrase'):
                        exchange_config['password'] = config['passphrase']
                    elif exchange_id == 'kucoin' and config.get('password'):
                        exchange_config['password'] = config['password']
                    elif exchange_id == 'bitget' and config.get('passphrase'):
                        exchange_config['password'] = config['passphrase']
                    
                    logger.info(f"   üîë API –∫–ª—é—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    logger.info(f"   ‚ö†Ô∏è  –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ—Ç API –∫–ª—é—á–µ–π)")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏—Ä–∂–∏
                exchange_class = getattr(ccxt, exchange_id)
                exchange = exchange_class(exchange_config)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await exchange.load_markets()
                
                self.exchanges[exchange_id] = exchange
                self.balances[exchange_id] = config.get('deposit', 0)
                total_deposit += config.get('deposit', 0)
                active_exchanges.append(exchange_id)
                
                logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
                logger.info(f"   üí∞ –î–µ–ø–æ–∑–∏—Ç: ${config.get('deposit', 0)}")
                logger.info(f"   üìä –ö–æ–º–∏—Å—Å–∏–∏: Maker {config['fees']['maker']*100:.3f}%, Taker {config['fees']['taker']*100:.3f}%")
                logger.info(f"   üîå WebSocket: {'–í–∫–ª—é—á–µ–Ω' if config.get('enableWS') else '–í—ã–∫–ª—é—á–µ–Ω'}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if config.get('enableWS') and has_api_keys:
                    self.ws_connections[exchange_id] = True
                    logger.info(f"   üì° WebSocket –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_id}: {e}")
                if "451" in str(e):
                    logger.error(f"   üö´ –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ proxy")
                continue
        
        logger.info("\n" + "=" * 70)
        logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {len(active_exchanges)}/7")
        logger.info(f"   üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${total_deposit}")
        logger.info(f"   üìà –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(TRADING_PAIRS)}")
        logger.info(f"   üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {ARBITRAGE_CONFIG['min_profit_threshold']}%")
        logger.info(f"   üíµ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${ARBITRAGE_CONFIG['position_size']}")
        logger.info("=" * 70 + "\n")
        
        if len(active_exchanges) < 2:
            logger.error("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!")
            return False
            
        return True
    
    async def watch_ticker_ws(self, exchange_id: str, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ WebSocket"""
        if exchange_id not in self.ws_connections:
            return
            
        exchange = self.exchanges[exchange_id]
        
        while self.running:
            try:
                ticker = await exchange.watch_ticker(symbol)
                
                if symbol not in self.prices:
                    self.prices[symbol] = {}
                
                self.prices[symbol][exchange_id] = {
                    'bid': ticker.get('bid'),
                    'ask': ticker.get('ask'),
                    'volume': ticker.get('quoteVolume', 0),
                    'timestamp': time.time()
                }
                
            except Exception as e:
                if "not supported" in str(e).lower():
                    # Fallback –Ω–∞ REST API
                    await self.fetch_ticker_rest(exchange_id, symbol)
                else:
                    logger.error(f"WS –æ—à–∏–±–∫–∞ {exchange_id} {symbol}: {e}")
                await asyncio.sleep(1)
    
    async def fetch_ticker_rest(self, exchange_id: str, symbol: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ REST API"""
        try:
            exchange = self.exchanges[exchange_id]
            ticker = await exchange.fetch_ticker(symbol)
            
            if symbol not in self.prices:
                self.prices[symbol] = {}
            
            self.prices[symbol][exchange_id] = {
                'bid': ticker.get('bid'),
                'ask': ticker.get('ask'),
                'volume': ticker.get('quoteVolume', 0),
                'timestamp': time.time()
            }
            
        except Exception as e:
            logger.debug(f"REST –æ—à–∏–±–∫–∞ {exchange_id} {symbol}: {e}")
    
    async def collect_prices(self):
        """–°–±–æ—Ä —Ü–µ–Ω —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂"""
        while self.running:
            tasks = []
            
            for symbol in TRADING_PAIRS:
                for exchange_id in self.exchanges:
                    if exchange_id in self.ws_connections:
                        # WebSocket –ø–æ–¥–ø–∏—Å–∫–∞
                        tasks.append(self.watch_ticker_ws(exchange_id, symbol))
                    else:
                        # REST API –∑–∞–ø—Ä–æ—Å
                        tasks.append(self.fetch_ticker_rest(exchange_id, symbol))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            await self.check_arbitrage_opportunities()
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            await asyncio.sleep(1)
    
    async def check_arbitrage_opportunities(self):
        """–ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–∂–¥—É 7 –±–∏—Ä–∂–∞–º–∏"""
        opportunities = []
        
        for symbol in TRADING_PAIRS:
            if symbol not in self.prices:
                continue
            
            prices = self.prices[symbol]
            active_exchanges = [(ex, p) for ex, p in prices.items() 
                              if p.get('bid') and p.get('ask') and 
                              time.time() - p.get('timestamp', 0) < 5]
            
            if len(active_exchanges) < 2:
                continue
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            for buy_ex, buy_price in active_exchanges:
                for sell_ex, sell_price in active_exchanges:
                    if buy_ex == sell_ex:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–µ –ø–æ–∫—É–ø–∫–∏
                    if self.balances.get(buy_ex, 0) < ARBITRAGE_CONFIG['position_size']:
                        continue
                    
                    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                    buy_total = buy_price['ask']
                    sell_total = sell_price['bid']
                    
                    if sell_total <= buy_total:
                        continue
                    
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                    buy_fee = EXCHANGE_CONFIG[buy_ex]['fees']['taker']
                    sell_fee = EXCHANGE_CONFIG[sell_ex]['fees']['maker']
                    
                    gross_profit = ((sell_total / buy_total) - 1) * 100
                    net_profit = gross_profit - (buy_fee + sell_fee) * 100
                    
                    if net_profit >= ARBITRAGE_CONFIG['min_profit_threshold']:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
                        route_key = f"{symbol}:{buy_ex}->{sell_ex}"
                        if route_key in self.last_trades:
                            if time.time() - self.last_trades[route_key] < ARBITRAGE_CONFIG['cooldown_seconds']:
                                continue
                        
                        opportunities.append({
                            'symbol': symbol,
                            'buy_exchange': buy_ex,
                            'sell_exchange': sell_ex,
                            'buy_price': buy_total,
                            'sell_price': sell_total,
                            'gross_profit': gross_profit,
                            'net_profit': net_profit,
                            'position_size': ARBITRAGE_CONFIG['position_size'],
                            'expected_profit_usd': net_profit * ARBITRAGE_CONFIG['position_size'] / 100,
                            'timestamp': datetime.now()
                        })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
        opportunities.sort(key=lambda x: x['net_profit'], reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        self.opportunities = opportunities[:ARBITRAGE_CONFIG['max_positions']]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏
        for opp in self.opportunities[:3]:  # –¢–æ–ø-3 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            await self.execute_arbitrage(opp)
    
    async def execute_arbitrage(self, opportunity: dict):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        symbol = opportunity['symbol']
        buy_ex = opportunity['buy_exchange']
        sell_ex = opportunity['sell_exchange']
        amount = opportunity['position_size']
        
        logger.info("\n" + "üéØ" * 30)
        logger.info(f"üöÄ –ê–†–ë–ò–¢–†–ê–ñ: {symbol}")
        logger.info(f"   üìç –ú–∞—Ä—à—Ä—É—Ç: {buy_ex.upper()} ‚Üí {sell_ex.upper()}")
        logger.info(f"   üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity['net_profit']:.3f}%")
        logger.info(f"   üíµ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: ${opportunity['expected_profit_usd']:.2f}")
        logger.info(f"   üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${amount}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º cooldown
        route_key = f"{symbol}:{buy_ex}->{sell_ex}"
        self.last_trades[route_key] = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
        """
        # –†–ï–ê–õ–¨–ù–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï:
        try:
            # –ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            buy_order = await self.exchanges[buy_ex].create_market_buy_order(
                symbol, amount / opportunity['buy_price']
            )
            logger.info(f"   ‚úÖ –ö—É–ø–ª–µ–Ω–æ –Ω–∞ {buy_ex}: {buy_order['id']}")
            
            # –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
            sell_order = await self.exchanges[sell_ex].create_market_sell_order(
                symbol, amount / opportunity['buy_price']
            )
            logger.info(f"   ‚úÖ –ü—Ä–æ–¥–∞–Ω–æ –Ω–∞ {sell_ex}: {sell_order['id']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            self.balances[buy_ex] -= amount
            self.balances[sell_ex] += amount * (1 + opportunity['net_profit']/100)
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
        """
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ
        self.balances[buy_ex] -= amount
        self.balances[sell_ex] += amount * (1 + opportunity['net_profit']/100)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            **opportunity,
            'status': 'simulated',  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ 'executed' –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            'execution_time': datetime.now()
        }
        self.trades.append(trade)
        
        logger.info(f"   ‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)")
        logger.info("üéØ" * 30 + "\n")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        await self.save_trades()
        
        return True
    
    async def save_trades(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open('multi_exchange_trades.json', 'w') as f:
                json.dump([{
                    'symbol': t['symbol'],
                    'route': f"{t['buy_exchange']} ‚Üí {t['sell_exchange']}",
                    'net_profit': f"{t['net_profit']:.3f}%",
                    'profit_usd': f"${t['expected_profit_usd']:.2f}",
                    'timestamp': t['timestamp'].isoformat() if isinstance(t['timestamp'], datetime) else t['timestamp']
                } for t in self.trades], f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
    
    async def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        while self.running:
            await asyncio.sleep(30)
            
            active_prices = sum(1 for s in self.prices.values() 
                              for p in s.values() 
                              if time.time() - p.get('timestamp', 0) < 10)
            
            total_profit = sum(t.get('expected_profit_usd', 0) for t in self.trades)
            
            logger.info("\n" + "=" * 70)
            logger.info("üìä –°–¢–ê–¢–£–° –ë–û–¢–ê:")
            logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now()}")
            logger.info(f"   üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: {active_prices}")
            logger.info(f"   üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(self.opportunities)}")
            logger.info(f"   üìà –°–¥–µ–ª–æ–∫: {len(self.trades)}")
            logger.info(f"   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
            
            # –ë–∞–ª–∞–Ω—Å—ã –ø–æ –±–∏—Ä–∂–∞–º
            logger.info("   üíº –ë–∞–ª–∞–Ω—Å—ã:")
            for ex, balance in self.balances.items():
                if ex in self.exchanges:
                    logger.info(f"      {ex.upper()}: ${balance:.2f}")
            
            # –õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if self.opportunities:
                logger.info("   üèÜ –¢–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
                for i, opp in enumerate(self.opportunities[:3], 1):
                    logger.info(f"      {i}. {opp['symbol']}: {opp['buy_exchange']}‚Üí{opp['sell_exchange']} ({opp['net_profit']:.3f}%)")
            
            logger.info("=" * 70 + "\n")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = [
            self.collect_prices(),
            self.print_status()
        ]
        
        try:
            logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            self.running = False
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for exchange in self.exchanges.values():
                await exchange.close()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_profit = sum(t.get('expected_profit_usd', 0) for t in self.trades)
            logger.info("\n" + "=" * 70)
            logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"   üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.trades)}")
            logger.info(f"   üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")
            logger.info(f"   ‚è±Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now()}")
            logger.info("=" * 70)

async def main():
    bot = MultiExchangeArbitrageBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())
