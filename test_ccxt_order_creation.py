#!/usr/bin/env python3
"""
–¢–µ—Å—Ç CCXT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ OKX, Bitget, Phemex
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ demo-–æ—Ä–¥–µ—Ä–æ–≤
"""

import asyncio
import logging
from exchange_connector import ExchangeConnector
from production_config import TRADING_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-12s | %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger('CCXT_Test')

async def test_ccxt_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CCXT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CCXT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –≤ demo —Ä–µ–∂–∏–º–µ
    connector = ExchangeConnector(mode='demo')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –±–∏—Ä–∂–∏ –∏ –ø–∞—Ä—ã
    test_exchanges = ['okx', 'bitget', 'phemex']
    test_pairs = ['BTC/USDT', 'ETH/USDT']
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
        await connector.initialize(test_exchanges)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        connected_exchanges = []
        for exchange_id in test_exchanges:
            if connector.is_connected.get(exchange_id, False):
                connected_exchanges.append(exchange_id)
                logger.info(f"‚úÖ {exchange_id.upper()}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è {exchange_id.upper()}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ")
        
        if not connected_exchanges:
            logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –±–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤:")
        for exchange_id in connected_exchanges:
            try:
                balance = await connector.fetch_balance(exchange_id)
                if balance:
                    usdt_balance = balance.get('USDT', {})
                    logger.info(f"üí∞ {exchange_id.upper()} USDT: {usdt_balance.get('free', 0):.2f}")
                else:
                    logger.warning(f"‚ö†Ô∏è {exchange_id.upper()}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            except Exception as e:
                logger.error(f"‚ùå {exchange_id.upper()} –±–∞–ª–∞–Ω—Å –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è orderbook
        logger.info("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ orderbook:")
        orderbook_data = {}
        for exchange_id in connected_exchanges:
            orderbook_data[exchange_id] = {}
            for pair in test_pairs:
                try:
                    orderbook = await connector.fetch_orderbook(exchange_id, pair)
                    if orderbook and orderbook.get('bids') and orderbook.get('asks'):
                        best_bid = orderbook['bids'][0][0]
                        best_ask = orderbook['asks'][0][0]
                        spread = ((best_ask - best_bid) / best_ask) * 100
                        orderbook_data[exchange_id][pair] = {'bid': best_bid, 'ask': best_ask, 'spread': spread}
                        logger.info(f"üìä {exchange_id.upper()} {pair}: bid={best_bid:.6f}, ask={best_ask:.6f}, spread={spread:.3f}%")
                    else:
                        logger.warning(f"‚ö†Ô∏è {exchange_id.upper()} {pair}: –ü—É—Å—Ç–æ–π orderbook")
                except Exception as e:
                    logger.error(f"‚ùå {exchange_id.upper()} {pair} orderbook: {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è maker –æ—Ä–¥–µ—Ä–æ–≤
        logger.info("\nüí° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ maker —Ü–µ–Ω:")
        for exchange_id in connected_exchanges:
            for pair in test_pairs:
                if pair in orderbook_data.get(exchange_id, {}):
                    try:
                        # –¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ maker —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                        buy_price = await connector.calculate_maker_price(exchange_id, pair, 'buy')
                        if buy_price:
                            logger.info(f"üí° {exchange_id.upper()} {pair} BUY maker price: {buy_price:.6f}")
                        
                        # –¢–µ—Å—Ç —Ä–∞—Å—á—ë—Ç–∞ maker —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                        sell_price = await connector.calculate_maker_price(exchange_id, pair, 'sell')
                        if sell_price:
                            logger.info(f"üí° {exchange_id.upper()} {pair} SELL maker price: {sell_price:.6f}")
                    except Exception as e:
                        logger.error(f"‚ùå {exchange_id.upper()} {pair} maker price: {e}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è demo –æ—Ä–¥–µ—Ä–æ–≤ (–Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã)
        logger.info("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è demo –æ—Ä–¥–µ—Ä–æ–≤:")
        test_amount = 0.001  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for exchange_id in connected_exchanges[:1]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∏—Ä–∂–µ
            for pair in test_pairs[:1]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
                if pair in orderbook_data.get(exchange_id, {}):
                    try:
                        # –¢–µ—Å—Ç market –æ—Ä–¥–µ—Ä–∞
                        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ MARKET buy –æ—Ä–¥–µ—Ä–∞: {exchange_id.upper()} {pair}")
                        market_order = await connector.create_order(
                            exchange_id=exchange_id,
                            symbol=pair,
                            side='buy',
                            amount=test_amount,
                            order_type='market',
                            use_maker=False
                        )
                        
                        if market_order:
                            logger.info(f"‚úÖ Market –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {market_order['id']}")
                            if 'fee' in market_order:
                                fee_info = market_order['fee']
                                logger.info(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee_info.get('cost', 0):.6f} {fee_info.get('currency', 'USDT')} ({fee_info.get('type', 'taker')})")
                        else:
                            logger.warning(f"‚ö†Ô∏è Market –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
                        
                        # –¢–µ—Å—Ç maker –æ—Ä–¥–µ—Ä–∞
                        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ LIMIT maker –æ—Ä–¥–µ—Ä–∞: {exchange_id.upper()} {pair}")
                        limit_order = await connector.create_order(
                            exchange_id=exchange_id,
                            symbol=pair,
                            side='buy',
                            amount=test_amount,
                            order_type='limit',
                            use_maker=True
                        )
                        
                        if limit_order:
                            logger.info(f"‚úÖ Limit –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {limit_order['id']} –ø–æ —Ü–µ–Ω–µ {limit_order.get('price', 'N/A')}")
                            if 'fee' in limit_order:
                                fee_info = limit_order['fee']
                                logger.info(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fee_info.get('cost', 0):.6f} {fee_info.get('currency', 'USDT')} ({fee_info.get('type', 'maker')})")
                                if 'maker_savings' in limit_order:
                                    logger.info(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è maker: {limit_order['maker_savings']:.4f}%")
                        else:
                            logger.warning(f"‚ö†Ô∏è Limit –æ—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {exchange_id.upper()} {pair}: {e}")
        
        logger.info("\n‚úÖ –¢–µ—Å—Ç CCXT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for exchange in connector.exchanges.values():
            try:
                await exchange.close()
            except:
                pass

if __name__ == "__main__":
    asyncio.run(test_ccxt_integration())
