#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import asyncio
import sys
import demo_keys  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –∫–ª—é—á–∏
from mega_arbitrage_bot import MegaArbitrageBot

async def test_run():
    print('='*60)
    print('üöÄ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê')
    print('='*60)
    
    try:
        bot = MegaArbitrageBot()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        print('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:')
        print(f'  ‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä: {"‚úÖ" if bot.risk_manager else "‚ùå"}')
        print(f'  ‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤: {"‚úÖ" if bot.order_executor else "‚ùå"}')
        print(f'  ‚Ä¢ Paper Trading: ‚úÖ')
        print(f'  ‚Ä¢ CSV –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ')
        print(f'  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bot.paper_start_balance}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ä–∂–∏
        print('\nüìä –°–¢–ê–¢–£–° –ë–ò–†–ñ:')
        for exchange in ['mexc', 'binance', 'okx', 'bybit', 'kucoin']:
            status = '‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if hasattr(bot, exchange) else '‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º'
            print(f'  ‚Ä¢ {exchange.upper()}: {status}')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        print('\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤...')
        await bot.load_all_markets()
        print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(bot.trading_pairs)}')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
        print('\nüü¢ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê (5 —Å–µ–∫—É–Ω–¥)...')
        print('    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ —Ü–µ–Ω –∏ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...\n')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –±–æ—Ç–∞
        bot_task = asyncio.create_task(bot.run_bot())
        
        # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        print('\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...')
        bot.is_running = False
        bot_task.cancel()
        try:
            await bot_task
        except asyncio.CancelledError:
            pass
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í–û–ì–û –ó–ê–ü–£–°–ö–ê:')
        print(f'  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {bot.scanner_status.get("prices_updated", 0)}')
        print(f'  ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–∫–∞–Ω–æ–≤: {bot.scanner_status.get("scans_performed", 0)}')  
        print(f'  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {bot.scanner_status.get("opportunities_found", 0)}')
        print(f'  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö WebSocket: {sum(1 for v in bot.ws_connected.values() if v)}')
        
        # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        print('\nüéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò:')
        score = 0
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if bot.risk_manager:
            score += 1
            checks.append('‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä')
        else:
            checks.append('‚ùå –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä')
            
        if bot.order_executor:
            score += 1
            checks.append('‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤')
        else:
            checks.append('‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤')
            
        if bot.trading_pairs:
            score += 1
            checks.append('‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        else:
            checks.append('‚ùå –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            
        if bot.scanner_status.get("prices_updated", 0) > 0:
            score += 1
            checks.append('‚úÖ –°–±–æ—Ä —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç')
        else:
            checks.append('‚ö†Ô∏è –°–±–æ—Ä —Ü–µ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω')
            
        # Paper trading –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        score += 1
        checks.append('‚úÖ Paper Trading –≥–æ—Ç–æ–≤')
        
        # CSV –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        score += 1
        checks.append('‚úÖ CSV –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        score += 1
        checks.append('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')
        
        # WebSocket
        if any(bot.ws_connected.values()):
            score += 1
            checks.append('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
        else:
            checks.append('‚ö†Ô∏è WebSocket –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã')
            
        # –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        score += 1
        checks.append('‚úÖ –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–¥–µ–º–æ —Ä–µ–∂–∏–º)
        score += 1
        checks.append('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–º–æ —Ä–µ–∂–∏–º')
        
        for check in checks:
            print(f'  {check}')
        
        print(f'\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {score}/10')
        
        if score >= 8:
            print('‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –î–ï–ú–û –¢–û–†–ì–û–í–õ–ï!')
        elif score >= 6:
            print('‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
        else:
            print('‚ùå –ë–æ—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
        
        await bot.close()
        print('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!')
        
    except Exception as e:
        print(f'\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}')
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == '__main__':
    exit_code = asyncio.run(test_run())
    sys.exit(exit_code)
