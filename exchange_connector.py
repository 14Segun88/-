#!/usr/bin/env python3
"""
Exchange Connector - –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–∞–º–∏ —á–µ—Ä–µ–∑ CCXT
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7 –±–∏—Ä–∂ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∏ –¥–µ–º–æ —Å—á–µ—Ç–∞–º–∏
"""

import ccxt
import asyncio
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import os
from dotenv import load_dotenv
import time

load_dotenv('config.env')
logger = logging.getLogger('ExchangeConnector')

@dataclass
class ExchangeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏—Ä–∂–∏"""
    exchange_id: str
    testnet: bool = False
    api_key: str = None
    api_secret: str = None
    passphrase: str = None
    demo_balance: float = 100.0  # $100 –Ω–∞ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ
    real_fees: Dict = None

class ExchangeConnector:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö 7 –±–∏—Ä–∂"""
    
    # –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ë–ï–ó —Å–∫–∏–¥–æ–∫ (taker fees)
    REAL_FEES = {
        'mexc': {'maker': 0.002, 'taker': 0.002},      # 0.2% –±–µ–∑ —Å–∫–∏–¥–æ–∫
        'bybit': {'maker': 0.001, 'taker': 0.001},     # 0.1% –±–µ–∑ VIP
        'huobi': {'maker': 0.002, 'taker': 0.002},     # 0.2% —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        'binance': {'maker': 0.001, 'taker': 0.001},   # 0.1% –±–µ–∑ BNB
        'okx': {'maker': 0.001, 'taker': 0.0015},      # 0.1-0.15% —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        'kucoin': {'maker': 0.001, 'taker': 0.001},    # 0.1% –±–µ–∑ KCS
        'kraken': {'maker': 0.0016, 'taker': 0.0026}   # 0.16-0.26% —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    }
    
    # Testnet/Demo endpoints –≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã
    TESTNET_URLS = {
        'binance': {
            'apiKey': os.getenv('BINANCE_TESTNET_API_KEY', ''),
            'secret': os.getenv('BINANCE_TESTNET_API_SECRET', ''),
            'test': True,
            'options': {
                'defaultType': 'spot',
                'adjustForTimeDifference': True
            }
        },
        'bybit': {
            'apiKey': os.getenv('BYBIT_TESTNET_API_KEY', ''),
            'secret': os.getenv('BYBIT_TESTNET_API_SECRET', ''),
            'test': True,
            'urls': {
                'api': {
                    'public': 'https://api-testnet.bybit.com',
                    'private': 'https://api-testnet.bybit.com'
                }
            }
        },
        'okx': {
            'apiKey': os.getenv('OKX_DEMO_API_KEY', ''),
            'secret': os.getenv('OKX_DEMO_API_SECRET', ''),
            'passphrase': os.getenv('OKX_DEMO_PASSPHRASE', ''),
            'test': True,
            'urls': {
                'api': 'https://www.okx.com',  # OKX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥ x-simulated-trading
            },
            'options': {
                'defaultType': 'spot',
                'sandboxMode': True
            }
        },
        'kucoin': {
            'apiKey': os.getenv('KUCOIN_SANDBOX_API_KEY', ''),
            'secret': os.getenv('KUCOIN_SANDBOX_API_SECRET', ''),
            'passphrase': os.getenv('KUCOIN_SANDBOX_PASSPHRASE', ''),
            'test': True,
            'urls': {
                'api': {
                    'public': 'https://openapi-sandbox.kucoin.com',
                    'private': 'https://openapi-sandbox.kucoin.com'
                }
            }
        }
    }
    
    def __init__(self, mode: str = 'demo'):
        """
        Args:
            mode: 'demo' –¥–ª—è –¥–µ–º–æ —Å—á–µ—Ç–æ–≤, 'real' –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö
        """
        self.mode = mode
        self.exchanges = {}
        self.balances = {}
        self.orderbooks = {}
        self.is_connected = {}
        
        # –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂
        self.proxy = None
        if os.getenv('HTTP_PROXY'):
            self.proxy = {
                'http': os.getenv('HTTP_PROXY'),
                'https': os.getenv('HTTPS_PROXY', os.getenv('HTTP_PROXY'))
            }
    
    async def initialize(self, exchange_list: List[str] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        if exchange_list is None:
            exchange_list = ['mexc', 'bybit', 'huobi', 'binance', 'okx', 'kucoin', 'kraken']
        
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {len(exchange_list)} –±–∏—Ä–∂ –≤ —Ä–µ–∂–∏–º–µ {self.mode}")
        
        for exchange_id in exchange_list:
            try:
                exchange = await self._create_exchange(exchange_id)
                if exchange:
                    self.exchanges[exchange_id] = exchange
                    self.is_connected[exchange_id] = True
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–º–æ –±–∞–ª–∞–Ω—Å
                    if self.mode == 'demo':
                        self.balances[exchange_id] = {
                            'USDT': {'free': 100.0, 'used': 0.0, 'total': 100.0}
                        }
                    
                    logger.info(f"‚úÖ {exchange_id.upper()} –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    self.is_connected[exchange_id] = False
                    logger.warning(f"‚ö†Ô∏è {exchange_id.upper()} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å")
                    
            except Exception as e:
                self.is_connected[exchange_id] = False
                logger.error(f"‚ùå {exchange_id.upper()} –æ—à–∏–±–∫–∞: {e}")
    
    async def _create_exchange(self, exchange_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ CCXT"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config = {
                'enableRateLimit': True,
                'rateLimit': 100,
                'timeout': 30000,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.proxy and exchange_id in ['binance', 'bybit']:
                config['proxies'] = self.proxy
                config['proxy'] = self.proxy['http']
            
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –Ω–µ —Ç—Ä–µ–±—É–µ–º API –∫–ª—é—á–∏
            if self.mode == 'demo':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º testnet –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if exchange_id in self.TESTNET_URLS and self.TESTNET_URLS[exchange_id].get('apiKey'):
                    config.update(self.TESTNET_URLS[exchange_id])
                    logger.info(f"üìù {exchange_id.upper()} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TESTNET —Ä–µ–∂–∏–º")
                # –ò–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                else:
                    logger.info(f"üìä {exchange_id.upper()} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ API –∫–ª—é—á–µ–π)")
            else:
                # –†–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                config['apiKey'] = os.getenv(f'{exchange_id.upper()}_API_KEY', '')
                config['secret'] = os.getenv(f'{exchange_id.upper()}_API_SECRET', '')
                
                if exchange_id in ['okx', 'kucoin']:
                    config['password'] = os.getenv(f'{exchange_id.upper()}_PASSPHRASE', '')
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            exchange_class = getattr(ccxt, exchange_id)
            exchange = exchange_class(config)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
            try:
                exchange.load_markets()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏ {exchange_id}: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö")
            
            return exchange
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {exchange_id}: {e}")
            return None
    
    async def fetch_orderbook(self, exchange_id: str, symbol: str, limit: int = 10):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            if exchange_id not in self.exchanges:
                return None
            
            # KuCoin —Ç—Ä–µ–±—É–µ—Ç limit 20 –∏–ª–∏ 100
            if exchange_id == 'kucoin':
                limit = 20
            
            exchange = self.exchanges[exchange_id]
            orderbook = exchange.fetch_order_book(symbol, limit)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if exchange_id not in self.orderbooks:
                self.orderbooks[exchange_id] = {}
            self.orderbooks[exchange_id][symbol] = orderbook
            
            return orderbook
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {exchange_id} {symbol}: {e}")
            return None
    
    async def fetch_balance(self, exchange_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏"""
        try:
            if self.mode == 'demo':
                # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                return self.balances.get(exchange_id, {
                    'USDT': {'free': 100.0, 'used': 0.0, 'total': 100.0}
                })
            
            if exchange_id not in self.exchanges:
                return None
            
            exchange = self.exchanges[exchange_id]
            balance = exchange.fetch_balance()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.balances[exchange_id] = balance
            
            return balance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {exchange_id}: {e}")
            return None
    
    async def create_order(self, exchange_id: str, symbol: str, side: str, 
                          amount: float, price: float = None, order_type: str = 'limit'):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            if exchange_id not in self.exchanges:
                logger.error(f"–ë–∏—Ä–∂–∞ {exchange_id} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return None
            
            exchange = self.exchanges[exchange_id]
            
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            if self.mode == 'demo':
                order_id = f"DEMO_{exchange_id}_{int(time.time()*1000)}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–º–æ –±–∞–ª–∞–Ω—Å
                if exchange_id in self.balances:
                    usdt_balance = self.balances[exchange_id].get('USDT', {})
                    if side == 'buy':
                        cost = amount * price if price else amount
                        if usdt_balance['free'] >= cost:
                            usdt_balance['free'] -= cost
                            usdt_balance['used'] += cost
                    
                return {
                    'id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'type': order_type,
                    'amount': amount,
                    'price': price,
                    'status': 'closed',  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ –¥–µ–º–æ
                    'filled': amount,
                    'remaining': 0,
                    'timestamp': int(time.time() * 1000),
                    'datetime': exchange.iso8601(int(time.time() * 1000)),
                    'fee': {
                        'cost': amount * price * self.REAL_FEES[exchange_id]['taker'],
                        'currency': 'USDT'
                    }
                }
            
            # –†–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            if order_type == 'limit' and price:
                order = await exchange.create_limit_order(symbol, side, amount, price)
            else:
                order = await exchange.create_market_order(symbol, side, amount)
            
            logger.info(f"üìù –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞ {exchange_id}: {order['id']}")
            return order
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {exchange_id}: {e}")
            return None
    
    async def cancel_order(self, exchange_id: str, order_id: str, symbol: str):
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"""
        try:
            if self.mode == 'demo':
                return {'id': order_id, 'status': 'canceled'}
            
            if exchange_id not in self.exchanges:
                return None
            
            exchange = self.exchanges[exchange_id]
            result = await exchange.cancel_order(order_id, symbol)
            
            logger.info(f"üö´ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞ {exchange_id}: {order_id}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {exchange_id}: {e}")
            return None
    
    async def fetch_order_status(self, exchange_id: str, order_id: str, symbol: str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
        try:
            if self.mode == 'demo':
                # –í –¥–µ–º–æ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏
                return {'id': order_id, 'status': 'closed', 'filled': 1.0}
            
            if exchange_id not in self.exchanges:
                return None
            
            exchange = self.exchanges[exchange_id]
            order = await exchange.fetch_order(order_id, symbol)
            
            return order
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {exchange_id}: {e}")
            return None
    
    async def fetch_ticker(self, exchange_id: str, symbol: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã)"""
        try:
            if exchange_id not in self.exchanges:
                return None
            
            exchange = self.exchanges[exchange_id]
            ticker = exchange.fetch_ticker(symbol)
            
            return ticker
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {exchange_id} {symbol}: {e}")
            return None
    
    async def fetch_markets(self, exchange_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        try:
            if exchange_id not in self.exchanges:
                return []
            
            exchange = self.exchanges[exchange_id]
            markets = exchange.markets
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ç–æ–≤—ã–µ USDT –ø–∞—Ä—ã
            spot_usdt_markets = []
            for market_id, market in markets.items():
                if market['spot'] and market['quote'] == 'USDT' and market['active']:
                    spot_usdt_markets.append(market['symbol'])
            
            return spot_usdt_markets
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤ {exchange_id}: {e}")
            return []
    
    def get_real_fee(self, exchange_id: str, side: str = 'taker'):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –±–∏—Ä–∂–∏"""
        return self.REAL_FEES.get(exchange_id, {}).get(side, 0.002)
    
    async def calculate_arbitrage(self, symbol: str, buy_exchange: str, sell_exchange: str):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω—ã —Å –æ–±–µ–∏—Ö –±–∏—Ä–∂
            buy_orderbook = await self.fetch_orderbook(buy_exchange, symbol)
            sell_orderbook = await self.fetch_orderbook(sell_exchange, symbol)
            
            if not buy_orderbook or not sell_orderbook:
                return None
            
            # –õ—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_ask = buy_orderbook['asks'][0][0] if buy_orderbook['asks'] else None
            best_bid = sell_orderbook['bids'][0][0] if sell_orderbook['bids'] else None
            
            if not best_ask or not best_bid:
                return None
            
            # –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–º—ã
            ask_volume = buy_orderbook['asks'][0][1] if buy_orderbook['asks'] else 0
            bid_volume = sell_orderbook['bids'][0][1] if sell_orderbook['bids'] else 0
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Å–¥–µ–ª–∫–∏
            available_volume = min(ask_volume, bid_volume)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–ø—Ä–µ–¥
            if best_bid <= best_ask:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –†–ï–ê–õ–¨–ù–´–ú–ò –∫–æ–º–∏—Å—Å–∏—è–º–∏
            buy_fee = self.get_real_fee(buy_exchange, 'taker')
            sell_fee = self.get_real_fee(sell_exchange, 'taker')
            
            # –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            gross_profit_pct = ((best_bid - best_ask) / best_ask) * 100
            
            # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
            total_fees_pct = (buy_fee + sell_fee) * 100
            net_profit_pct = gross_profit_pct - total_fees_pct
            
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            if net_profit_pct <= 0:
                return None
            
            return {
                'symbol': symbol,
                'buy_exchange': buy_exchange,
                'sell_exchange': sell_exchange,
                'buy_price': best_ask,
                'sell_price': best_bid,
                'available_volume': available_volume,
                'gross_profit_pct': gross_profit_pct,
                'buy_fee_pct': buy_fee * 100,
                'sell_fee_pct': sell_fee * 100,
                'total_fees_pct': total_fees_pct,
                'net_profit_pct': net_profit_pct,
                'timestamp': time.time()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        for exchange_id, exchange in self.exchanges.items():
            try:
                await exchange.close()
                logger.info(f"üîå {exchange_id.upper()} –æ—Ç–∫–ª—é—á–µ–Ω")
            except:
                pass
        self.exchanges.clear()
        self.is_connected.clear()


async def test_connector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
    connector = ExchangeConnector(mode='demo')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ 7 –±–∏—Ä–∂
    await connector.initialize()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
    for exchange_id, status in connector.is_connected.items():
        status_emoji = "‚úÖ" if status else "‚ùå"
        print(f"{status_emoji} {exchange_id.upper()}: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if status else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    test_symbol = 'BTC/USDT'
    print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {test_symbol}:")
    
    for exchange_id in connector.exchanges.keys():
        ticker = await connector.fetch_ticker(exchange_id, test_symbol)
        if ticker:
            print(f"{exchange_id.upper()}: Bid=${ticker.get('bid', 0):.2f}, Ask=${ticker.get('ask', 0):.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    print("\nüîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    exchanges = list(connector.exchanges.keys())
    
    for i in range(len(exchanges)):
        for j in range(i+1, len(exchanges)):
            opportunity = await connector.calculate_arbitrage(
                test_symbol, exchanges[i], exchanges[j]
            )
            if opportunity:
                print(f"üí∞ {opportunity['buy_exchange']} ‚Üí {opportunity['sell_exchange']}: "
                      f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å {opportunity['net_profit_pct']:.3f}% "
                      f"(–∫–æ–º–∏—Å—Å–∏–∏ {opportunity['total_fees_pct']:.2f}%)")
    
    await connector.close()


if __name__ == "__main__":
    asyncio.run(test_connector())
