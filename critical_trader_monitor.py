#!/usr/bin/env python3
"""
üí∞ CRITICAL TRADER MONITOR - Real-time Trading Performance Monitoring
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import aiohttp
import json
import time
import os
import sys
import re
import glob
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Any, Tuple
from dataclasses import dataclass, field
from collections import defaultdict, deque
import logging
from colorama import init, Fore, Back, Style
import threading
from pathlib import Path
import statistics

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

@dataclass
class CriticalTraderMetrics:
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    # –°–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
    avg_order_latency_ms: float = 0.0
    max_order_latency_ms: float = 0.0
    order_fill_rate_pct: float = 0.0
    parallel_executions: int = 0
    connection_pool_utilization_pct: float = 0.0
    order_latency_history: List[float] = field(default_factory=list)
    
    # –¢–∞–π–º–∏–Ω–≥–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    order_timeout_count: int = 0
    fill_timeout_count: int = 0
    cancel_timeout_count: int = 0
    stale_opportunities: int = 0
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    current_position_size_usd: float = 0.0
    portfolio_risk_pct: float = 0.0
    exchange_exposure_pct: Dict[str, float] = field(default_factory=dict)
    concurrent_trades: int = 0
    profit_history: List[float] = field(default_factory=list)
    peak_profit: float = 0.0
    
    # Stop-loss –º–µ—Ç—Ä–∏–∫–∏
    stop_loss_triggers: int = 0
    take_profit_triggers: int = 0
    max_drawdown_pct: float = 0.0
    emergency_stops: int = 0
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º (—Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
    total_capital_usd: float = 0.0
    available_capital_usd: float = 0.0
    position_scaling_events: int = 0
    kelly_criterion_score: float = 0.0
    capital_history: List[float] = field(default_factory=list)
    
    # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
    exchange_balances: Dict[str, float] = field(default_factory=dict)
    rebalance_events: int = 0
    reserve_funds_pct: float = 0.0
    commission_costs_usd: float = 0.0
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏
    total_trades: int = 0
    successful_trades: int = 0
    failed_trades: int = 0
    avg_profit_per_trade_usd: float = 0.0
    win_rate_pct: float = 0.0
    profit_factor: float = 0.0
    total_profit_usd: float = 0.0
    total_profit_pct: float = 0.0
    
    # –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    order_errors: int = 0
    balance_errors: int = 0
    risk_violations: int = 0
    system_errors: int = 0

@dataclass
class ExchangeTraderData:
    """–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø–æ –±–∏—Ä–∂–µ"""
    name: str
    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
    avg_execution_time_ms: float = 0.0
    order_success_rate_pct: float = 0.0
    active_orders: int = 0
    
    # –ë–∞–ª–∞–Ω—Å—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
    balance_usd: float = 0.0
    available_balance_usd: float = 0.0
    locked_balance_usd: float = 0.0
    position_count: int = 0
    
    # –û—à–∏–±–∫–∏
    connection_errors: int = 0
    order_errors: int = 0
    balance_errors: int = 0
    last_error: str = ""

class CriticalTraderMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    
    def __init__(self):
        self.metrics = CriticalTraderMetrics()
        self.exchanges = {}
        self.trade_history = deque(maxlen=1000)
        self.running = False
        self.last_update = time.time()
        self.log_files = []
        self.log_positions = {}
        
        # –õ–æ–≥–≥–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
        self.logger = logging.getLogger("CriticalTraderMonitor")
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s | %(levelname)-8s | %(name)s | %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
            # –¢–∞–∫–∂–µ –ø–∏—à–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            file_handler = logging.FileHandler('critical_trader_monitor.log', encoding='utf-8')
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        
        # –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –ü–û–†–û–ì–ò –ö–ê–ß–ï–°–¢–í–ê 10/10 –¥–ª—è CRITICAL TRADER MONITOR
        self.critical_thresholds = {
            # –°–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è - –ö–õ–ê–°–° 10/10
            'MAX_ORDER_LATENCY_MS': 75,           # ‚â§75ms —Å—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            'MIN_ORDER_FILL_RATE_PCT': 98,        # ‚â•98% –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            'MAX_ORDER_TIMEOUT_COUNT': 2,         # ‚â§2 —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –ö–õ–ê–°–° 10/10
            'MAX_PORTFOLIO_RISK_PCT': 1.5,        # ‚â§1.5% —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            'MAX_SINGLE_EXCHANGE_EXPOSURE': 25,   # ‚â§25% –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ
            'MAX_CONCURRENT_TRADES': 3,           # ‚â§3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏
            'MAX_DRAWDOWN_PCT': 3.0,              # ‚â§3% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            
            # –¢–æ—Ä–≥–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ö–õ–ê–°–° 10/10
            'MIN_WIN_RATE_PCT': 75,               # ‚â•75% —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            'MIN_PROFIT_FACTOR': 2.0,             # ‚â•2.0 –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
            'MIN_AVAILABLE_CAPITAL_PCT': 30,      # ‚â•30% –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            'MAX_COMMISSION_COST_PCT': 0.3,       # ‚â§0.3% –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
            
            # –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã - –ö–õ–ê–°–° 10/10
            'MAX_ERROR_RATE_PCT': 0.5,            # ‚â§0.5% –æ—à–∏–±–æ–∫
            'MIN_SYSTEM_UPTIME_PCT': 99.5,        # ‚â•99.5% –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            'MAX_EMERGENCY_STOPS': 1              # ‚â§1 —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
        self.init_exchanges()
        self.find_log_files()
        
    def init_exchanges(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂"""
        exchange_configs = {
            'mexc': 'MEXC',
            'bybit': 'Bybit', 
            'huobi': 'Huobi',
            'binance': 'Binance',
            'okx': 'OKX',
            'kucoin': 'KuCoin'
        }
        
        for exchange_id, name in exchange_configs.items():
            self.exchanges[exchange_id] = ExchangeTraderData(name=name)
            self.metrics.exchange_exposure_pct[exchange_id] = 0.0
            self.metrics.exchange_balances[exchange_id] = 0.0
    
    def find_log_files(self):
        """–ü–æ–∏—Å–∫ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        LOG_FILES = [
            'production_bot.log',  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –æ—Ç production_multi_exchange_bot.py
            'trading_engine.log', 
            'order_executor.log',
            'trades_history.csv',
            'multi_exchange_bot.log',
            'hybrid_bot.log',
            'demo_bot_*.log',
            'new_bot_*.log'
        ]
        
        for pattern in LOG_FILES:
            files = glob.glob(pattern)
            self.log_files.extend(files)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.log_files = list(set(self.log_files))
        self.log_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–∞–π–ª–∞—Ö
        for log_file in self.log_files:
            self.log_positions[log_file] = 0
        
        if self.log_files:
            print(f"üìÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {', '.join(self.log_files[:3])}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        
        tasks = [
            self.parse_trading_logs(),
            self.calculate_trader_metrics(),
            self.display_trader_dashboard()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def parse_trading_logs(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        while self.running:
            try:
                for log_file in self.log_files:
                    if not os.path.exists(log_file):
                        continue
                        
                    try:
                        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            f.seek(self.log_positions[log_file])
                            new_lines = f.readlines()
                            self.log_positions[log_file] = f.tell()
                            
                            for line in new_lines:
                                await self.parse_log_line(line.strip(), log_file)
                        
                    except Exception as e:
                        self.metrics.system_errors += 1
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
                        
            except Exception as e:
                self.metrics.system_errors += 1
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            
            await asyncio.sleep(1)
    
    async def parse_log_line(self, line: str, source_file: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –∏–∑ production_multi_exchange_bot.py
            if 'üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫:' in line:
                # –§–æ—Ä–º–∞—Ç: "üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: N"
                trades_match = re.search(r'üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫:\s*(\d+)', line)
                if trades_match:
                    self.metrics.total_trades = int(trades_match.group(1))
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–±—ã–ª–∏ –∏–∑ production_multi_exchange_bot.py
            elif 'üí∞ –ü—Ä–∏–±—ã–ª—å: $' in line:
                # –§–æ—Ä–º–∞—Ç: "üí∞ –ü—Ä–∏–±—ã–ª—å: $X.XX (Y.YYY%)"
                profit_match = re.search(r'üí∞ –ü—Ä–∏–±—ã–ª—å:\s*\$([0-9.-]+)(?:\s*\(([0-9.-]+)%\))?', line)
                if profit_match:
                    self.metrics.total_profit_usd = float(profit_match.group(1))
                    if profit_match.group(2):
                        self.metrics.total_profit_pct = float(profit_match.group(2))
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –±–∏—Ä–∂–∏ –∏–∑ production_multi_exchange_bot.py
            elif '–ë–∞–ª–∞–Ω—Å: $' in line and ('MEXC' in line or 'Bybit' in line or 'Huobi' in line or 'OKX' in line or 'KuCoin' in line):
                balance_match = re.search(r'–ë–∞–ª–∞–Ω—Å:\s*\$([0-9.]+)', line)
                exchange_match = re.search(r'(MEXC|Bybit|Huobi|OKX|KuCoin)', line)
                if balance_match and exchange_match:
                    balance = float(balance_match.group(1))
                    exchange_name = exchange_match.group(1)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ID –±–∏—Ä–∂–∏
                    exchange_id_map = {
                        'MEXC': 'mexc', 'Bybit': 'bybit', 'Huobi': 'huobi',
                        'OKX': 'okx', 'KuCoin': 'kucoin'
                    }
                    exchange_id = exchange_id_map.get(exchange_name, exchange_name.lower())
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    self.metrics.exchange_balances[exchange_id] = balance
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –±–∏—Ä–∂
                    if exchange_id in self.exchanges:
                        self.exchanges[exchange_id].balance_usd = balance
                    self.logger.info(f"Parsed balance: {exchange_name} ${balance:.2f} from {source_file}")
                        
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–∑ production_multi_exchange_bot.py
            elif 'üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:' in line:
                opps_match = re.search(r'üíé –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\s*(\d+)', line)
                if opps_match:
                    opportunities = int(opps_match.group(1))
                    self.metrics.opportunities_found = opportunities
            elif 'üíé –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:' in line:
                self.metrics.opportunities_found = getattr(self.metrics, 'opportunities_found', 0) + 1
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            elif 'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –±–∏—Ä–∂:' in line:
                connected_match = re.search(r'üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –±–∏—Ä–∂:\s*(\d+)', line)
                if connected_match:
                    connected_count = int(connected_match.group(1))
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    for exchange_id in self.exchanges:
                        if exchange_id in ['mexc', 'bybit', 'huobi', 'okx', 'kucoin'][:connected_count]:
                            self.exchanges[exchange_id].connection_errors = 0  # –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            elif 'üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:' in line:
                scans_match = re.search(r'üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\s*(\d+)', line)
                if scans_match:
                    scans = int(scans_match.group(1))
                    self.metrics.active_pairs = scans  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ production_multi_exchange_bot.py
            elif '‚úÖ –°–¥–µ–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' in line:
                # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—É—é —Å–¥–µ–ª–∫—É (–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)
                self._update_order_latency(75.0)  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏
                self.metrics.successful_trades += 1
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ production_multi_exchange_bot.py  
            elif '‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞' in line:
                self.metrics.failed_trades += 1
                self.metrics.order_timeout_count += 1
            elif '‚ùå –û—à–∏–±–æ–∫:' in line:
                errors_match = re.search(r'‚ùå –û—à–∏–±–æ–∫:\s*(\d+)', line)
                if errors_match:
                    total_errors = int(errors_match.group(1))
                    self.metrics.system_errors = total_errors
                    
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
            elif 'üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞' in line or '‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏' in line:
                self.metrics.emergency_stops += 1
            elif '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:' in line:
                self.metrics.system_errors += 1
                
            # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫
            if self.metrics.total_trades > 0:
                self._calculate_real_risk_metrics()
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
            pass
    
    def _update_order_latency(self, latency_ms: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        self.metrics.order_latency_history.append(latency_ms)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –æ—Ä–¥–µ—Ä–∞–º–∏
        if len(self.metrics.order_latency_history) > 100:
            self.metrics.order_latency_history = self.metrics.order_latency_history[-100:]
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if self.metrics.order_latency_history:
            self.metrics.avg_order_latency_ms = sum(self.metrics.order_latency_history) / len(self.metrics.order_latency_history)
            self.metrics.max_order_latency_ms = max(self.metrics.order_latency_history)
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º fill rate (–µ—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è)
        fast_orders = [lat for lat in self.metrics.order_latency_history if lat < 5000]  # < 5 —Å–µ–∫—É–Ω–¥
        if self.metrics.order_latency_history:
            self.metrics.order_fill_rate_pct = (len(fast_orders) / len(self.metrics.order_latency_history)) * 100
    
    def _calculate_real_risk_metrics(self):
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–±—ã–ª–∏
            current_profit = self.metrics.total_profit_usd
            self.metrics.profit_history.append(current_profit)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∑–∞–ø–∏—Å—è–º–∏
            if len(self.metrics.profit_history) > 1000:
                self.metrics.profit_history = self.metrics.profit_history[-1000:]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            if self.metrics.profit_history:
                # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
                running_max = 0
                max_drawdown = 0
                
                for profit in self.metrics.profit_history:
                    if profit > running_max:
                        running_max = profit
                        self.metrics.peak_profit = profit
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É
                    if running_max > 0:
                        drawdown = ((running_max - profit) / running_max) * 100
                        max_drawdown = max(max_drawdown, drawdown)
                
                self.metrics.max_drawdown_pct = max_drawdown
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª –∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –±–∏—Ä–∂
            total_capital = sum(self.metrics.exchange_balances.values())
            self.metrics.total_capital_usd = total_capital
            self.metrics.available_capital_usd = total_capital  # –£–ø—Ä–æ—â–µ–Ω–∏–µ - –≤–µ—Å—å –∫–∞–ø–∏—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ø–∏—Ç–∞–ª–∞
            self.metrics.capital_history.append(total_capital)
            if len(self.metrics.capital_history) > 1000:
                self.metrics.capital_history = self.metrics.capital_history[-1000:]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º exposure –ø–æ –±–∏—Ä–∂–∞–º (—Ä–∏—Å–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏)
            if total_capital > 0:
                for exchange, balance in self.metrics.exchange_balances.items():
                    exposure_pct = (balance / total_capital) * 100
                    self.metrics.exchange_exposure_pct[exchange] = exposure_pct
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º portfolio risk (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏)
            if self.metrics.max_drawdown_pct > 0:
                # –†–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                self.metrics.portfolio_risk_pct = min(self.metrics.max_drawdown_pct * 1.5, 100.0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º win rate
            if self.metrics.total_trades > 0:
                self.metrics.win_rate_pct = (self.metrics.successful_trades / self.metrics.total_trades) * 100
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É
            if self.metrics.total_trades > 0:
                self.metrics.avg_profit_per_trade_usd = self.metrics.total_profit_usd / self.metrics.total_trades
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Kelly Criterion (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if self.metrics.total_trades > 5 and self.metrics.win_rate_pct > 0:
                win_rate = self.metrics.win_rate_pct / 100
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Kelly –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
                if win_rate > 0.5:
                    self.metrics.kelly_criterion_score = min((2 * win_rate - 1) * 0.5, 0.25)  # –ú–∞–∫—Å 25%
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫: {e}")
    
    async def calculate_trader_metrics(self):
        """–†–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        while self.running:
            try:
                # –†–∞—Å—á–µ—Ç win rate
                if self.metrics.total_trades > 0:
                    self.metrics.win_rate_pct = (
                        self.metrics.successful_trades / self.metrics.total_trades * 100
                    )
                
                # –†–∞—Å—á–µ—Ç fill rate
                total_orders = self.metrics.successful_trades + self.metrics.failed_trades
                if total_orders > 0:
                    self.metrics.order_fill_rate_pct = (
                        self.metrics.successful_trades / total_orders * 100
                    )
                
                # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
                self.metrics.total_capital_usd = sum(self.metrics.exchange_balances.values())
                
                # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                self.metrics.available_capital_usd = self.metrics.total_capital_usd * 0.8
                
                # –†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –ø–æ –±–∏—Ä–∂–∞–º
                if self.metrics.total_capital_usd > 0:
                    for exchange_id, balance in self.metrics.exchange_balances.items():
                        self.metrics.exchange_exposure_pct[exchange_id] = (
                            balance / self.metrics.total_capital_usd * 100
                        )
                
                # –†–∞—Å—á–µ—Ç profit factor (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                if self.metrics.failed_trades > 0:
                    avg_loss = abs(self.metrics.avg_profit_per_trade_usd) * 0.5  # –ü—Ä–∏–º–µ—Ä–Ω–æ
                    if avg_loss > 0:
                        self.metrics.profit_factor = abs(self.metrics.avg_profit_per_trade_usd) / avg_loss

                # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ –æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å)
                if self.metrics.total_trades > 0:
                    self.metrics.avg_profit_per_trade_usd = self.metrics.total_profit_usd / self.metrics.total_trades
                
                # –†–∞—Å—á–µ—Ç —Ä–µ–∑–µ—Ä–≤–∞ —Å—Ä–µ–¥—Å—Ç–≤
                if self.metrics.total_capital_usd > 0:
                    self.metrics.reserve_funds_pct = (
                        self.metrics.available_capital_usd / self.metrics.total_capital_usd * 100
                    )
                
                self.last_update = time.time()
                
            except Exception as e:
                self.metrics.system_errors += 1
            
            await asyncio.sleep(5)
    
    def get_status_indicator(self, value, threshold, reverse=False, percentage=False):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        if percentage:
            display_value = f"{value:.1f}%"
        else:
            display_value = f"{value:.1f}" if isinstance(value, float) else str(value)
        
        if reverse:
            status = "‚úÖ" if value <= threshold else "‚ùå"
            color = Fore.GREEN if value <= threshold else Fore.RED
        else:
            status = "‚úÖ" if value >= threshold else "‚ùå"
            color = Fore.GREEN if value >= threshold else Fore.RED
        
        return f"{color}{display_value} {status}{Style.RESET_ALL}"
    
    async def display_trader_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        while self.running:
            os.system('clear' if os.name == 'posix' else 'cls')
            print(f"\033[2J\033[H")  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
            print(f"{Fore.CYAN}{'='*80}")
            print(f"{Fore.CYAN}üí∞ CRITICAL TRADER MONITOR - REAL-TIME DASHBOARD")
            print(f"{Fore.CYAN}{'='*80}")
            print(f"{Fore.WHITE}–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"{Fore.YELLOW}‚ö° –°–ö–û–†–û–°–¢–¨ –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:")
            print(f"–°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–æ–≤: {self.get_status_indicator(self.metrics.avg_order_latency_ms, self.critical_thresholds['MAX_ORDER_LATENCY_MS'], reverse=True)}ms")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {self.get_status_indicator(self.metrics.order_fill_rate_pct, self.critical_thresholds['MIN_ORDER_FILL_RATE_PCT'], percentage=True)}")
            print(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:    {Fore.CYAN}{self.metrics.parallel_executions}{Style.RESET_ALL}")
            print()
            
            # –¢–∞–π–º–∏–Ω–≥–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            print(f"{Fore.YELLOW}‚è±Ô∏è –¢–ê–ô–ú–ò–ù–ì–ò –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:")
            print(f"–¢–∞–π–º–∞—É—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤:           {self.get_status_indicator(self.metrics.order_timeout_count, self.critical_thresholds['MAX_ORDER_TIMEOUT_COUNT'], reverse=True)}")
            print(f"–¢–∞–π–º–∞—É—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:        {Fore.CYAN}{self.metrics.fill_timeout_count}{Style.RESET_ALL}")
            print(f"–¢–∞–π–º–∞—É—Ç—ã –æ—Ç–º–µ–Ω—ã:            {Fore.CYAN}{self.metrics.cancel_timeout_count}{Style.RESET_ALL}")
            print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:     {Fore.CYAN}{self.metrics.stale_opportunities}{Style.RESET_ALL}")
            print()
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
            print(f"{Fore.YELLOW}üõ°Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò:")
            print(f"–†–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è:              {self.get_status_indicator(self.metrics.portfolio_risk_pct, self.critical_thresholds['MAX_PORTFOLIO_RISK_PCT'], reverse=True, percentage=True)}")
            print(f"–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:       {self.get_status_indicator(self.metrics.concurrent_trades, self.critical_thresholds['MAX_CONCURRENT_TRADES'], reverse=True)}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞:      {self.get_status_indicator(self.metrics.max_drawdown_pct, self.critical_thresholds['MAX_DRAWDOWN_PCT'], reverse=True, percentage=True)}")
            print(f"Stop-loss —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π:     {Fore.RED}{self.metrics.stop_loss_triggers}{Style.RESET_ALL}")
            print(f"Take-profit —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π:   {Fore.GREEN}{self.metrics.take_profit_triggers}{Style.RESET_ALL}")
            print()
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º
            print(f"{Fore.YELLOW}üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ü–ò–¢–ê–õ–û–ú:")
            print(f"–û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª:              {Fore.CYAN}${self.metrics.total_capital_usd:.2f}{Style.RESET_ALL}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª:          {Fore.CYAN}${self.metrics.available_capital_usd:.2f}{Style.RESET_ALL}")
            print(f"–†–µ–∑–µ—Ä–≤ —Å—Ä–µ–¥—Å—Ç–≤:             {Fore.CYAN}{self.metrics.reserve_funds_pct:.1f}%{Style.RESET_ALL}")
            print(f"–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏:        {Fore.CYAN}${self.metrics.commission_costs_usd:.2f}{Style.RESET_ALL}")
            print()
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏
            print(f"{Fore.YELLOW}üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –¢–û–†–ì–û–í–õ–ò:")
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:               {Fore.CYAN}{self.metrics.total_trades}{Style.RESET_ALL}")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:            {Fore.GREEN}{self.metrics.successful_trades}{Style.RESET_ALL}")
            print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:           {Fore.RED}{self.metrics.failed_trades}{Style.RESET_ALL}")
            print(f"Win Rate:                   {self.get_status_indicator(self.metrics.win_rate_pct, self.critical_thresholds['MIN_WIN_RATE_PCT'], percentage=True)}")
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É:  {Fore.CYAN}${self.metrics.avg_profit_per_trade_usd:.2f}{Style.RESET_ALL}")
            print(f"Profit Factor:              {self.get_status_indicator(self.metrics.profit_factor, self.critical_thresholds['MIN_PROFIT_FACTOR'])}")
            print()
            
            # –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è –ø–æ –±–∏—Ä–∂–∞–º
            print(f"{Fore.YELLOW}üè¶ –≠–ö–°–ü–û–ó–ò–¶–ò–Ø –ü–û –ë–ò–†–ñ–ê–ú:")
            for exchange_id, exposure_pct in self.metrics.exchange_exposure_pct.items():
                exchange_name = self.exchanges[exchange_id].name
                balance = self.metrics.exchange_balances[exchange_id]
                
                exposure_status = "‚úÖ" if exposure_pct <= self.critical_thresholds['MAX_SINGLE_EXCHANGE_EXPOSURE'] else "‚ùå"
                exposure_color = Fore.GREEN if exposure_pct <= self.critical_thresholds['MAX_SINGLE_EXCHANGE_EXPOSURE'] else Fore.RED
                
                print(f"{exchange_name:<10} {exposure_color}{exposure_pct:.1f}% {exposure_status}{Style.RESET_ALL} "
                      f"(${balance:.2f})")
            print()
            
            # –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
            print(f"{Fore.YELLOW}üö® –û–®–ò–ë–ö–ò –ò –ü–†–û–ë–õ–ï–ú–´:")
            total_errors = self.metrics.order_errors + self.metrics.balance_errors + self.metrics.system_errors
            error_rate = total_errors / max(1, self.metrics.total_trades) * 100
            print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫:       {self.get_status_indicator(error_rate, self.critical_thresholds['MAX_ERROR_RATE_PCT'], reverse=True, percentage=True)}")
            print(f"–û—à–∏–±–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤:             {Fore.RED}{self.metrics.order_errors}{Style.RESET_ALL}")
            print(f"–û—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤:            {Fore.RED}{self.metrics.balance_errors}{Style.RESET_ALL}")
            print(f"–ù–∞—Ä—É—à–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤:           {Fore.RED}{self.metrics.risk_violations}{Style.RESET_ALL}")
            print(f"–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏:           {Fore.RED}{self.metrics.system_errors}{Style.RESET_ALL}")
            print()
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–∏—Ä–∂
            print(f"{Fore.YELLOW}üìä –î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ë–ò–†–ñ:")
            print(f"{'–ë–∏—Ä–∂–∞':<10} {'–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ':<12} {'Success Rate':<12} {'–ë–∞–ª–∞–Ω—Å':<12} {'–û—à–∏–±–∫–∏':<8}")
            print("-" * 70)
            
            for exchange_id, exchange in self.exchanges.items():
                execution_time = f"{exchange.avg_execution_time_ms:.0f}ms" if exchange.avg_execution_time_ms > 0 else "N/A"
                success_rate = f"{exchange.order_success_rate_pct:.1f}%" if exchange.order_success_rate_pct > 0 else "N/A"
                balance = f"${exchange.balance_usd:.0f}" if exchange.balance_usd > 0 else "$0"
                
                print(f"{exchange.name:<10} {execution_time:<12} {success_rate:<12} {balance:<12} {exchange.order_errors:<8}")
            
            print()
            print(f"{Fore.WHITE}–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(self.last_update).strftime('%H:%M:%S')}")
            print(f"{Fore.WHITE}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = CriticalTraderMonitor()
    
    try:
        print(f"{Fore.CYAN}üöÄ –ó–∞–ø—É—Å–∫ Critical Trader Monitor...")
        print(f"{Fore.WHITE}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–µ–π–¥–µ—Ä–∞...")
        await asyncio.sleep(2)
        
        await monitor.start_monitoring()
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitor.running = False
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print(f"{Fore.GREEN}‚úÖ Critical Trader Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import colorama, aiohttp
    except ImportError:
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        os.system("pip install colorama aiohttp")
    
    asyncio.run(main())
