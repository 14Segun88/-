┌───────────────────────────┐
│ **Компоненты**            │
│ - main.py (Точка входа)   │
│ - config.py (Настройки)   │
│ - htx_api.py (API клиент) │
│ - arbitrage_strategy.py   │
│   (Логика стратегии)      │
│ - trade_logger.py         │
│   (Логирование тестов)    │
└───────────────────────────┘


┌───────────────────────────┐
│ **1. ЗАПУСК**             │ // python3 main.py
│ - Создание TradeLogger    │ // trade_logger.py
│ - Создание файла отчета   │ // res/res_X.txt
│ - Запись времени начала   │
│ - Инициализация HtxApi    │
│ - Инициализация стратегии │
│ - Запуск главного цикла   │
└─────────────┬─────────────┘
              │
              ▼
┌───────────────────────────┐
│ **НАЧАЛО БЕСКОНЕЧНОГО ЦИКЛА** │ // В arbitrage_strategy.py запускается метод run()
└─────────────┬─────────────┘
              │
              ▼
┌───────────────────────────┐
│  **2. Сбор информации**   │ // Вызывается метод get_market_data() из htx_api.py
│  - Какая цена BTC/USDT?    │ // Внутри для каждой пары вызывается get_market_detail()
│  - Какая цена LTC/USDT?    │ // и из ответа извлекается цена `close`.
│  - Какая цена LTC/BTC?     │
└─────────────┬─────────────┘
              │
              ▼
┌───────────────────────────┐
│  **3. Вычисление**        │ // Вызывается метод calculate_arbitrage() из arbitrage_strategy.py
│  - Рассчитать 2 схемы:   │ // 1. USDT -> LTC -> BTC -> USDT (сигнал SELL_BTC_IN_MIDDLE)
│  - Найти лучшую прибыль  │ // 2. USDT -> BTC -> LTC -> USDT (сигнал BUY_BTC_IN_MIDDLE)
│  - Сравнить с порогом    │ // Вычисляется % прибыли для каждой схемы.
└─────────────┬─────────────┘
              │
              ▼
┌───────────────────────────┐
│    **4. РЕШЕНИЕ**         │ // Внутри calculate_arbitrage() сравниваем: max_profit > порог.
│  Прибыль стоит того,      │
│  чтобы торговать?         │
└─────────────┬─────────────┘
      │               │
      │               └───────────┐
      ▼                         ▼
┌───────────┐             ┌───────────────────────────┐
│ **НЕТ**   │             │          **ДА**           │
│ (HOLD)    │             │ (BUY_BTC_IN_MIDDLE или   │
└─────┬─────┘             │  SELL_BTC_IN_MIDDLE)      │
      │                   └──────────┬────────────────┘
      │                              │
      │                              ▼
      │             ┌──────────────────────────────────┐
      │             │ **5. Исполнение сделки**         │ // Вызывается execute_trade()
      │             │ - Получить ID спотового аккаунта │ // Вызов get_spot_account_id() из htx_api.py
      │             │ - Разместить 3 ордера          │ // 3 раза вызывается place_order() из htx_api.py
      │             │ - Записать сделку в лог        │ // Вызов trade_logger.log_trade()
      │             └──────────────────────────────────┘
      │
      └──────────────────────────────►


┌───────────────────────────┐
│ **6. ПАУЗА**              │ // time.sleep(CHECK_INTERVAL)
│  (Ожидание)               │
└─────────────┬─────────────┘
              │
              └─────────────────┐
                                │
◄───────────────────────────────┘


┌───────────────────────────┐
│ **7. ОСТАНОВКА**          │ // Нажатие Ctrl+C
│ - Вызов bot.stop()        │
│ - Запись времени окончания│ // trade_logger.log_end()
│   в файл res/res_X.txt    │
└───────────────────────────┘