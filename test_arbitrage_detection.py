#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á–µ–º—É –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç —è–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è —Ü–µ–Ω
"""

import asyncio
import sys
import time
from exchange_connector import ExchangeConnector
from production_config import TRADING_CONFIG
from trading_engine import TradingEngine

class ArbitrageChecker:
    def __init__(self):
        self.exchanges = {}
        
    def calculate_arbitrage_profit(self, buy_price, sell_price, amount=1.0):
        """–†–∞—Å—á–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
        if not buy_price or not sell_price or buy_price >= sell_price:
            return 0.0
            
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (0.1% –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
        buy_cost = buy_price * amount * 1.001
        sell_revenue = sell_price * amount * 0.999
        
        profit = sell_revenue - buy_cost
        profit_pct = (profit / buy_cost) * 100 if buy_cost > 0 else 0
        
        return profit_pct
        
    async def test_current_prices(self):
        """–¢–µ—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏"""
        print("üî• –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ê–†–ë–ò–¢–†–ê–ñ–ê")
        print("=" * 50)
        
        connector = ExchangeConnector(mode='testnet')
        await connector.initialize(['bitget', 'phemex'])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'BNB/USDT']
        
        for symbol in symbols:
            print(f"\nüìä {symbol}:")
            
            # –ü–æ–ª—É—á–∞–µ–º orderbook —Å –æ–±–µ–∏—Ö –±–∏—Ä–∂
            bitget_ob = await connector.fetch_orderbook('bitget', symbol)
            phemex_ob = await connector.fetch_orderbook('phemex', symbol)
            
            if not bitget_ob or not phemex_ob:
                print(f"  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
                
            if not bitget_ob.get('bids') or not bitget_ob.get('asks'):
                print(f"  ‚ùå Bitget: –Ω–µ—Ç bid/ask –¥–ª—è {symbol}")
                continue
                
            if not phemex_ob.get('bids') or not phemex_ob.get('asks'):
                print(f"  ‚ùå Phemex: –Ω–µ—Ç bid/ask –¥–ª—è {symbol}")
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            bitget_bid = bitget_ob['bids'][0][0] if bitget_ob['bids'] else 0
            bitget_ask = bitget_ob['asks'][0][0] if bitget_ob['asks'] else 0
            phemex_bid = phemex_ob['bids'][0][0] if phemex_ob['bids'] else 0  
            phemex_ask = phemex_ob['asks'][0][0] if phemex_ob['asks'] else 0
            
            print(f"  Bitget: {bitget_bid:.4f}/{bitget_ask:.4f}")
            print(f"  Phemex: {phemex_bid:.4f}/{phemex_ask:.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            
            # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ Bitget, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ Phemex
            profit1 = self.calculate_arbitrage_profit(bitget_ask, phemex_bid)
            if profit1 > 0:
                print(f"  üü¢ Bitget‚ÜíPhemex: {profit1:.4f}% –ø—Ä–∏–±—ã–ª—å")
            
            # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ Phemex, –ø—Ä–æ–¥–∞–µ–º –Ω–∞ Bitget  
            profit2 = self.calculate_arbitrage_profit(phemex_ask, bitget_bid)
            if profit2 > 0:
                print(f"  üü¢ Phemex‚ÜíBitget: {profit2:.4f}% –ø—Ä–∏–±—ã–ª—å")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            min_threshold = TRADING_CONFIG['min_profit_threshold']
            
            if profit1 > min_threshold:
                print(f"  ‚úÖ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ 1: {profit1:.4f}% > {min_threshold}%")
            elif profit1 > 0:
                print(f"  ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–æ 1: {profit1:.4f}% < {min_threshold}%")
                
            if profit2 > min_threshold:
                print(f"  ‚úÖ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ 2: {profit2:.4f}% > {min_threshold}%")  
            elif profit2 > 0:
                print(f"  ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–æ 2: {profit2:.4f}% < {min_threshold}%")
                
            if profit1 <= 0 and profit2 <= 0:
                print(f"  ‚ùå –ù–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        
        await connector.close()
        print("\nüî• –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

async def main():
    checker = ArbitrageChecker()
    await checker.test_current_prices()

if __name__ == "__main__":
    asyncio.run(main())
