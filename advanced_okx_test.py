#!/usr/bin/env python3
import ccxt
import json
import time

def test_okx_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OKX —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏"""
    print("üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OKX API")
    print("=" * 50)
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ API –∫–ª—é—á–∏
    api_variants = [
        {
            'name': '–ù–æ–≤—ã–µ –∫–ª—é—á–∏',
            'api_key': '352206e1-5463-453f-9a52-18cab50ec146',
            'secret': 'D5C10767153C75D5FCA193D249FB1747',
            'passphrase': 'Egor1998!'
        }
    ]
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Å–ø—Ä–æ—Ñ—Ä–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    passphrase_variants = ['Egor1998!', 'Egor1998', '0502794579Egor']
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ä–µ–¥—ã
    env_configs = [
        {'sandbox': True, 'name': 'Testnet'},
        {'sandbox': False, 'name': 'Production'},
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    additional_configs = [
        {'timeout': 30000, 'rateLimit': 1000},
        {'timeout': 60000, 'rateLimit': 2000},
        {'enableRateLimit': False, 'timeout': 20000},
    ]
    
    print(f"üí° –í–µ—Ä—Å–∏—è CCXT: {ccxt.__version__}")
    print()
    
    success_count = 0
    test_count = 0
    
    for api_data in api_variants:
        print(f"üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {api_data['name']}")
        
        for passphrase in passphrase_variants:
            for env_config in env_configs:
                for additional in additional_configs:
                    test_count += 1
                    print(f"\n  –¢–µ—Å—Ç {test_count}: {env_config['name']} | Passphrase: '{passphrase}' | Config: {list(additional.keys())}")
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                        config = {
                            'apiKey': api_data['api_key'],
                            'secret': api_data['secret'], 
                            'password': passphrase,
                            'sandbox': env_config['sandbox'],
                            **additional
                        }
                        
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OKX
                        okx = ccxt.okx(config)
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä—ã–Ω–∫–æ–≤
                        print(f"    üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤...")
                        start_time = time.time()
                        markets = okx.load_markets()
                        load_time = time.time() - start_time
                        
                        print(f"    ‚úÖ –£–°–ü–ï–•! –†—ã–Ω–∫–∏: {len(markets)} | –í—Ä–µ–º—è: {load_time:.2f}—Å")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
                        try:
                            balance = okx.fetch_balance()
                            total_usdt = sum([bal.get('total', 0) for bal in balance.values() if isinstance(bal, dict)])
                            print(f"    üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {total_usdt:.2f} USDT")
                            success_count += 1
                            print(f"    üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            working_config = {
                                'api_key': api_data['api_key'],
                                'secret': api_data['secret'],
                                'passphrase': passphrase,
                                'sandbox': env_config['sandbox'],
                                'additional': additional
                            }
                            
                            print(f"\nüéØ –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê–ô–î–ï–ù–ê:")
                            print(f"   –°—Ä–µ–¥–∞: {env_config['name']}")
                            print(f"   Passphrase: '{passphrase}'")
                            print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional}")
                            return working_config
                            
                        except Exception as balance_error:
                            print(f"    ‚ö†Ô∏è –†—ã–Ω–∫–∏ OK, –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(balance_error)[:80]}")
                            print(f"    ‚úÖ –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫")
                            
                    except Exception as e:
                        error_msg = str(e)[:100]
                        print(f"    ‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                        if "50101" in error_msg:
                            print(f"    üîç –ö–æ–¥ 50101: API –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–µ")
                        elif "50105" in error_msg:
                            print(f"    üîç –ö–æ–¥ 50105: –ù–µ–≤–µ—Ä–Ω–∞—è passphrase")
                        elif "50104" in error_msg:
                            print(f"    üîç –ö–æ–¥ 50104: –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
                        elif "50103" in error_msg:
                            print(f"    üîç –ö–æ–¥ 50103: –ù–µ–≤–µ—Ä–Ω—ã–π timestamp")
    
    print(f"\nüìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {test_count}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    print(f"   –£—Å–ø–µ—Ö: {(success_count/test_count)*100:.1f}%")
    
    if success_count == 0:
        print(f"\n‚ùå –ù–ò –û–î–ù–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞ –≤ OKX –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
        print(f"   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ IP –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")
        print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        print(f"   4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á")
        return None
    
    return None

def test_ccxt_okx_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ OKX –≤ CCXT"""
    print("\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–î–ï–†–ñ–ö–ï OKX:")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ –∫–ª—é—á–µ–π
        okx = ccxt.okx()
        
        print(f"‚úÖ –í–µ—Ä—Å–∏—è CCXT: {ccxt.__version__}")
        print(f"‚úÖ OKX –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {hasattr(ccxt, 'okx')}")
        print(f"‚úÖ OKX sandbox –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {hasattr(okx, 'set_sandbox_mode')}")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {len([m for m in dir(okx) if not m.startswith('_')])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã—Ö API
        try:
            ticker = okx.fetch_ticker('BTC/USDT')
            print(f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ API —Ä–∞–±–æ—Ç–∞—é—Ç: BTC/USDT = ${ticker['last']:.2f}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—É–±–ª–∏—á–Ω—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {str(e)[:60]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OKX —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")

if __name__ == "__main__":
    test_ccxt_okx_info()
    working_config = test_okx_comprehensive()
    
    if working_config:
        print(f"\nüéâ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
