#!/usr/bin/env python3
"""
üöÄ –¢–ï–°–¢ –ù–ê–°–¢–†–û–ô–ö–ò –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–∞–º OKX, Bitget, Phemex
"""

import asyncio
import ccxt
import os
from production_config import API_KEYS, TRADING_CONFIG

async def test_real_trading_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –≤—Å–µ—Ö 3 –±–∏—Ä–∂–∞—Ö"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print(f"–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {TRADING_CONFIG['mode']}")
    print("=" * 60)
    
    exchanges_to_test = ['okx', 'bitget', 'phemex']
    results = {}
    
    for exchange_name in exchanges_to_test:
        print(f"\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {exchange_name.upper()}:")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
            api_config = API_KEYS.get(exchange_name, {})
            if not api_config.get('apiKey'):
                print(f"  ‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {exchange_name}")
                results[exchange_name] = False
                continue
                
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∏—Ä–∂–∏
            exchange_class = getattr(ccxt, exchange_name)
            exchange = exchange_class({
                'apiKey': api_config.get('apiKey', ''),
                'secret': api_config.get('secret', ''),
                'password': api_config.get('passphrase', ''),
                'sandbox': False,  # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                'enableRateLimit': True,
            })
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ demo –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if not hasattr(exchange, 'headers') or exchange.headers is None:
                exchange.headers = {}
                
            if exchange_name == 'okx':
                exchange.headers.pop('x-simulated-trading', None)
                print("  ‚úÖ OKX: demo –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–±—Ä–∞–Ω—ã")
            elif exchange_name == 'bitget':
                exchange.headers.pop('PAPTRADING', None)
                exchange.headers.pop('paptrading', None)
                print("  ‚úÖ Bitget: demo –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–±—Ä–∞–Ω—ã")
            elif exchange_name == 'phemex':
                exchange.set_sandbox_mode(False)
                print("  ‚úÖ Phemex: sandbox –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("  üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–∫–æ–≤...")
            markets = exchange.load_markets()
            usdt_pairs = [s for s in markets.keys() if s.endswith('/USDT')]
            print(f"  ‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(usdt_pairs)} USDT –ø–∞—Ä")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
            print("  üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
            try:
                balance = exchange.fetch_balance()
                total_balance_usd = 0
                active_assets = 0
                
                for currency, info in balance.items():
                    if isinstance(info, dict) and info.get('total', 0) > 0:
                        active_assets += 1
                        if currency == 'USDT':
                            total_balance_usd += info['total']
                
                print(f"  ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {active_assets} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤")
                if total_balance_usd > 0:
                    print(f"  üíµ USDT –±–∞–ª–∞–Ω—Å: {total_balance_usd:.2f}")
                
                results[exchange_name] = True
                
            except Exception as be:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(be)[:100]}")
                results[exchange_name] = 'partial'  # –†—ã–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –±–∞–ª–∞–Ω—Å –ø—Ä–æ–±–ª–µ–º–∞
                
            # await exchange.close()  # –ù–µ –≤—Å–µ –±–∏—Ä–∂–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç async close
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)[:150]}")
            results[exchange_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    successful = sum(1 for r in results.values() if r is True)
    partial = sum(1 for r in results.values() if r == 'partial')  
    failed = sum(1 for r in results.values() if r is False)
    
    print(f"  ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã: {successful}/3")
    print(f"  ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤—ã: {partial}/3") 
    print(f"  ‚ùå –ù–µ –≥–æ—Ç–æ–≤—ã: {failed}/3")
    
    for exchange_name, status in results.items():
        status_emoji = "‚úÖ" if status is True else "‚ö†Ô∏è" if status == 'partial' else "‚ùå"
        print(f"  {status_emoji} {exchange_name.upper()}: {'–ì–æ—Ç–æ–≤' if status is True else '–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤' if status == 'partial' else '–ù–µ –≥–æ—Ç–æ–≤'}")
    
    if successful >= 2:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ï!")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –±—É–¥—É—Ç –†–ï–ê–õ–¨–ù–´–ï —Å–¥–µ–ª–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("\n‚ö†Ô∏è –ù–ï–û–ë–•–û–î–ò–ú–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ")
    
    return results

if __name__ == "__main__":
    asyncio.run(test_real_trading_setup())
