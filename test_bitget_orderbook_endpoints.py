#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è orderbook Bitget
"""

import aiohttp
import asyncio
import json
from datetime import datetime

async def test_bitget_orderbook_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoint –¥–ª—è orderbook Bitget"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ORDERBOOK ENDPOINTS BITGET")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø–∞—Ä–∞
    test_symbol = "BTCUSDT"
    
    endpoints = [
        {
            'name': 'V1 Market Depth',
            'url': f'https://api.bitget.com/api/spot/v1/market/depth?symbol={test_symbol}&limit=10'
        },
        {
            'name': 'V2 Market Books',
            'url': f'https://api.bitget.com/api/v2/spot/market/orderbook?symbol={test_symbol}&limit=10'
        },
        {
            'name': 'V1 Public Depth',
            'url': f'https://api.bitget.com/api/spot/v1/public/depth?symbol={test_symbol}&limit=10'
        },
        {
            'name': 'V2 Market Depth',
            'url': f'https://api.bitget.com/api/v2/spot/market/books?symbol={test_symbol}&limit=10'
        }
    ]
    
    async with aiohttp.ClientSession() as session:
        for endpoint in endpoints:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint['name']}")
            print(f"üîó URL: {endpoint['url']}")
            
            try:
                async with session.get(endpoint['url']) as resp:
                    print(f"   üìã –°—Ç–∞—Ç—É—Å HTTP: {resp.status}")
                    
                    if resp.status == 200:
                        data = await resp.json()
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        print(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(data))} chars")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        if isinstance(data, dict):
                            print(f"   üóÇÔ∏è –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                            
                            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ orderbook
                            if 'data' in data and isinstance(data['data'], dict):
                                orderbook_data = data['data']
                                print(f"   üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ data: {list(orderbook_data.keys())}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º bids/asks
                                if 'bids' in orderbook_data and 'asks' in orderbook_data:
                                    bids = orderbook_data['bids'][:3]  # –ü–µ—Ä–≤—ã–µ 3
                                    asks = orderbook_data['asks'][:3]  # –ü–µ—Ä–≤—ã–µ 3
                                    
                                    print(f"   üí∞ Bids ({len(orderbook_data['bids'])}): {bids}")
                                    print(f"   üí∏ Asks ({len(orderbook_data['asks'])}): {asks}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                                    if bids and isinstance(bids[0], list) and len(bids[0]) >= 2:
                                        print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç bids –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: [price, volume]")
                                    if asks and isinstance(asks[0], list) and len(asks[0]) >= 2:
                                        print(f"   ‚úÖ –§–æ—Ä–º–∞—Ç asks –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: [price, volume]")
                                        
                                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                                        try:
                                            best_bid = float(bids[0][0])
                                            best_ask = float(asks[0][0])
                                            print(f"   üéØ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã: bid={best_bid:.6f}, ask={best_ask:.6f}")
                                        except (ValueError, IndexError) as e:
                                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω: {e}")
                            else:
                                print(f"   üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2)[:500]}...")
                                
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {resp.status}")
                        try:
                            error_data = await resp.text()
                            print(f"   üìÑ –û—à–∏–±–∫–∞: {error_data[:200]}...")
                        except:
                            pass
                            
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(test_bitget_orderbook_endpoints())
