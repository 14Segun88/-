"""
üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–ª—É–±–∏–Ω—ã –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫
"""

import logging
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class LiquidityAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    symbol: str
    exchange: str
    side: str  # 'buy' –∏–ª–∏ 'sell'
    available_volume: float
    avg_price: float
    price_impact: float  # –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É –≤ %
    depth_levels: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π –≤ —Å—Ç–∞–∫–∞–Ω–µ
    can_execute: bool
    reason: str = ""

class OrderBookAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–ª—É–±–∏–Ω—ã –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤"""
    
    def __init__(self):
        self.min_liquidity_usd = 5  # üî• –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–û: —Å–Ω–∏–∂–µ–Ω–æ –¥–æ $5 (–≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ $10)
        self.max_price_impact = 25.0  # üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 25% - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π slippage
        self.min_depth_levels = 1  # üî• –ú–∏–Ω–∏–º—É–º 1 —É—Ä–æ–≤–µ–Ω—å
        
    def analyze_liquidity(
        self, 
        orderbook: Dict,
        side: str,
        volume_usd: float,
        exchange: str,
        symbol: str
    ) -> LiquidityAnalysis:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –æ—Ä–¥–µ—Ä–±—É–∫–µ
        
        Args:
            orderbook: –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ {'bids': [], 'asks': []}
            side: 'buy' –∏–ª–∏ 'sell'
            volume_usd: –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –≤ USD
            exchange: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–∞–∫–∞–Ω–∞
            if side == 'buy':
                orders = orderbook.get('asks', [])  # –ü–æ–∫—É–ø–∞–µ–º –ø–æ –∞—Å–∫–∞–º
                best_price = orders[0][0] if orders else 0
            else:
                orders = orderbook.get('bids', [])  # –ü—Ä–æ–¥–∞–µ–º –ø–æ –±–∏–¥–∞–º
                best_price = orders[0][0] if orders else 0
            
            if not orders or len(orders) < self.min_depth_levels:
                return LiquidityAnalysis(
                    symbol=symbol,
                    exchange=exchange,
                    side=side,
                    available_volume=0,
                    avg_price=0,
                    price_impact=100,
                    depth_levels=len(orders) if orders else 0,
                    can_execute=False,
                    reason=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞: {len(orders)} —É—Ä–æ–≤–Ω–µ–π"
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –∏ —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
            total_volume = 0
            total_cost = 0
            levels_used = 0
            
            volume_needed = volume_usd / best_price if best_price > 0 else 0
            
            for price, amount in orders[:20]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 20 —É—Ä–æ–≤–Ω–µ–π
                if total_volume >= volume_needed:
                    break
                    
                level_volume = min(amount, volume_needed - total_volume)
                total_volume += level_volume
                total_cost += level_volume * price
                levels_used += 1
            
            if total_volume < volume_needed * 0.50:  # üî• –°–ù–ò–ñ–ï–ù–û: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 50% –æ–±—ä–µ–º–∞ –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ
                return LiquidityAnalysis(
                    symbol=symbol,
                    exchange=exchange,
                    side=side,
                    available_volume=total_volume * best_price,
                    avg_price=total_cost / total_volume if total_volume > 0 else 0,
                    price_impact=100,
                    depth_levels=len(orders),
                    can_execute=False,
                    reason=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º: –¥–æ—Å—Ç—É–ø–Ω–æ ${total_volume * best_price:.2f} –∏–∑ ${volume_usd:.2f}"
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫
            avg_price = total_cost / total_volume if total_volume > 0 else 0
            price_impact = abs((avg_price - best_price) / best_price * 100) if best_price > 0 else 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
            can_execute = (
                price_impact <= self.max_price_impact and
                total_volume * best_price >= self.min_liquidity_usd and
                levels_used >= self.min_depth_levels
            )
            
            reason = ""
            if not can_execute:
                if price_impact > self.max_price_impact:
                    reason = f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {price_impact:.2f}%"
                elif total_volume * best_price < self.min_liquidity_usd:
                    reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${total_volume * best_price:.2f}"
                else:
                    reason = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞–ª–æ —É—Ä–æ–≤–Ω–µ–π: {levels_used}"
            
            return LiquidityAnalysis(
                symbol=symbol,
                exchange=exchange,
                side=side,
                available_volume=total_volume * best_price,
                avg_price=avg_price,
                price_impact=price_impact,
                depth_levels=levels_used,
                can_execute=can_execute,
                reason=reason
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return LiquidityAnalysis(
                symbol=symbol,
                exchange=exchange,
                side=side,
                available_volume=0,
                avg_price=0,
                price_impact=100,
                depth_levels=0,
                can_execute=False,
                reason=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            )
    
    def check_slippage_risk(
        self,
        buy_orderbook: Dict,
        sell_orderbook: Dict,
        volume_usd: float
    ) -> Tuple[float, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∏—Å–∫ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏
        
        Returns:
            (expected_slippage_pct, is_acceptable)
        """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            buy_analysis = self.analyze_liquidity(
                buy_orderbook, 'buy', volume_usd, '', ''
            )
            sell_analysis = self.analyze_liquidity(
                sell_orderbook, 'sell', volume_usd, '', ''
            )
            
            # –°—É–º–º–∞—Ä–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            total_slippage = buy_analysis.price_impact + sell_analysis.price_impact
            
            # –ü—Ä–∏–µ–º–ª–µ–º–æ –µ—Å–ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –∏ –æ–±—â–∏–π slippage < 1%
            is_acceptable = (
                buy_analysis.can_execute and 
                sell_analysis.can_execute and
                total_slippage < 5.0  # üî• –£–í–ï–õ–ò–ß–ï–ù –¥–æ–ø—É—Å—Ç–∏–º—ã–π slippage –¥–æ 5%
            )
            
            return total_slippage, is_acceptable
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ slippage: {e}")
            return 100, False
    
    def find_optimal_volume(
        self,
        orderbook: Dict,
        side: str,
        max_volume_usd: float
    ) -> float:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ü–µ–Ω—É
        
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USD
        """
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–º—ã
            test_volumes = [
                max_volume_usd * 0.25,
                max_volume_usd * 0.5,
                max_volume_usd * 0.75,
                max_volume_usd
            ]
            
            optimal_volume = 0
            
            for volume in test_volumes:
                analysis = self.analyze_liquidity(
                    orderbook, side, volume, '', ''
                )
                
                if analysis.can_execute:
                    optimal_volume = volume
                else:
                    break  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –±–æ–ª—å—à–∏–π —Ç–æ–∂–µ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç
            
            return optimal_volume
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞: {e}")
            return 0
