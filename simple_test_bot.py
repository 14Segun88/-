#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç production –±–æ—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
"""

import asyncio
import aiohttp
import json
from datetime import datetime
from collections import defaultdict
import sys

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import logging
logging.getLogger('websockets').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def log(msg, color=None):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
    time_str = datetime.now().strftime("%H:%M:%S")
    if color:
        print(f"[{time_str}] {color}{msg}{Colors.ENDC}")
    else:
        print(f"[{time_str}] {msg}")

async def test_api_connections():
    """–¢–µ—Å—Ç REST API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
    log("=" * 60, Colors.HEADER)
    log("üöÄ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –ë–ò–†–ñ–ê–ú", Colors.HEADER)
    log("=" * 60, Colors.HEADER)
    
    results = {}
    
    async with aiohttp.ClientSession() as session:
        # MEXC
        try:
            url = "https://api.mexc.com/api/v3/ticker/24hr"
            async with session.get(url, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    usdt_pairs = [t['symbol'] for t in data if t['symbol'].endswith('USDT')]
                    results['mexc'] = {'status': 'OK', 'pairs': len(usdt_pairs)}
                    log(f"‚úÖ MEXC: {len(usdt_pairs)} USDT –ø–∞—Ä", Colors.GREEN)
                else:
                    results['mexc'] = {'status': 'ERROR', 'code': resp.status}
                    log(f"‚ùå MEXC: HTTP {resp.status}", Colors.RED)
        except Exception as e:
            results['mexc'] = {'status': 'ERROR', 'error': str(e)}
            log(f"‚ùå MEXC: {e}", Colors.RED)
        
        # Bybit
        try:
            url = "https://api.bybit.com/v5/market/tickers"
            params = {'category': 'spot'}
            async with session.get(url, params=params, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    tickers = data.get('result', {}).get('list', [])
                    usdt_pairs = [t['symbol'] for t in tickers if t['symbol'].endswith('USDT')]
                    results['bybit'] = {'status': 'OK', 'pairs': len(usdt_pairs)}
                    log(f"‚úÖ Bybit: {len(usdt_pairs)} USDT –ø–∞—Ä", Colors.GREEN)
                else:
                    results['bybit'] = {'status': 'ERROR', 'code': resp.status}
                    log(f"‚ùå Bybit: HTTP {resp.status}", Colors.RED)
        except Exception as e:
            results['bybit'] = {'status': 'ERROR', 'error': str(e)}
            log(f"‚ùå Bybit: {e}", Colors.RED)
        
        # Huobi
        try:
            url = "https://api.huobi.pro/market/tickers"
            async with session.get(url, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    tickers = data.get('data', [])
                    usdt_pairs = [t['symbol'] for t in tickers if t['symbol'].endswith('usdt')]
                    results['huobi'] = {'status': 'OK', 'pairs': len(usdt_pairs)}
                    log(f"‚úÖ Huobi: {len(usdt_pairs)} USDT –ø–∞—Ä", Colors.GREEN)
                else:
                    results['huobi'] = {'status': 'ERROR', 'code': resp.status}
                    log(f"‚ùå Huobi: HTTP {resp.status}", Colors.RED)
        except Exception as e:
            results['huobi'] = {'status': 'ERROR', 'error': str(e)}
            log(f"‚ùå Huobi: {e}", Colors.RED)
    
    return results

async def test_arbitrage_scan():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    log("\n" + "=" * 60, Colors.HEADER)
    log("üîç –ü–û–ò–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô", Colors.HEADER)
    log("=" * 60, Colors.HEADER)
    
    async with aiohttp.ClientSession() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã BTC/USDT —Å —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
        prices = {}
        
        # MEXC
        try:
            url = "https://api.mexc.com/api/v3/ticker/price"
            params = {'symbol': 'BTCUSDT'}
            async with session.get(url, params=params, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    prices['mexc'] = float(data['price'])
        except:
            pass
        
        # Bybit
        try:
            url = "https://api.bybit.com/v5/market/tickers"
            params = {'category': 'spot', 'symbol': 'BTCUSDT'}
            async with session.get(url, params=params, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get('result') and data['result'].get('list'):
                        prices['bybit'] = float(data['result']['list'][0]['lastPrice'])
        except:
            pass
        
        # Huobi
        try:
            url = "https://api.huobi.pro/market/detail/merged"
            params = {'symbol': 'btcusdt'}
            async with session.get(url, params=params, timeout=5) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get('tick'):
                        prices['huobi'] = float(data['tick']['close'])
        except:
            pass
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
        if len(prices) >= 2:
            log("\nüìä –¶–µ–Ω—ã BTC/USDT:", Colors.BLUE)
            for exchange, price in prices.items():
                log(f"  {exchange.upper()}: ${price:,.2f}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂
            min_exchange = min(prices.items(), key=lambda x: x[1])
            max_exchange = max(prices.items(), key=lambda x: x[1])
            
            spread = (max_exchange[1] - min_exchange[1]) / min_exchange[1] * 100
            
            log(f"\nüí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:", Colors.YELLOW)
            log(f"  –ö—É–ø–∏—Ç—å –Ω–∞ {min_exchange[0].upper()}: ${min_exchange[1]:,.2f}")
            log(f"  –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ {max_exchange[0].upper()}: ${max_exchange[1]:,.2f}")
            log(f"  –°–ø—Ä–µ–¥: {spread:.3f}%", Colors.GREEN if spread > 0.1 else Colors.YELLOW)
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
            fees = 0.2  # 0.1% –Ω–∞ –ø–æ–∫—É–ø–∫—É + 0.1% –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            net_profit = spread - fees
            
            if net_profit > 0:
                log(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.3f}% ‚úÖ", Colors.GREEN)
            else:
                log(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:.3f}% (—É–±—ã—Ç–æ–∫)", Colors.RED)
        else:
            log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", Colors.YELLOW)

async def test_websocket_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    log("\n" + "=" * 60, Colors.HEADER)
    log("üåê –¢–ï–°–¢ WEBSOCKET (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)", Colors.HEADER)
    log("=" * 60, Colors.HEADER)
    
    try:
        import websockets
        import json
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MEXC WebSocket
        log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MEXC WebSocket...", Colors.BLUE)
        
        uri = "wss://wbs.mexc.com/ws"
        received_messages = 0
        
        async with websockets.connect(uri) as ws:
            log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MEXC", Colors.GREEN)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ BTC/USDT —Ç–∏–∫–µ—Ä
            subscribe_msg = {
                "method": "SUBSCRIPTION", 
                "params": ["spot@public.deals.v3.api@BTCUSDT"]
            }
            await ws.send(json.dumps(subscribe_msg))
            log("üìù –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BTC/USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", Colors.BLUE)
            
            # –ü–æ–ª—É—á–∞–µ–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            start_time = datetime.now()
            while received_messages < 5:
                try:
                    msg = await asyncio.wait_for(ws.recv(), timeout=5)
                    data = json.loads(msg)
                    
                    if 'd' in data:  # –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
                        received_messages += 1
                        bid = data['d'].get('b', 'N/A')
                        ask = data['d'].get('a', 'N/A')
                        log(f"  üìà BTC/USDT - Bid: ${bid}, Ask: ${ask}")
                    
                except asyncio.TimeoutError:
                    log("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", Colors.YELLOW)
                    break
            
            elapsed = (datetime.now() - start_time).total_seconds()
            log(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {received_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed:.1f} —Å–µ–∫", Colors.GREEN)
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}", Colors.RED)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        await test_api_connections()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        await test_arbitrage_scan()
        
        # –¢–µ—Å—Ç WebSocket
        await test_websocket_simple()
        
        log("\n" + "=" * 60, Colors.HEADER)
        log("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´", Colors.HEADER)
        log("=" * 60, Colors.HEADER)
        
    except KeyboardInterrupt:
        log("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Colors.YELLOW)
    except Exception as e:
        log(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", Colors.RED)

if __name__ == "__main__":
    asyncio.run(main())
