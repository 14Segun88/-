#!/usr/bin/env python3
"""
üí∞ TRADING ENGINE
–î–≤–∏–∂–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
"""

import asyncio
import time
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, field
from enum import Enum
import aiohttp
import hmac
import hashlib
import json
from decimal import Decimal, ROUND_DOWN
from collections import defaultdict

from production_config import (
    API_KEYS, EXCHANGES_CONFIG, TRADING_CONFIG, 
    RISK_MANAGEMENT, POSITION_SIZING
)

logger = logging.getLogger('TradingEngine')

class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
    PENDING = "pending"
    PLACED = "placed"
    PARTIALLY_FILLED = "partially_filled"
    FILLED = "filled"
    CANCELLED = "cancelled"
    FAILED = "failed"

class OrderType(Enum):
    """–¢–∏–ø –æ—Ä–¥–µ—Ä–∞"""
    MARKET = "market"
    LIMIT = "limit"
    LIMIT_MAKER = "limit_maker"

@dataclass
class Order:
    """–û—Ä–¥–µ—Ä"""
    id: str
    exchange: str
    symbol: str
    side: str  # buy/sell
    type: OrderType
    price: float
    amount: float
    status: OrderStatus = OrderStatus.PENDING
    filled_amount: float = 0
    filled_price: float = 0
    commission: float = 0
    timestamp: float = field(default_factory=time.time)
    exchange_order_id: Optional[str] = None
    
    @property
    def is_filled(self) -> bool:
        return self.status == OrderStatus.FILLED
    
    @property
    def is_active(self) -> bool:
        return self.status in [OrderStatus.PENDING, OrderStatus.PLACED, OrderStatus.PARTIALLY_FILLED]
    
    @property
    def fill_ratio(self) -> float:
        return self.filled_amount / self.amount if self.amount > 0 else 0

@dataclass
class ArbitrageOpportunity:
    """–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
    type: str  # 'inter_exchange' –∏–ª–∏ 'triangular'
    path: List[str]  # –ü—É—Ç—å —Å–¥–µ–ª–∫–∏
    exchanges: List[str]
    symbols: List[str]
    prices: Dict[str, float]
    volumes: Dict[str, float]
    expected_profit_pct: float
    expected_profit_usd: float
    min_volume: float
    timestamp: float = field(default_factory=time.time)
    
    @property
    def age(self) -> float:
        return time.time() - self.timestamp
    
    @property
    def is_fresh(self) -> bool:
        return self.age < TRADING_CONFIG['max_opportunity_age']

class TradingEngine:
    """–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫"""
    
    def __init__(self):
        self.orders = {}
        self.active_positions = {}
        self.balance = defaultdict(lambda: defaultdict(float))
        self.trade_history = []
        self.session_stats = {
            'trades': 0,
            'successful': 0,
            'failed': 0,
            'total_profit_usd': 0,
            'total_profit_pct': 0,
            'total_volume': 0,
            'start_time': time.time()
        }
        self.exchange_clients = {}
        self.running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏—Ä–∂
        await self._init_exchange_clients()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        await self.update_balances()
        
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(self._monitor_orders())
        asyncio.create_task(self._risk_monitor())
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        self.running = False
        
        # –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        for order_id, order in self.orders.items():
            if order.is_active:
                await self.cancel_order(order)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._save_session_stats()
    
    async def _init_exchange_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∏—Ä–∂"""
        for exchange_id, config in EXCHANGES_CONFIG.items():
            if config['enabled'] and API_KEYS[exchange_id]['apiKey']:
                logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {config['name']}")
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
                self.exchange_clients[exchange_id] = {
                    'name': config['name'],
                    'api_key': API_KEYS[exchange_id]['apiKey'],
                    'secret': API_KEYS[exchange_id]['secret']
                }
    
    async def execute_arbitrage(self, opportunity: ArbitrageOpportunity) -> bool:
        """–ò—Å–ø–æ–ª–Ω–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É"""
        try:
            logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {opportunity.type}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            if not await self._check_risk_limits(opportunity):
                logger.warning("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
                return False
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = self._calculate_position_size(opportunity)
            if position_size < POSITION_SIZING['min_position_usd']:
                logger.warning(f"‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${position_size:.2f}")
                return False
            
            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if opportunity.type == 'inter_exchange':
                return await self._execute_inter_exchange(opportunity, position_size)
            elif opportunity.type == 'triangular':
                return await self._execute_triangular(opportunity, position_size)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {opportunity.type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return False
    
    async def _execute_inter_exchange(
        self, 
        opportunity: ArbitrageOpportunity, 
        position_size: float
    ) -> bool:
        """–ò—Å–ø–æ–ª–Ω–∏—Ç—å –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂"""
        try:
            buy_exchange = opportunity.exchanges[0]
            sell_exchange = opportunity.exchanges[1]
            symbol = opportunity.symbols[0]
            
            # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
            buy_price = opportunity.prices[f'{buy_exchange}_ask']
            sell_price = opportunity.prices[f'{sell_exchange}_bid']
            amount = position_size / buy_price
            
            logger.info(
                f"üìä –ú–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂ {symbol}: "
                f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {buy_exchange} @ ${buy_price:.4f}, "
                f"–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {sell_exchange} @ ${sell_price:.4f}, "
                f"–û–±—ä–µ–º: {amount:.4f}"
            )
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            if TRADING_CONFIG['mode'] == 'real':
                buy_task = self._place_order(
                    buy_exchange, symbol, 'buy', amount, buy_price
                )
                sell_task = self._place_order(
                    sell_exchange, symbol, 'sell', amount, sell_price
                )
                
                buy_order, sell_order = await asyncio.gather(
                    buy_task, sell_task, return_exceptions=True
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                if isinstance(buy_order, Exception) or isinstance(sell_order, Exception):
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
                    # –û—Ç–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                    if not isinstance(buy_order, Exception):
                        await self.cancel_order(buy_order)
                    if not isinstance(sell_order, Exception):
                        await self.cancel_order(sell_order)
                    return False
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                filled = await self._wait_for_fills([buy_order, sell_order])
                
                if filled:
                    # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                    profit = self._calculate_realized_profit(buy_order, sell_order)
                    self._update_stats(profit, position_size)
                    logger.info(f"‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂ —É—Å–ø–µ—à–µ–Ω! –ü—Ä–∏–±—ã–ª—å: ${profit:.2f}")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –û—Ä–¥–µ—Ä–∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                    return False
                    
            else:  # paper –∏–ª–∏ demo —Ä–µ–∂–∏–º
                # –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                commission_buy = position_size * EXCHANGES_CONFIG[buy_exchange]['taker_fee']
                commission_sell = position_size * EXCHANGES_CONFIG[sell_exchange]['taker_fee']
                
                gross_profit = (sell_price - buy_price) * amount
                net_profit = gross_profit - commission_buy - commission_sell
                
                self._log_paper_trade(
                    opportunity, position_size, gross_profit, net_profit
                )
                
                logger.info(
                    f"üìù [PAPER] –ê—Ä–±–∏—Ç—Ä–∞–∂: –ü—Ä–∏–±—ã–ª—å ${net_profit:.2f} "
                    f"({net_profit/position_size*100:.3f}%)"
                )
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return False
    
    async def _execute_triangular(
        self, 
        opportunity: ArbitrageOpportunity,
        position_size: float
    ) -> bool:
        """–ò—Å–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂"""
        try:
            exchange = opportunity.exchanges[0]
            path = opportunity.path
            
            logger.info(
                f"üìä –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–∞ {exchange}: "
                f"–ü—É—Ç—å {' -> '.join(path)}"
            )
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
            # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è 3 —Å–¥–µ–ª–æ–∫
            
            logger.warning("‚ö†Ô∏è –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {e}")
            return False
    
    async def _place_order(
        self,
        exchange: str,
        symbol: str,
        side: str,
        amount: float,
        price: Optional[float] = None
    ) -> Order:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ"""
        order = Order(
            id=f"{exchange}_{symbol}_{side}_{time.time()}",
            exchange=exchange,
            symbol=symbol,
            side=side,
            type=OrderType.LIMIT if price else OrderType.MARKET,
            price=price or 0,
            amount=amount
        )
        
        try:
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ –±–∏—Ä–∂–µ
            if exchange == 'mexc':
                await self._place_mexc_order(order)
            elif exchange == 'bybit':
                await self._place_bybit_order(order)
            elif exchange == 'huobi':
                await self._place_huobi_order(order)
            else:
                logger.warning(f"‚ö†Ô∏è –ë–∏—Ä–∂–∞ {exchange} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                order.status = OrderStatus.FAILED
                
            self.orders[order.id] = order
            return order
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            order.status = OrderStatus.FAILED
            self.orders[order.id] = order
            raise
    
    async def _place_mexc_order(self, order: Order):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ MEXC"""
        try:
            client = self.exchange_clients.get('mexc')
            if not client:
                raise Exception("MEXC –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            params = {
                'symbol': order.symbol.replace('/', ''),
                'side': order.side.upper(),
                'type': 'LIMIT' if order.type == OrderType.LIMIT else 'MARKET',
                'quantity': str(order.amount),
                'timestamp': int(time.time() * 1000)
            }
            
            if order.type == OrderType.LIMIT:
                params['price'] = str(order.price)
            
            # –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞
            query_string = '&'.join([f"{k}={v}" for k, v in params.items()])
            signature = hmac.new(
                client['secret'].encode('utf-8'),
                query_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            params['signature'] = signature
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            url = f"{EXCHANGES_CONFIG['mexc']['rest_url']}/api/v3/order"
            headers = {'X-MEXC-APIKEY': client['api_key']}
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, params=params, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        order.exchange_order_id = str(data['orderId'])
                        order.status = OrderStatus.PLACED
                        logger.info(f"‚úÖ MEXC –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order.exchange_order_id}")
                    else:
                        error = await resp.text()
                        raise Exception(f"MEXC API error: {error}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ MEXC –æ—Ä–¥–µ—Ä–∞: {e}")
            order.status = OrderStatus.FAILED
            raise
    
    async def _place_bybit_order(self, order: Order):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ Bybit"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit
        logger.warning("‚ö†Ô∏è Bybit –æ—Ä–¥–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        order.status = OrderStatus.FAILED
    
    async def _place_huobi_order(self, order: Order):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ Huobi"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Huobi
        logger.warning("‚ö†Ô∏è Huobi –æ—Ä–¥–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        order.status = OrderStatus.FAILED
    
    async def cancel_order(self, order: Order) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"""
        try:
            if not order.is_active:
                return True
                
            logger.info(f"üö´ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order.id}")
            
            # –û—Ç–º–µ–Ω–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–µ
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
            
            order.status = OrderStatus.CANCELLED
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    async def _wait_for_fills(
        self, 
        orders: List[Order], 
        timeout: float = 30
    ) -> bool:
        """–û–∂–∏–¥–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            all_filled = all(o.is_filled for o in orders)
            if all_filled:
                return True
                
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            for order in orders:
                if order.is_active:
                    await self._update_order_status(order)
            
            await asyncio.sleep(0.5)
        
        return False
    
    async def _update_order_status(self, order: Order):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
        # TODO: –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å –±–∏—Ä–∂–∏
        pass
    
    async def update_balances(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö"""
        try:
            for exchange_id in self.exchange_clients:
                balance = await self._get_exchange_balance(exchange_id)
                self.balance[exchange_id] = balance
                
            logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
    
    async def _get_exchange_balance(self, exchange: str) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å –±–∏—Ä–∂–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        return {'USDT': 1000.0}  # –ó–∞–≥–ª—É—à–∫–∞
    
    async def _check_risk_limits(self, opportunity: ArbitrageOpportunity) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∏—Å–∫-–ª–∏–º–∏—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–∑–∏—Ü–∏–π
        active_positions = sum(1 for o in self.orders.values() if o.is_active)
        if active_positions >= RISK_MANAGEMENT['max_concurrent_positions']:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞
        if self.session_stats['total_profit_usd'] < -RISK_MANAGEMENT['max_daily_loss']:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if opportunity.expected_profit_pct < TRADING_CONFIG['min_profit_threshold']:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–±—ã–ª—å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: {opportunity.expected_profit_pct:.3f}%")
            return False
        
        return True
    
    def _calculate_position_size(self, opportunity: ArbitrageOpportunity) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        base_size = POSITION_SIZING['default_position_usd']
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if opportunity.expected_profit_pct > 0.5:
            base_size *= 1.5
        elif opportunity.expected_profit_pct > 0.3:
            base_size *= 1.2
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ–±—ä–µ–º—É
        max_by_volume = opportunity.min_volume * 0.1  # 10% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±–∞–ª–∞–Ω—Å—É
        available_balance = min(
            self.balance[ex].get('USDT', 0) 
            for ex in opportunity.exchanges
        )
        max_by_balance = available_balance * 0.3  # 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        position_size = min(
            base_size,
            max_by_volume,
            max_by_balance,
            POSITION_SIZING['max_position_usd']
        )
        
        return max(position_size, POSITION_SIZING['min_position_usd'])
    
    def _calculate_realized_profit(
        self, 
        buy_order: Order, 
        sell_order: Order
    ) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å"""
        revenue = sell_order.filled_amount * sell_order.filled_price
        cost = buy_order.filled_amount * buy_order.filled_price
        total_commission = buy_order.commission + sell_order.commission
        
        return revenue - cost - total_commission
    
    def _update_stats(self, profit: float, volume: float):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.session_stats['trades'] += 1
        if profit > 0:
            self.session_stats['successful'] += 1
        else:
            self.session_stats['failed'] += 1
            
        self.session_stats['total_profit_usd'] += profit
        self.session_stats['total_volume'] += volume
        
        if volume > 0:
            profit_pct = (profit / volume) * 100
            self.session_stats['total_profit_pct'] = (
                self.session_stats['total_profit_usd'] / 
                self.session_stats['total_volume'] * 100
            )
    
    def _log_paper_trade(
        self, 
        opportunity: ArbitrageOpportunity,
        position_size: float,
        gross_profit: float,
        net_profit: float
    ):
        """–ó–∞–ø–∏—Å–∞—Ç—å paper-—Å–¥–µ–ª–∫—É"""
        trade = {
            'timestamp': time.time(),
            'type': opportunity.type,
            'exchanges': opportunity.exchanges,
            'symbols': opportunity.symbols,
            'position_size': position_size,
            'gross_profit': gross_profit,
            'net_profit': net_profit,
            'profit_pct': (net_profit / position_size * 100) if position_size > 0 else 0
        }
        
        self.trade_history.append(trade)
        self._update_stats(net_profit, position_size)
    
    async def _monitor_orders(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        while self.running:
            try:
                for order_id, order in list(self.orders.items()):
                    if order.is_active:
                        await self._update_order_status(order)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                        if time.time() - order.timestamp > 60:
                            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ä–¥–µ—Ä–∞ {order_id}")
                            await self.cancel_order(order)
                
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
                await asyncio.sleep(10)
    
    async def _risk_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–æ–≤"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                if self.session_stats['total_profit_usd'] < -RISK_MANAGEMENT['stop_loss']:
                    logger.critical("üõë –°–¢–û–ü-–õ–û–°–°! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    await self.stop()
                    break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                if self.session_stats['total_profit_usd'] > RISK_MANAGEMENT['take_profit']:
                    logger.info("üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
                    await self.stop()
                    break
                
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤: {e}")
                await asyncio.sleep(30)
    
    def _save_session_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        duration = (time.time() - self.session_stats['start_time']) / 3600
        
        logger.info("=" * 50)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–°–ò–ò")
        logger.info(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —á–∞—Å–æ–≤")
        logger.info(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.session_stats['trades']}")
        logger.info(f"–£—Å–ø–µ—à–Ω—ã—Ö: {self.session_stats['successful']}")
        logger.info(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.session_stats['failed']}")
        logger.info(f"–û–±—â–∏–π –æ–±—ä–µ–º: ${self.session_stats['total_volume']:.2f}")
        logger.info(f"–ü—Ä–∏–±—ã–ª—å USD: ${self.session_stats['total_profit_usd']:.2f}")
        logger.info(f"–ü—Ä–∏–±—ã–ª—å %: {self.session_stats['total_profit_pct']:.3f}%")
        logger.info("=" * 50)
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            **self.session_stats,
            'active_orders': sum(1 for o in self.orders.values() if o.is_active),
            'total_orders': len(self.orders),
            'balances': dict(self.balance)
        }
