#!/usr/bin/env python3
"""
Demo Trading Startup Script
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import asyncio
import sys
import os
from datetime import datetime
import signal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'demo_bot_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

async def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥—É–ª–µ–π
    try:
        import ccxt
    except ImportError:
        errors.append("‚ùå –ú–æ–¥—É–ª—å ccxt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install ccxt")
    
    try:
        import pandas
    except ImportError:
        errors.append("‚ùå –ú–æ–¥—É–ª—å pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install pandas")
    
    try:
        import aiohttp
    except ImportError:
        errors.append("‚ùå –ú–æ–¥—É–ª—å aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install aiohttp")
    
    try:
        import websockets
    except ImportError:
        warnings.append("‚ö†Ô∏è –ú–æ–¥—É–ª—å websockets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. WebSocket –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('mega_arbitrage_bot.py'):
        errors.append("‚ùå –§–∞–π–ª mega_arbitrage_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not os.path.exists('risk_manager.py'):
        warnings.append("‚ö†Ô∏è –§–∞–π–ª risk_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    
    if not os.path.exists('order_executor.py'):
        warnings.append("‚ö†Ô∏è –§–∞–π–ª order_executor.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
    
    if not os.path.exists('demo_config.py'):
        warnings.append("‚ö†Ô∏è –§–∞–π–ª demo_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if errors:
        print("\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"  {error}")
        return False
    
    if warnings:
        print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"  {warning}")
    
    print("\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True

async def run_demo_bot():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            import demo_keys
            print("‚úÖ –î–µ–º–æ –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except ImportError:
            print("‚ö†Ô∏è –î–µ–º–æ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ")
        
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        from mega_arbitrage_bot import MegaArbitrageBot
        
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö –ê–†–ë–ò–¢–†–ê–ñ–ù–û–ì–û –ë–û–¢–ê –í –î–ï–ú–û –†–ï–ñ–ò–ú–ï")
        print("="*60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            from demo_config import DEMO_SETTINGS, RISK_LIMITS
            print("\nüìä –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–ú–û:")
            print(f"  ‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${DEMO_SETTINGS['initial_balance_usd']}")
            print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${DEMO_SETTINGS['max_position_size']}")
            print(f"  ‚Ä¢ –ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç: {DEMO_SETTINGS['min_profit_threshold']}%")
            print(f"  ‚Ä¢ –ú–∞–∫—Å. –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: ${DEMO_SETTINGS['max_daily_loss']}")
            print(f"  ‚Ä¢ –ú–∞–∫—Å. –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {DEMO_SETTINGS['max_open_positions']}")
            print(f"  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {'–î–∞' if DEMO_SETTINGS['enable_real_orders'] else '–ù–µ—Ç (Paper Trading)'}")
            
            print("\nüõ°Ô∏è –õ–ò–ú–ò–¢–´ –†–ò–°–ö–û–í:")
            print(f"  ‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {RISK_LIMITS['max_slippage_pct']}%")
            print(f"  ‚Ä¢ –¢–∞–π–º–∞—É—Ç –ø–æ–∑–∏—Ü–∏–∏: {RISK_LIMITS['position_timeout_sec']} —Å–µ–∫")
            print(f"  ‚Ä¢ –ú–∏–Ω. –±–∞–ª–∞–Ω—Å –±–∏—Ä–∂–∏: ${RISK_LIMITS['min_exchange_balance']}")
        except ImportError:
            print("\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        print("\n" + "="*60)
        print("üìù –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print("  1. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ (Paper Trading)")
        print("  2. –í—Å–µ —Å–¥–µ–ª–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        print("  3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ CSV —Ñ–∞–π–ª")
        print("  4. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60 + "\n")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = MegaArbitrageBot()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        await bot.run_bot()
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "ü§ñ –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –ë–û–¢ - –î–ï–ú–û –í–ï–†–°–ò–Ø 1.0 ü§ñ".center(60))
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not await check_requirements():
        print("\n‚ùå –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n")
        return
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:")
    print("–≠—Ç–æ –î–ï–ú–û –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")
    print("–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö –±–µ–∑ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫? (y/n): ").lower()
    if response != 'y':
        print("–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await run_demo_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
