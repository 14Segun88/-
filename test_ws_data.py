#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–∫–∞–Ω–æ–≤
"""

import asyncio
import json
import websockets
import time
from datetime import datetime

class TestWebSocketData:
    def __init__(self):
        self.data_received = {
            'mexc': {'tickers': 0, 'orderbooks': 0, 'last_price': 0},
            'bybit': {'tickers': 0, 'orderbooks': 0, 'last_price': 0},
            'huobi': {'tickers': 0, 'orderbooks': 0, 'last_price': 0},
        }
    
    async def test_mexc(self):
        """–¢–µ—Å—Ç MEXC WebSocket"""
        try:
            url = 'wss://wbs.mexc.com/ws'
            async with websockets.connect(url) as ws:
                print("‚úÖ MEXC –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ticker BTC/USDT
                sub = {
                    "method": "SUBSCRIPTION",
                    "params": ["spot@public.miniTickers.v3.api@BTCUSDT"]
                }
                await ws.send(json.dumps(sub))
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
                start = time.time()
                while time.time() - start < 10:
                    try:
                        msg = await asyncio.wait_for(ws.recv(), timeout=1)
                        data = json.loads(msg)
                        
                        if 'd' in data:
                            self.data_received['mexc']['tickers'] += 1
                            if 'p' in data['d']:
                                self.data_received['mexc']['last_price'] = float(data['d']['p'])
                                
                    except asyncio.TimeoutError:
                        continue
                    except Exception as e:
                        print(f"MEXC –æ—à–∏–±–∫–∞: {e}")
                        
        except Exception as e:
            print(f"‚ùå MEXC –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {e}")
    
    async def test_bybit(self):
        """–¢–µ—Å—Ç Bybit WebSocket"""
        try:
            url = 'wss://stream.bybit.com/v5/public/spot'
            async with websockets.connect(url) as ws:
                print("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ticker
                sub = {
                    "op": "subscribe",
                    "args": ["tickers.BTCUSDT"]
                }
                await ws.send(json.dumps(sub))
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
                start = time.time()
                while time.time() - start < 10:
                    try:
                        msg = await asyncio.wait_for(ws.recv(), timeout=1)
                        data = json.loads(msg)
                        
                        if 'data' in data:
                            self.data_received['bybit']['tickers'] += 1
                            if 'lastPrice' in data['data']:
                                self.data_received['bybit']['last_price'] = float(data['data']['lastPrice'])
                                
                    except asyncio.TimeoutError:
                        continue
                    except Exception as e:
                        print(f"Bybit –æ—à–∏–±–∫–∞: {e}")
                        
        except Exception as e:
            print(f"‚ùå Bybit –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {e}")
    
    async def test_huobi(self):
        """–¢–µ—Å—Ç Huobi WebSocket"""
        try:
            url = 'wss://api.huobi.pro/ws'
            async with websockets.connect(url) as ws:
                print("‚úÖ Huobi –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ticker
                sub = {
                    "sub": "market.btcusdt.ticker",
                    "id": "id1"
                }
                await ws.send(json.dumps(sub))
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
                start = time.time()
                while time.time() - start < 10:
                    try:
                        msg = await asyncio.wait_for(ws.recv(), timeout=1)
                        # Huobi –∏—Å–ø–æ–ª—å–∑—É–µ—Ç gzip
                        import gzip
                        data = json.loads(gzip.decompress(msg))
                        
                        if 'tick' in data:
                            self.data_received['huobi']['tickers'] += 1
                            if 'close' in data['tick']:
                                self.data_received['huobi']['last_price'] = float(data['tick']['close'])
                        
                        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping
                        if 'ping' in data:
                            await ws.send(json.dumps({'pong': data['ping']}))
                            
                    except asyncio.TimeoutError:
                        continue
                    except Exception as e:
                        print(f"Huobi –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                        
        except Exception as e:
            print(f"‚ùå Huobi –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {e}")
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBSOCKET –î–ê–ù–ù–´–•")
        print("="*60)
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print("-"*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.test_mexc(),
            self.test_bybit(),
            self.test_huobi()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        for exchange, data in self.data_received.items():
            status = "‚úÖ" if data['tickers'] > 0 else "‚ùå"
            print(f"\n{exchange.upper()}:")
            print(f"  {status} Ticker —Å–æ–æ–±—â–µ–Ω–∏–π: {data['tickers']}")
            print(f"  üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ BTC: ${data['last_price']:.2f}")
            
            if data['tickers'] == 0:
                print(f"  ‚ö†Ô∏è  WebSocket –ù–ï –ü–û–õ–£–ß–ê–ï–¢ –¥–∞–Ω–Ω—ã–µ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        prices = [d['last_price'] for d in self.data_received.values() if d['last_price'] > 0]
        if len(prices) >= 2:
            spread = (max(prices) - min(prices)) / min(prices) * 100
            print(f"\nüìà –ú–ï–ñ–ë–ò–†–ñ–ï–í–û–ô –°–ü–†–ï–î:")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${min(prices):.2f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${max(prices):.2f}")
            print(f"  –°–ø—Ä–µ–¥: {spread:.3f}%")
            
            if spread > 0.2:
                print(f"  üíé –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨!")
            else:
                print(f"  ‚ö†Ô∏è  –°–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")

if __name__ == "__main__":
    tester = TestWebSocketData()
    asyncio.run(tester.run_tests())
