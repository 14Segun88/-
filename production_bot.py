#!/usr/bin/env python3
"""
Production Arbitrage Bot - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
–§–æ–∫—É—Å –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–∏—Ä–∂–∞—Ö –∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
"""
import asyncio
import ccxt.async_support as ccxt
import json
import time
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('production_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# API –ö–õ–Æ–ß–ò
API_CREDENTIALS = {
    'mexc': {
        'apiKey': 'mx0vglAj5GaknRsyUQ',
        'secret': '83911cc1cd784568832b624fbfb19751',
        'enableRateLimit': True,
        'options': {'defaultType': 'spot'}
    },
    'okx': {
        'apiKey': '',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'secret': '',
        'password': '',
        'enableRateLimit': True,
        'options': {'defaultType': 'spot'}
    },
    'kucoin': {
        'apiKey': '',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'secret': '',
        'password': '',
        'enableRateLimit': True
    }
}

# –ö–æ–º–∏—Å—Å–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂
EXCHANGES_CONFIG = {
    'mexc': {
        'maker_fee': 0.0,     # 0% maker fee!
        'taker_fee': 0.001,   # 0.1% taker
        'min_order_size': 10  # $10 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
    },
    'okx': {
        'maker_fee': 0.0008,  # 0.08% maker
        'taker_fee': 0.001,   # 0.1% taker
        'min_order_size': 10
    },
    'kucoin': {
        'maker_fee': 0.001,   # 0.1% maker
        'taker_fee': 0.001,   # 0.1% taker
        'min_order_size': 10
    }
}

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TRADING_CONFIG = {
    'min_profit_threshold': 0.10,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.1%
    'position_size_usd': 100,      # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $100
    'max_positions': 3,             # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    'use_maker_orders': True,       # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å maker –æ—Ä–¥–µ—Ä–∞
    'price_improvement': 0.01,      # –£–ª—É—á—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è maker 0.01%
    'order_timeout': 10,            # –¢–∞–π–º–∞—É—Ç –æ—Ä–¥–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    'min_volume_24h': 100000        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 24—á
}

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
TRADING_PAIRS = [
    'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT', 
    'DOGE/USDT', 'ADA/USDT', 'AVAX/USDT', 'DOT/USDT',
    'LTC/USDT', 'LINK/USDT', 'UNI/USDT', 'ATOM/USDT'
]

class ProductionArbitrageBot:
    def __init__(self):
        self.exchanges = {}
        self.prices = {}
        self.orderbooks = {}
        self.balances = {}
        self.is_running = True
        self.active_positions = []
        self.total_trades = 0
        self.successful_trades = 0
        self.total_profit_usd = 0
        self.last_opportunity_time = {}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API –∫–ª—é—á–µ–π."""
        logger.info("=" * 60)
        logger.info("PRODUCTION ARBITRAGE BOT - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø")
        logger.info("=" * 60)
        
        for exchange_id, credentials in API_CREDENTIALS.items():
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
                exchange_class = getattr(ccxt, exchange_id)
                
                # –î–ª—è –±–∏—Ä–∂ –±–µ–∑ API –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
                if not credentials.get('apiKey'):
                    exchange = exchange_class({
                        'enableRateLimit': True,
                        'options': credentials.get('options', {})
                    })
                    logger.info(f"üì° {exchange_id.upper()}: –ü—É–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ API –∫–ª—é—á–µ–π)")
                else:
                    exchange = exchange_class(credentials)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
                await exchange.load_markets()
                self.exchanges[exchange_id] = exchange
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏)
                if credentials.get('apiKey'):
                    try:
                        balance = await exchange.fetch_balance()
                        usdt_balance = balance.get('USDT', {}).get('free', 0)
                        self.balances[exchange_id] = usdt_balance
                        logger.info(f"‚úÖ {exchange_id.upper()}: –ü–æ–¥–∫–ª—é—á–µ–Ω | –ë–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}")
                    except Exception as e:
                        self.balances[exchange_id] = 0
                        logger.info(f"‚úÖ {exchange_id.upper()}: –ü–æ–¥–∫–ª—é—á–µ–Ω | –ë–∞–ª–∞–Ω—Å: –ø—Ä–æ–≤–µ—Ä–∫–∞...")
                else:
                    self.balances[exchange_id] = 0
                    logger.info(f"‚úÖ {exchange_id.upper()}: –ü–æ–¥–∫–ª—é—á–µ–Ω | –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    
            except Exception as e:
                logger.error(f"‚ùå {exchange_id.upper()}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {str(e)[:100]}")
                
        if not self.exchanges:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂!")
            return False
            
        logger.info(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {len(self.exchanges)}")
        logger.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${sum(self.balances.values()):.2f}")
        logger.info(f"‚öôÔ∏è  –†–µ–∂–∏–º: {'MAKER –æ—Ä–¥–µ—Ä–∞' if TRADING_CONFIG['use_maker_orders'] else 'MARKET –æ—Ä–¥–µ—Ä–∞'}")
        logger.info(f"üìà –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: {TRADING_CONFIG['min_profit_threshold']}%")
        logger.info(f"üíµ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${TRADING_CONFIG['position_size_usd']}")
        
        return True
        
    async def fetch_ticker(self, exchange_id: str, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞."""
        try:
            exchange = self.exchanges[exchange_id]
            ticker = await exchange.fetch_ticker(symbol)
            
            if ticker and ticker['bid'] and ticker['ask']:
                return {
                    'bid': ticker['bid'],
                    'ask': ticker['ask'],
                    'volume': ticker['quoteVolume'] or 0,
                    'timestamp': time.time()
                }
        except Exception as e:
            return None
            
    async def fetch_orderbook(self, exchange_id: str, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫."""
        try:
            exchange = self.exchanges[exchange_id]
            orderbook = await exchange.fetch_order_book(symbol, 5)
            
            if orderbook and orderbook['bids'] and orderbook['asks']:
                return {
                    'bids': orderbook['bids'][:5],
                    'asks': orderbook['asks'][:5],
                    'timestamp': time.time()
                }
        except Exception as e:
            return None
            
    async def update_prices(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º –∏ –±–∏—Ä–∂–∞–º."""
        tasks = []
        
        for symbol in TRADING_PAIRS:
            for exchange_id in self.exchanges:
                tasks.append(self.fetch_ticker_with_meta(exchange_id, symbol))
                
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω
        for result in results:
            if isinstance(result, dict) and result:
                symbol = result['symbol']
                exchange_id = result['exchange']
                
                if symbol not in self.prices:
                    self.prices[symbol] = {}
                    
                self.prices[symbol][exchange_id] = {
                    'bid': result['bid'],
                    'ask': result['ask'],
                    'volume': result['volume'],
                    'timestamp': result['timestamp']
                }
                
    async def fetch_ticker_with_meta(self, exchange_id: str, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–∫–µ—Ä —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
        ticker = await self.fetch_ticker(exchange_id, symbol)
        if ticker:
            ticker['exchange'] = exchange_id
            ticker['symbol'] = symbol
        return ticker
        
    def find_arbitrage_opportunities(self) -> List[dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."""
        opportunities = []
        current_time = time.time()
        
        for symbol in self.prices:
            if len(self.prices[symbol]) < 2:
                continue
                
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ bid –∏ ask
            best_bid = 0
            best_bid_exchange = None
            best_ask = float('inf')
            best_ask_exchange = None
            min_volume = float('inf')
            
            for exchange_id, price_data in self.prices[symbol].items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 3 —Å–µ–∫—É–Ω–¥)
                if current_time - price_data['timestamp'] > 3:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
                if price_data['volume'] < TRADING_CONFIG['min_volume_24h']:
                    continue
                    
                if price_data['bid'] > best_bid:
                    best_bid = price_data['bid']
                    best_bid_exchange = exchange_id
                    
                if price_data['ask'] < best_ask:
                    best_ask = price_data['ask']
                    best_ask_exchange = exchange_id
                    
                min_volume = min(min_volume, price_data['volume'])
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            if best_bid_exchange and best_ask_exchange and best_bid > best_ask:
                spread_pct = (best_bid - best_ask) / best_ask * 100
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                if TRADING_CONFIG['use_maker_orders']:
                    buy_fee = EXCHANGES_CONFIG[best_ask_exchange]['maker_fee'] * 100
                    sell_fee = EXCHANGES_CONFIG[best_bid_exchange]['maker_fee'] * 100
                else:
                    buy_fee = EXCHANGES_CONFIG[best_ask_exchange]['taker_fee'] * 100
                    sell_fee = EXCHANGES_CONFIG[best_bid_exchange]['taker_fee'] * 100
                    
                net_profit = spread_pct - buy_fee - sell_fee
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                if net_profit >= TRADING_CONFIG['min_profit_threshold']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç—É –ø–∞—Ä—É –Ω–µ–¥–∞–≤–Ω–æ
                    last_trade_key = f"{symbol}_{best_ask_exchange}_{best_bid_exchange}"
                    last_trade_time = self.last_opportunity_time.get(last_trade_key, 0)
                    
                    if current_time - last_trade_time > 60:  # –ú–∏–Ω–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
                        opportunities.append({
                            'symbol': symbol,
                            'buy_exchange': best_ask_exchange,
                            'sell_exchange': best_bid_exchange,
                            'buy_price': best_ask,
                            'sell_price': best_bid,
                            'spread_pct': spread_pct,
                            'buy_fee': buy_fee,
                            'sell_fee': sell_fee,
                            'net_profit': net_profit,
                            'volume': min_volume,
                            'timestamp': current_time
                        })
                        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        opportunities.sort(key=lambda x: x['net_profit'], reverse=True)
        return opportunities
        
    async def execute_arbitrage(self, opportunity: dict) -> bool:
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É."""
        symbol = opportunity['symbol']
        buy_exchange = opportunity['buy_exchange']
        sell_exchange = opportunity['sell_exchange']
        
        logger.info("=" * 60)
        logger.info(f"üéØ –ê–†–ë–ò–¢–†–ê–ñ: {symbol}")
        logger.info(f"   –ú–∞—Ä—à—Ä—É—Ç: {buy_exchange.upper()} ‚Üí {sell_exchange.upper()}")
        logger.info(f"   –°–ø—Ä–µ–¥: {opportunity['spread_pct']:.3f}%")
        logger.info(f"   –ö–æ–º–∏—Å—Å–∏–∏: {opportunity['buy_fee']:.3f}% + {opportunity['sell_fee']:.3f}%")
        logger.info(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity['net_profit']:.3f}%")
        logger.info(f"   –û–±—ä–µ–º 24—á: ${opportunity['volume']:,.0f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏)
        if API_CREDENTIALS[buy_exchange].get('apiKey'):
            if self.balances.get(buy_exchange, 0) < TRADING_CONFIG['position_size_usd']:
                logger.warning(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ {buy_exchange.upper()}")
                return False
        else:
            logger.info(f"   ‚ÑπÔ∏è  {buy_exchange.upper()}: –°–∏–º—É–ª—è—Ü–∏—è (–Ω–µ—Ç API –∫–ª—é—á–µ–π)")
            # –í —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if len(self.active_positions) >= TRADING_CONFIG['max_positions']:
            logger.warning(f"   ‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π ({TRADING_CONFIG['max_positions']})")
            return False
            
        try:
            amount = TRADING_CONFIG['position_size_usd'] / opportunity['buy_price']
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            buy_book = await self.fetch_orderbook(buy_exchange, symbol)
            sell_book = await self.fetch_orderbook(sell_exchange, symbol)
            
            if not buy_book or not sell_book:
                logger.warning("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω—ã")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            buy_liquidity = sum(ask[1] * ask[0] for ask in buy_book['asks'][:3])
            sell_liquidity = sum(bid[1] * bid[0] for bid in sell_book['bids'][:3])
            
            if buy_liquidity < TRADING_CONFIG['position_size_usd'] * 2:
                logger.warning(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É: ${buy_liquidity:.0f}")
                return False
                
            if sell_liquidity < TRADING_CONFIG['position_size_usd'] * 2:
                logger.warning(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: ${sell_liquidity:.0f}")
                return False
                
            logger.info(f"   ‚úÖ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: –ø–æ–∫—É–ø–∫–∞ ${buy_liquidity:.0f}, –ø—Ä–æ–¥–∞–∂–∞ ${sell_liquidity:.0f}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞
            if TRADING_CONFIG['use_maker_orders']:
                # Maker –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
                improvement = TRADING_CONFIG['price_improvement'] / 100
                buy_price = opportunity['buy_price'] * (1 - improvement)
                sell_price = opportunity['sell_price'] * (1 + improvement)
                
                logger.info(f"   üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ MAKER –æ—Ä–¥–µ—Ä–æ–≤:")
                logger.info(f"      –ü–æ–∫—É–ø–∫–∞: {amount:.4f} @ ${buy_price:.4f}")
                logger.info(f"      –ü—Ä–æ–¥–∞–∂–∞: {amount:.4f} @ ${sell_price:.4f}")
                
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
                buy_task = self.place_limit_order(buy_exchange, symbol, 'buy', amount, buy_price)
                sell_task = self.place_limit_order(sell_exchange, symbol, 'sell', amount, sell_price)
                
                results = await asyncio.gather(buy_task, sell_task, return_exceptions=True)
                buy_order = results[0]
                sell_order = results[1]
                
            else:
                # Market –æ—Ä–¥–µ—Ä–∞
                logger.info(f"   üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ MARKET –æ—Ä–¥–µ—Ä–æ–≤:")
                logger.info(f"      –ü–æ–∫—É–ø–∫–∞: {amount:.4f}")
                logger.info(f"      –ü—Ä–æ–¥–∞–∂–∞: {amount:.4f}")
                
                buy_task = self.place_market_order(buy_exchange, symbol, 'buy', amount)
                sell_task = self.place_market_order(sell_exchange, symbol, 'sell', amount)
                
                results = await asyncio.gather(buy_task, sell_task, return_exceptions=True)
                buy_order = results[0]
                sell_order = results[1]
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if isinstance(buy_order, Exception):
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {buy_order}")
                return False
                
            if isinstance(sell_order, Exception):
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_order}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å buy –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω
                if not isinstance(buy_order, Exception):
                    await self.cancel_order(buy_exchange, symbol, buy_order.get('id'))
                return False
                
            # –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            profit_usd = TRADING_CONFIG['position_size_usd'] * opportunity['net_profit'] / 100
            self.total_profit_usd += profit_usd
            self.successful_trades += 1
            self.total_trades += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
            trade_key = f"{symbol}_{buy_exchange}_{sell_exchange}"
            self.last_opportunity_time[trade_key] = time.time()
            
            logger.info(f"   ‚úÖ –ò–°–ü–û–õ–ù–ï–ù–û!")
            logger.info(f"   üí∞ –ü—Ä–∏–±—ã–ª—å: ${profit_usd:.2f}")
            logger.info(f"   üìä –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
            logger.info(f"   üìà –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.successful_trades}/{self.total_trades}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
            self.save_trade({
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'buy_exchange': buy_exchange,
                'sell_exchange': sell_exchange,
                'buy_order_id': buy_order.get('id', 'N/A'),
                'sell_order_id': sell_order.get('id', 'N/A'),
                'amount': amount,
                'buy_price': opportunity['buy_price'],
                'sell_price': opportunity['sell_price'],
                'net_profit_pct': opportunity['net_profit'],
                'profit_usd': profit_usd,
                'total_profit': self.total_profit_usd
            })
            
            return True
            
        except Exception as e:
            logger.error(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
            
    async def place_limit_order(self, exchange_id: str, symbol: str, 
                                side: str, amount: float, price: float):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä."""
        try:
            exchange = self.exchanges[exchange_id]
            order = await exchange.create_limit_order(symbol, side, amount, price)
            return order
        except Exception as e:
            return e
            
    async def place_market_order(self, exchange_id: str, symbol: str, 
                                 side: str, amount: float):
        """–†–∞–∑–º–µ—â–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä."""
        try:
            exchange = self.exchanges[exchange_id]
            order = await exchange.create_market_order(symbol, side, amount)
            return order
        except Exception as e:
            return e
            
    async def cancel_order(self, exchange_id: str, symbol: str, order_id: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä."""
        try:
            exchange = self.exchanges[exchange_id]
            await exchange.cancel_order(order_id, symbol)
        except:
            pass
            
    def save_trade(self, trade_data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ."""
        filename = 'production_trades.json'
        
        try:
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    trades = json.load(f)
            else:
                trades = []
                
            trades.append(trade_data)
            
            with open(filename, 'w') as f:
                json.dump(trades, f, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            
    async def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞."""
        scan_interval = 2  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        status_interval = 30  # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        last_status_time = 0
        
        while self.is_running:
            try:
                current_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
                await self.update_prices()
                
                # –ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                opportunities = self.find_arbitrage_opportunities()
                
                # –ò—Å–ø–æ–ª–Ω—è–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                if opportunities:
                    best = opportunities[0]
                    await self.execute_arbitrage(best)
                    
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
                if current_time - last_status_time > status_interval:
                    active_prices = sum(1 for symbol_prices in self.prices.values() 
                                      for price in symbol_prices.values() 
                                      if current_time - price['timestamp'] < 5)
                    
                    logger.info("-" * 40)
                    logger.info(f"üìä –°–¢–ê–¢–£–°:")
                    logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–Ω: {active_prices}")
                    logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
                    logger.info(f"   –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {self.successful_trades}/{self.total_trades}")
                    logger.info(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
                    
                    if opportunities and len(opportunities) > 0:
                        logger.info(f"   –õ—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {opportunities[0]['net_profit']:.3f}%")
                    
                    last_status_time = current_time
                    
                await asyncio.sleep(scan_interval)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
                
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await self.initialize():
            return
            
        logger.info("\n" + "=" * 60)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò")
        logger.info("=" * 60)
        
        try:
            await self.main_loop()
        except KeyboardInterrupt:
            logger.info("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for exchange in self.exchanges.values():
                await exchange.close()
                
            logger.info("\n" + "=" * 60)
            logger.info("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.total_trades}")
            logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.successful_trades}")
            if self.total_trades > 0:
                success_rate = self.successful_trades / self.total_trades * 100
                logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            logger.info(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit_usd:.2f}")
            if self.successful_trades > 0:
                avg_profit = self.total_profit_usd / self.successful_trades
                logger.info(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}")
            logger.info("=" * 60)
            
async def main():
    bot = ProductionArbitrageBot()
    await bot.run()
    
if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("   PRODUCTION ARBITRAGE BOT")
    print("   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("=" * 60 + "\n")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
