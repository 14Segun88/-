#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bitget –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
"""

import asyncio
import sys
import traceback
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
from exchange_connector import ExchangeConnector
from production_config import TRADING_CONFIG, EXCHANGES_CONFIG

async def debug_bitget_initialization():
    """–û—Ç–ª–∞–¥–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bitget"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò BITGET")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Bitget
    print("\nüìã 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BITGET:")
    bitget_config = EXCHANGES_CONFIG.get('bitget', {})
    for key, value in bitget_config.items():
        print(f"   {key}: {value}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
    print(f"\nüíº 2. –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: {TRADING_CONFIG.get('mode', 'demo')}")
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ExchangeConnector
    print("\nüîå 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EXCHANGE CONNECTOR:")
    try:
        connector = ExchangeConnector(mode=TRADING_CONFIG['mode'])
        print("   ‚úÖ ExchangeConnector —Å–æ–∑–¥–∞–Ω")
        
        # 4. –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Bitget
        print("\nüéØ 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–û–õ–¨–ö–û BITGET:")
        await connector.initialize(['bitget'])
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Bitget
        print("\nüìä 5. –°–¢–ê–¢–£–° BITGET:")
        if 'bitget' in connector.exchanges:
            exchange = connector.exchanges['bitget']
            print(f"   ‚úÖ Bitget CCXT –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {type(exchange)}")
            print(f"   üì° Sandbox mode: {getattr(exchange, 'sandbox', 'N/A')}")
            print(f"   üîë Has API keys: {bool(getattr(exchange, 'apiKey', None))}")
            
            # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É markets
            print("\nüìà 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò MARKETS:")
            try:
                markets = await exchange.load_markets()
                spot_pairs = {symbol for symbol, market in markets.items() 
                             if market.get('type') == 'spot' and market.get('active')}
                print(f"   ‚úÖ Markets –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(markets)} total, {len(spot_pairs)} SPOT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞—Ä
                priority_pairs = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
                found_pairs = [pair for pair in priority_pairs if pair in spot_pairs]
                print(f"   üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã: {found_pairs}")
                
                # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ orderbook
                print("\nüìñ 7. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ORDERBOOK:")
                if 'BTC/USDT' in spot_pairs:
                    try:
                        orderbook = await connector.fetch_orderbook('bitget', 'BTC/USDT')
                        if orderbook and orderbook.get('bids') and orderbook.get('asks'):
                            print(f"   ‚úÖ Orderbook –ø–æ–ª—É—á–µ–Ω –¥–ª—è BTC/USDT:")
                            print(f"      –õ—É—á—à–∏–π bid: {orderbook['bids'][0][0]}")
                            print(f"      –õ—É—á—à–∏–π ask: {orderbook['asks'][0][0]}")
                        else:
                            print(f"   ‚ùå Orderbook –ø—É—Å—Ç –¥–ª—è BTC/USDT")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook: {e}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ markets: {e}")
                traceback.print_exc()
                
        else:
            print("   ‚ùå Bitget –ù–ï –Ω–∞–π–¥–µ–Ω –≤ connector.exchanges")
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏: {list(connector.exchanges.keys())}")
            
        await connector.close()
        
    except Exception as e:
        print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
    
    print("\nüèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    asyncio.run(debug_bitget_initialization())
