#!/usr/bin/env python3
"""
Production Arbitrage Bot v2.0 - 10/10 Ready
–ü–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ 7 –±–∏—Ä–∂–∞—Ö
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass, field
from datetime import datetime
import json
import os
from exchange_connector import ExchangeConnector
from risk_manager import RiskManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('production_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('ProductionBot')

@dataclass
class ArbitrageOpportunity:
    """–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"""
    symbol: str
    buy_exchange: str
    sell_exchange: str
    buy_price: float
    sell_price: float
    volume: float
    net_profit_pct: float
    gross_profit_pct: float
    total_fees_pct: float
    timestamp: float
    execution_time_ms: Optional[float] = None
    profit_usd: Optional[float] = None

@dataclass
class BotStatistics:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    start_time: float = field(default_factory=time.time)
    total_scans: int = 0
    opportunities_found: int = 0
    trades_executed: int = 0
    successful_trades: int = 0
    failed_trades: int = 0
    total_profit: float = 0.0
    total_volume: float = 0.0
    best_opportunity_pct: float = 0.0
    errors_count: int = 0
    last_trade_time: float = 0.0
    active_exchanges: set = field(default_factory=set)
    connected_exchanges: set = field(default_factory=set)
    active_pairs: set = field(default_factory=set)
    status: str = "initializing"

class ProductionArbitrageBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å production –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, mode: str = 'demo'):
        """
        Args:
            mode: 'demo' –¥–ª—è –¥–µ–º–æ —Å—á–µ—Ç–æ–≤, 'real' –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        self.mode = mode
        self.connector = ExchangeConnector(mode=mode)
        self.risk_manager = RiskManager()
        self.statistics = BotStatistics()
        self.running = False
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = {
            'min_profit_threshold': 0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.1% (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
            'max_position_size_usd': 100.0,  # –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $100
            'min_position_size_usd': 10.0,   # –ú–∏–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ $10
            'scan_interval_seconds': 1.0,     # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            'order_timeout_ms': 5000,         # –¢–∞–π–º–∞—É—Ç –æ—Ä–¥–µ—Ä–∞ 5 —Å–µ–∫
            'max_slippage_pct': 0.5,         # –ú–∞–∫—Å —Å–ª–∏–ø–ø–µ–¥–∂ 0.5%
            'enable_trading': True,           # –í–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
            'max_concurrent_trades': 3,       # –ú–∞–∫—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            'cooldown_seconds': 30,          # –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ –Ω–∞ –ø–∞—Ä–µ
        }
        
        # –¶–µ–ª–µ–≤—ã–µ –±–∏—Ä–∂–∏
        self.target_exchanges = ['mexc', 'bybit', 'huobi', 'binance', 'okx', 'kucoin', 'kraken']
        
        # –¶–µ–ª–µ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø –ª–∏–∫–≤–∏–¥–Ω—ã–µ)
        self.target_pairs = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'AVAX/USDT', 'DOT/USDT', 'MATIC/USDT',
            'LINK/USDT', 'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT',
            'XLM/USDT', 'ALGO/USDT', 'NEAR/USDT', 'FIL/USDT', 'APT/USDT'
        ]
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        self.trade_history = []
        self.concurrent_trades = 0
        self.active_trades = set()
        self.cooldowns = {}  # –ö—É–ª–¥–∞—É–Ω—ã –¥–ª—è –ø–∞—Ä –ø–æ—Å–ª–µ —Å–¥–µ–ª–æ–∫
        self.is_running = True  
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Production Arbitrage Bot v2.0 –≤ —Ä–µ–∂–∏–º–µ {self.mode.upper()}")
        logger.info(f"üí∞ –ö–∞–ø–∏—Ç–∞–ª: $100 –Ω–∞ –∫–∞–∂–¥–æ–π –∏–∑ 7 –±–∏—Ä–∂ = $700 –æ–±—â–∏–π")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.target_pairs)} —Ç–æ–ø –ø–∞—Ä")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
        await self.connector.initialize(self.target_exchanges)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for exchange_id in self.connector.exchanges:
            self.statistics.connected_exchanges.add(exchange_id)
            self.statistics.active_exchanges.add(exchange_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –ø–∞—Ä—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        self.common_pairs = await self.find_common_pairs()
        self.statistics.active_pairs = self.common_pairs
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(self.common_pairs)} –æ–±—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.risk_manager.limits.max_position_size_usd = self.config['max_position_size_usd']
        self.risk_manager.limits.max_open_positions = self.config['max_concurrent_trades']
        self.risk_manager.limits.min_profit_threshold = self.config['min_profit_threshold']
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ
        self.statistics.status = "active"
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        return True
    
    async def find_common_pairs(self):
        available_pairs = {}
        for exchange_id in self.statistics.connected_exchanges:
            markets = await self.connector.fetch_markets(exchange_id)
            available_pairs[exchange_id] = set(markets)
            logger.info(f"üìà {exchange_id.upper()}: {len(markets)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä")
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –ø–∞—Ä—ã
        if available_pairs:
            common_pairs = set.intersection(*available_pairs.values())
            return common_pairs & set(self.target_pairs)
        else:
            return set()
    
    async def scan_opportunities(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        opportunities = []
        self.statistics.total_scans += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        active_exchanges = list(self.statistics.active_exchanges)
        if len(active_exchanges) < 2:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂: {len(active_exchanges)}")
            return opportunities
        
        logger.debug(f"–°–∫–∞–Ω–∏—Ä—É–µ–º {len(self.statistics.active_pairs)} –ø–∞—Ä –Ω–∞ {len(active_exchanges)} –±–∏—Ä–∂–∞—Ö")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É
        scan_count = 0
        for symbol in self.statistics.active_pairs:
            try:
                scan_count += 1
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±–∏—Ä–∂
                for i in range(len(active_exchanges)):
                    for j in range(i + 1, len(active_exchanges)):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                        opp1 = await self.connector.calculate_arbitrage(
                            symbol, active_exchanges[i], active_exchanges[j]
                        )
                        if opp1 and opp1['net_profit_pct'] >= self.config['min_profit_threshold']:
                            opportunities.append(self._create_opportunity(opp1))
                            self.statistics.opportunities_found += 1
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} {active_exchanges[i]}‚Üí{active_exchanges[j]} –ø—Ä–∏–±—ã–ª—å {opp1['net_profit_pct']:.3f}%")
                        
                        opp2 = await self.connector.calculate_arbitrage(
                            symbol, active_exchanges[j], active_exchanges[i]
                        )
                        if opp2 and opp2['net_profit_pct'] >= self.config['min_profit_threshold']:
                            opportunities.append(self._create_opportunity(opp2))
                            self.statistics.opportunities_found += 1
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å: {symbol} {active_exchanges[j]}‚Üí{active_exchanges[i]} –ø—Ä–∏–±—ã–ª—å {opp2['net_profit_pct']:.3f}%")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
                self.statistics.errors_count += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        opportunities.sort(key=lambda x: x.net_profit_pct, reverse=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if opportunities:
            self.statistics.opportunities_found += len(opportunities)
            best = opportunities[0]
            if best.net_profit_pct > self.statistics.best_opportunity_pct:
                self.statistics.best_opportunity_pct = best.net_profit_pct
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, "
                       f"–ª—É—á—à–∞—è: {best.symbol} {best.buy_exchange}‚Üí{best.sell_exchange} "
                       f"{best.net_profit_pct:.3f}%")
        
        return opportunities
    
    def _create_opportunity(self, data: Dict) -> ArbitrageOpportunity:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        return ArbitrageOpportunity(
            symbol=data['symbol'],
            buy_exchange=data['buy_exchange'],
            sell_exchange=data['sell_exchange'],
            buy_price=data['buy_price'],
            sell_price=data['sell_price'],
            volume=data['available_volume'],
            net_profit_pct=data['net_profit_pct'],
            gross_profit_pct=data['gross_profit_pct'],
            total_fees_pct=data['total_fees_pct'],
            timestamp=data['timestamp']
        )
    
    async def execute_arbitrage(self, opportunity: ArbitrageOpportunity) -> bool:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫-–ª–∏–º–∏—Ç—ã
            is_valid, reason = self.risk_manager.validate_opportunity({
                'symbol': opportunity.symbol,
                'position_size_usd': self.config['max_position_size_usd'],
                'expected_profit_pct': opportunity.net_profit_pct
            })
            
            if not is_valid:
                logger.warning(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {reason}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            trade_key = f"{opportunity.symbol}_{opportunity.buy_exchange}_{opportunity.sell_exchange}"
            if trade_key in self.last_trade_time:
                elapsed = time.time() - self.last_trade_time[trade_key]
                if elapsed < self.config['cooldown_seconds']:
                    logger.debug(f"‚è≥ –ö—É–ª–¥–∞—É–Ω {trade_key}: –∂–¥–∞—Ç—å –µ—â–µ {self.config['cooldown_seconds']-elapsed:.0f}—Å")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            if self.concurrent_trades >= self.config['max_concurrent_trades']:
                logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.concurrent_trades}")
                return False
            
            self.concurrent_trades += 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size_usd = min(
                self.config['max_position_size_usd'],
                opportunity.volume * opportunity.buy_price * 0.95  # 95% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
            )
            
            if position_size_usd < self.config['min_position_size_usd']:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${position_size_usd:.2f}")
                self.concurrent_trades -= 1
                return False
            
            amount = position_size_usd / opportunity.buy_price
            
            logger.info(f"üöÄ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: {opportunity.symbol} "
                       f"{opportunity.buy_exchange}‚Üí{opportunity.sell_exchange} "
                       f"–æ–±—ä–µ–º: {amount:.4f}, –æ–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {opportunity.net_profit_pct:.3f}%")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            buy_task = self.connector.create_order(
                opportunity.buy_exchange,
                opportunity.symbol,
                'buy',
                amount,
                opportunity.buy_price,
                'limit'
            )
            
            sell_task = self.connector.create_order(
                opportunity.sell_exchange,
                opportunity.symbol,
                'sell',
                amount,
                opportunity.sell_price,
                'limit'
            )
            
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–æ–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
            buy_order, sell_order = await asyncio.gather(buy_task, sell_task)
            
            if buy_order and sell_order:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                buy_cost = amount * opportunity.buy_price
                sell_revenue = amount * opportunity.sell_price
                buy_fee = buy_cost * self.connector.get_real_fee(opportunity.buy_exchange)
                sell_fee = sell_revenue * self.connector.get_real_fee(opportunity.sell_exchange)
                
                profit_usd = sell_revenue - buy_cost - buy_fee - sell_fee
                profit_pct = (profit_usd / buy_cost) * 100
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.statistics.trades_executed += 1
                self.statistics.successful_trades += 1
                self.statistics.total_profit_usd += profit_usd
                self.statistics.total_volume_usd += buy_cost
                self.statistics.last_trade_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                self.risk_manager.update_position({
                    'symbol': opportunity.symbol,
                    'exchanges': f"{opportunity.buy_exchange}-{opportunity.sell_exchange}",
                    'size': position_size_usd,
                    'profit': profit_usd
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                opportunity.execution_time_ms = (time.time() - start_time) * 1000
                opportunity.profit_usd = profit_usd
                self.trade_history.append(opportunity)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω
                self.last_trade_time[trade_key] = time.time()
                
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ü—Ä–∏–±—ã–ª—å: ${profit_usd:.2f} ({profit_pct:.3f}%), "
                           f"–≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {opportunity.execution_time_ms:.0f}–º—Å")
                
                self.concurrent_trades -= 1
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä–∞")
                self.statistics.failed_trades += 1
                self.concurrent_trades -= 1
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            self.statistics.failed_trades += 1
            self.statistics.errors_count += 1
            self.concurrent_trades -= 1
            return False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            stats_counter = 0
            while self.is_running:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if stats_counter % 5 == 0:
                        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{stats_counter+1}: {len(self.statistics.active_exchanges)} –±–∏—Ä–∂, {len(self.statistics.active_pairs)} –ø–∞—Ä")
                    
                    # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    opportunities = await self.scan_opportunities()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                    valid_opportunities = [
                        opp for opp in opportunities
                        if opp.net_profit_pct >= self.config['min_profit_threshold']
                    ]
                    
                    if valid_opportunities:
                        valid_opportunities.sort(key=lambda x: x.net_profit_pct, reverse=True)
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(valid_opportunities)} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                        
                        # –ò—Å–ø–æ–ª–Ω—è–µ–º –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        for opp in valid_opportunities[:self.config['max_concurrent_trades']]:
                            if opp.symbol not in self.active_trades:
                                logger.info(f"üí∞ –ò—Å–ø–æ–ª–Ω—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ {opp.symbol}: {opp.buy_exchange}‚Üí{opp.sell_exchange} –ø—Ä–∏–±—ã–ª—å {opp.net_profit_pct:.3f}%")
                                asyncio.create_task(self.execute_arbitrage(opp))
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ø–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                    stats_counter += 1
                    if stats_counter % 10 == 0:
                        self.print_statistics()
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    await asyncio.sleep(self.config['scan_interval_seconds'])
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    self.statistics.errors_count += 1
                    await asyncio.sleep(self.config['scan_interval_seconds'])
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.is_running = False
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        runtime = time.time() - self.statistics.start_time
        hours = runtime / 3600
        
        stats = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –ë–û–¢–ê                  ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:          {runtime/60:.1f} –º–∏–Ω ({hours:.2f} —á)
‚ïë üîç –í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:    {self.statistics.total_scans}
‚ïë üí° –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:  {self.statistics.opportunities_found}
‚ïë üìà –ò—Å–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫:      {self.statistics.trades_executed}
‚ïë ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:       {self.statistics.successful_trades}
‚ïë ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:      {self.statistics.failed_trades}
‚ïë üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:         ${self.statistics.total_profit:.2f}
‚ïë üìä –û–±—â–∏–π –æ–±—ä–µ–º:           ${self.statistics.total_volume:.2f}
‚ïë üéØ –õ—É—á—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:    {self.statistics.best_opportunity_pct:.3f}%
‚ïë üè¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂:         {len(self.statistics.active_exchanges)}/7
‚ïë üí± –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä:          {len(self.statistics.active_pairs)}
‚ïë ‚ö†Ô∏è  –û—à–∏–±–æ–∫:                {self.statistics.errors_count}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        logger.info(stats)
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_statistics()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        if self.trade_history:
            with open('trade_history.json', 'w') as f:
                json.dump(
                    [vars(t) for t in self.trade_history],
                    f,
                    indent=2,
                    default=str
                )
            logger.info(f"üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(self.trade_history)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.connector.close()
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode = os.getenv('TRADING_MODE', 'demo')
    
    if mode == 'real':
        confirm = input("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞ –≤ –†–ï–ê–õ–¨–ù–û–ú —Ä–µ–∂–∏–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
        if confirm.lower() != 'yes':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = ProductionArbitrageBot(mode=mode)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    success = await bot.initialize()
    if not success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    # –ó–∞–ø—É—Å–∫
    try:
        await bot.run()
    except KeyboardInterrupt:
        await bot.shutdown()


if __name__ == "__main__":
    asyncio.run(main())
