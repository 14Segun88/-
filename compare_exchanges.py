#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—Ç–æ–≤ –Ω–∞ Huobi –∏ Binance
"""

import os
import re
import json
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime

def analyze_exchange_logs(log_directory, exchange_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏"""
    results = {
        'exchange': exchange_name,
        'total_trades': 0,
        'successful_trades': 0,
        'failed_trades': 0,
        'total_profit_usd': 0.0,
        'profits': [],
        'timestamps': []
    }
    
    if not os.path.exists(log_directory):
        print(f"Directory {log_directory} not found")
        return results
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
    log_files = [f for f in os.listdir(log_directory) if f.endswith('.log')]
    
    for log_file in log_files:
        log_path = os.path.join(log_directory, log_file)
        
        with open(log_path, 'r', encoding='utf-8') as f:
            for line in f:
                # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
                if 'TRADE RESULT:' in line:
                    results['total_trades'] += 1
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                    profit_match = re.search(r'Net profit: ([+-]?\d+\.?\d*)%', line)
                    if profit_match:
                        profit_pct = float(profit_match.group(1))
                        profit_usd = (profit_pct / 100) * 15  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º $15 –ø–æ–∑–∏—Ü–∏—é
                        results['profits'].append(profit_pct)
                        results['total_profit_usd'] += profit_usd
                        
                        if profit_pct > 0:
                            results['successful_trades'] += 1
                        else:
                            results['failed_trades'] += 1
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    timestamp_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
                    if timestamp_match:
                        results['timestamps'].append(timestamp_match.group(1))
    
    return results

def compare_exchanges():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–≤—É—Ö –±–∏—Ä–∂"""
    print("="*80)
    print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í HUOBI vs BINANCE")
    print("="*80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Huobi
    huobi_results = analyze_exchange_logs('res', 'Huobi')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Binance
    binance_results = analyze_exchange_logs('res_binance', 'Binance')
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    print(f"\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:")
    print(f"{'–ú–µ—Ç—Ä–∏–∫–∞':<25} {'Huobi':<15} {'Binance':<15} {'–†–∞–∑–Ω–∏—Ü–∞':<15}")
    print("-" * 70)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    print(f"{'–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫':<25} {huobi_results['total_trades']:<15} {binance_results['total_trades']:<15} {binance_results['total_trades'] - huobi_results['total_trades']:+<15}")
    
    # –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    huobi_success_rate = (huobi_results['successful_trades'] / max(huobi_results['total_trades'], 1)) * 100
    binance_success_rate = (binance_results['successful_trades'] / max(binance_results['total_trades'], 1)) * 100
    print(f"{'–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫':<25} {huobi_results['successful_trades']:<15} {binance_results['successful_trades']:<15} {binance_results['successful_trades'] - huobi_results['successful_trades']:+<15}")
    print(f"{'–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞':<25} {huobi_success_rate:.1f}%{'':<10} {binance_success_rate:.1f}%{'':<10} {binance_success_rate - huobi_success_rate:+.1f}%{'':<10}")
    
    # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
    print(f"{'–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å USD':<25} ${huobi_results['total_profit_usd']:.4f}{'':<8} ${binance_results['total_profit_usd']:.4f}{'':<8} ${binance_results['total_profit_usd'] - huobi_results['total_profit_usd']:+.4f}{'':<8}")
    
    # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–¥–µ–ª–∫—É
    huobi_avg = np.mean(huobi_results['profits']) if huobi_results['profits'] else 0
    binance_avg = np.mean(binance_results['profits']) if binance_results['profits'] else 0
    print(f"{'–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å %':<25} {huobi_avg:.4f}%{'':<9} {binance_avg:.4f}%{'':<9} {binance_avg - huobi_avg:+.4f}%{'':<9}")
    
    # –ö–æ–º–∏—Å—Å–∏–∏
    print(f"{'–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É':<25} {'~0.225%':<15} {'~0.075%':<15} {'-0.15%':<15}")
    
    print("\n" + "="*80)
    
    # –í—ã–≤–æ–¥—ã
    print("üéØ –í–´–í–û–î–´:")
    if binance_results['total_profit_usd'] > huobi_results['total_profit_usd']:
        diff = binance_results['total_profit_usd'] - huobi_results['total_profit_usd']
        print(f"‚úÖ Binance –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ${diff:.4f}")
    elif huobi_results['total_profit_usd'] > binance_results['total_profit_usd']:
        diff = huobi_results['total_profit_usd'] - binance_results['total_profit_usd']
        print(f"‚úÖ Huobi –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ${diff:.4f}")
    else:
        print("‚öñÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
    
    print(f"üìà –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–µ —É—Å–ø–µ—Ö–∞: {binance_success_rate - huobi_success_rate:+.1f}%")
    print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∫–æ–º–∏—Å—Å–∏—è—Ö —Å Binance: ~0.15% –∑–∞ —Å–¥–µ–ª–∫—É")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    create_comparison_chart(huobi_results, binance_results)
    
    return huobi_results, binance_results

def create_comparison_chart(huobi_results, binance_results):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏
    exchanges = ['Huobi', 'Binance']
    profits = [huobi_results['total_profit_usd'], binance_results['total_profit_usd']]
    colors = ['red' if p < 0 else 'green' for p in profits]
    
    ax1.bar(exchanges, profits, color=colors, alpha=0.7)
    ax1.set_title('–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (USD)')
    ax1.set_ylabel('–ü—Ä–∏–±—ã–ª—å ($)')
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—Ö–∞
    success_rates = [
        (huobi_results['successful_trades'] / max(huobi_results['total_trades'], 1)) * 100,
        (binance_results['successful_trades'] / max(binance_results['total_trades'], 1)) * 100
    ]
    
    ax2.bar(exchanges, success_rates, color=['orange', 'blue'], alpha=0.7)
    ax2.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
    ax2.set_ylabel('–£—Å–ø–µ—Ö (%)')
    ax2.set_ylim(0, 100)
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    total_trades = [huobi_results['total_trades'], binance_results['total_trades']]
    ax3.bar(exchanges, total_trades, color=['purple', 'cyan'], alpha=0.7)
    ax3.set_title('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
    ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax3.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–¥–µ–ª–∫—É
    avg_profits = [
        np.mean(huobi_results['profits']) if huobi_results['profits'] else 0,
        np.mean(binance_results['profits']) if binance_results['profits'] else 0
    ]
    colors = ['red' if p < 0 else 'green' for p in avg_profits]
    
    ax4.bar(exchanges, avg_profits, color=colors, alpha=0.7)
    ax4.set_title('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–¥–µ–ª–∫—É (%)')
    ax4.set_ylabel('–ü—Ä–∏–±—ã–ª—å (%)')
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    comparison_filename = f"exchange_comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
    plt.savefig(comparison_filename, dpi=300, bbox_inches='tight')
    print(f"\nüìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {comparison_filename}")
    plt.close()

if __name__ == "__main__":
    compare_exchanges()
