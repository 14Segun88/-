#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ production –±–æ—Ç–∞
"""

import asyncio
import logging
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s | %(levelname)-8s | %(name)-12s | %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('TestBot')

async def test_websocket_connections():
    """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    logger.info("=" * 60)
    logger.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION –ë–û–¢–ê")
    logger.info("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from websocket_manager import WebSocketManager
        from trading_engine import TradingEngine
        
        logger.info("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
        ws_manager = WebSocketManager()
        logger.info("‚úÖ WebSocketManager —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        trading_engine = TradingEngine()
        logger.info("‚úÖ TradingEngine —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂
        from production_config import EXCHANGES_CONFIG
        active_exchanges = [ex for ex, conf in EXCHANGES_CONFIG.items() if conf['enabled']]
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∏—Ä–∂–∏: {active_exchanges}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞—Ä
        logger.info("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä...")
        
        # –î–ª—è MEXC
        if 'mexc' in active_exchanges:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                try:
                    url = "https://api.mexc.com/api/v3/ticker/24hr"
                    async with session.get(url, timeout=10) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            usdt_pairs = [t['symbol'] for t in data if t['symbol'].endswith('USDT')][:5]
                            logger.info(f"‚úÖ MEXC: –Ω–∞–π–¥–µ–Ω–æ {len(data)} –ø–∞—Ä, –ø—Ä–∏–º–µ—Ä—ã USDT: {usdt_pairs}")
                        else:
                            logger.error(f"‚ùå MEXC API error: {resp.status}")
                except Exception as e:
                    logger.error(f"‚ùå MEXC connection error: {e}")
        
        # –î–ª—è Bybit
        if 'bybit' in active_exchanges:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                try:
                    url = "https://api.bybit.com/v5/market/tickers"
                    params = {'category': 'spot'}
                    async with session.get(url, params=params, timeout=10) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            if data.get('result'):
                                tickers = data['result'].get('list', [])
                                usdt_pairs = [t['symbol'] for t in tickers if t['symbol'].endswith('USDT')][:5]
                                logger.info(f"‚úÖ Bybit: –Ω–∞–π–¥–µ–Ω–æ {len(tickers)} –ø–∞—Ä, –ø—Ä–∏–º–µ—Ä—ã USDT: {usdt_pairs}")
                        else:
                            logger.error(f"‚ùå Bybit API error: {resp.status}")
                except Exception as e:
                    logger.error(f"‚ùå Bybit connection error: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–∞–º
        test_pairs = ['BTC/USDT', 'ETH/USDT']
        logger.info(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã: {test_pairs}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä
        await ws_manager.start(test_pairs)
        logger.info("‚úÖ WebSocket manager –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (5 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = ws_manager.get_statistics()
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WEBSOCKET:")
        logger.info(f"  –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {stats['messages_received']}")
        logger.info(f"  –û—à–∏–±–æ–∫: {stats['errors']}")
        logger.info(f"  –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –±–∏—Ä–∂: {stats['connected_exchanges']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏
        logger.info("\nüìö –ü–û–õ–£–ß–ï–ù–ù–´–ï –û–†–î–ï–†–ë–£–ö–ò:")
        for symbol in test_pairs:
            books = ws_manager.get_orderbooks(symbol)
            if books:
                for exchange, book in books.items():
                    if book and book.bids and book.asks:
                        logger.info(f"  {symbol} –Ω–∞ {exchange}:")
                        logger.info(f"    Bid: ${book.bids[0][0]:.2f}")
                        logger.info(f"    Ask: ${book.asks[0][0]:.2f}")
                        logger.info(f"    Spread: {(book.asks[0][0] - book.bids[0][0])/book.bids[0][0]*100:.3f}%")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        logger.info("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        await ws_manager.stop()
        
        logger.info("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_websocket_connections()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    logger.info(f"üïê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {datetime.now()}")
    asyncio.run(main())
