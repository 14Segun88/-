#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏.
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å OKX, KuCoin –∏ MEXC —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API.
"""
import asyncio
import ccxt.async_support as ccxt
import time
from datetime import datetime
import csv
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MIN_PROFIT_THRESHOLD = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.05% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
POSITION_SIZE_USD = 100      # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
SCAN_INTERVAL = 2             # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ë–∏—Ä–∂–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
EXCHANGES = {
    'okx': {'taker_fee': 0.001},      # 0.1%
    'kucoin': {'taker_fee': 0.001},   # 0.1%  
    'mexc': {'taker_fee': 0.001}      # 0.1%
}

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂)
SYMBOLS = [
    'BTC/USDT', 'ETH/USDT', 'SOL/USDT', 'XRP/USDT', 'DOGE/USDT',
    'ADA/USDT', 'AVAX/USDT', 'DOT/USDT', 'LTC/USDT',
    'UNI/USDT', 'LINK/USDT', 'ATOM/USDT', 'FIL/USDT', 'NEAR/USDT'
]

class SimpleArbitrageBot:
    def __init__(self):
        self.clients = {}
        self.prices = {}
        self.is_running = True
        self.opportunities_found = 0
        self.paper_trades = []
        self.total_profit = 0
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CCXT –∫–ª–∏–µ–Ω—Ç—ã."""
        for exchange_name in EXCHANGES.keys():
            try:
                exchange_class = getattr(ccxt, exchange_name)
                self.clients[exchange_name] = exchange_class({
                    'enableRateLimit': True,
                    'timeout': 10000
                })
                print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {exchange_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {exchange_name}: {e}")
                
    async def fetch_prices(self, exchange_name):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏."""
        client = self.clients.get(exchange_name)
        if not client:
            return
            
        try:
            tickers = await client.fetch_tickers(SYMBOLS)
            
            for symbol, ticker in tickers.items():
                if ticker['bid'] and ticker['ask']:
                    if symbol not in self.prices:
                        self.prices[symbol] = {}
                    
                    self.prices[symbol][exchange_name] = {
                        'bid': ticker['bid'],
                        'ask': ticker['ask'],
                        'timestamp': time.time()
                    }
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å {exchange_name}: {e}")
            
    async def collect_prices_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ —Ü–µ–Ω."""
        while self.is_running:
            tasks = [self.fetch_prices(ex) for ex in self.clients.keys()]
            await asyncio.gather(*tasks, return_exceptions=True)
            await asyncio.sleep(1)
            
    async def find_arbitrage_opportunities(self):
        """–ò—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."""
        opportunities = []
        now = time.time()
        
        for symbol, exchange_prices in self.prices.items():
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ bid –∏ ask
            best_bid = 0
            best_bid_exchange = None
            best_ask = float('inf')
            best_ask_exchange = None
            
            for exchange, price_data in exchange_prices.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
                if now - price_data['timestamp'] > 5:
                    continue
                    
                if price_data['bid'] > best_bid:
                    best_bid = price_data['bid']
                    best_bid_exchange = exchange
                    
                if price_data['ask'] < best_ask:
                    best_ask = price_data['ask']
                    best_ask_exchange = exchange
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂
            if best_bid > best_ask and best_bid_exchange and best_ask_exchange and best_bid_exchange != best_ask_exchange:
                # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                spread_pct = (best_bid - best_ask) / best_ask * 100
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                buy_fee = EXCHANGES[best_ask_exchange]['taker_fee'] * 100
                sell_fee = EXCHANGES[best_bid_exchange]['taker_fee'] * 100
                total_fees = buy_fee + sell_fee
                
                net_profit = spread_pct - total_fees
                
                if net_profit >= MIN_PROFIT_THRESHOLD:
                    opportunities.append({
                        'symbol': symbol,
                        'buy_exchange': best_ask_exchange,
                        'sell_exchange': best_bid_exchange,
                        'buy_price': best_ask,
                        'sell_price': best_bid,
                        'spread_pct': spread_pct,
                        'net_profit': net_profit,
                        'timestamp': now
                    })
                elif net_profit > -0.1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∑–∫–∏–µ –∫ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º
                    print(f"  {symbol}: {best_ask_exchange}‚Üí{best_bid_exchange} spread:{spread_pct:.3f}% net:{net_profit:.3f}%", end="\r")
                    
        return opportunities
        
    async def execute_paper_trade(self, opportunity):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É."""
        trade = {
            'timestamp': datetime.now().isoformat(),
            'symbol': opportunity['symbol'],
            'buy_exchange': opportunity['buy_exchange'],
            'sell_exchange': opportunity['sell_exchange'],
            'buy_price': opportunity['buy_price'],
            'sell_price': opportunity['sell_price'],
            'size_usd': POSITION_SIZE_USD,
            'gross_profit_pct': opportunity['spread_pct'],
            'net_profit_pct': opportunity['net_profit'],
            'net_profit_usd': POSITION_SIZE_USD * opportunity['net_profit'] / 100
        }
        
        self.paper_trades.append(trade)
        self.total_profit += trade['net_profit_usd']
        
        print(f"\nüí∞ –°–î–ï–õ–ö–ê #{len(self.paper_trades)}:")
        print(f"  {trade['symbol']}: {trade['buy_exchange']} ‚Üí {trade['sell_exchange']}")
        print(f"  –ö—É–ø–∏—Ç—å: ${trade['buy_price']:.2f}, –ü—Ä–æ–¥–∞—Ç—å: ${trade['sell_price']:.2f}")
        print(f"  –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {trade['net_profit_pct']:.3f}% (${trade['net_profit_usd']:.2f})")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        self.save_trade_to_csv(trade)
        
    def save_trade_to_csv(self, trade):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ CSV —Ñ–∞–π–ª."""
        filename = 'paper_trades.csv'
        file_exists = os.path.exists(filename)
        
        with open(filename, 'a', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=trade.keys())
            if not file_exists:
                writer.writeheader()
            writer.writerow(trade)
            
    async def scanner_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        while self.is_running:
            try:
                opportunities = await self.find_arbitrage_opportunities()
                
                if opportunities:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
                    opportunities.sort(key=lambda x: x['net_profit'], reverse=True)
                    
                    # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                    best = opportunities[0]
                    
                    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                    print(f"‚ö° –õ—É—á—à–∞—è: {best['symbol']} {best['buy_exchange']}‚Üí{best['sell_exchange']} +{best['net_profit']:.3f}%")
                    
                    # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    await self.execute_paper_trade(best)
                    self.opportunities_found += 1
                    
                else:
                    print(f".", end="", flush=True)
                    
                await asyncio.sleep(SCAN_INTERVAL)
                
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–µ—Ä–µ: {e}")
                await asyncio.sleep(5)
                
    async def print_status(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
        while self.is_running:
            await asyncio.sleep(30)
            
            print(f"\nüìä –°–¢–ê–¢–£–°:")
            print(f"  –¶–µ–Ω—ã —Å–æ–±—Ä–∞–Ω—ã: {len(self.prices)} –ø–∞—Ä")
            print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {self.opportunities_found}")
            print(f"  –°–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {len(self.paper_trades)}")
            print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã
            active_count = 0
            now = time.time()
            for symbol, exchanges in self.prices.items():
                for exchange, data in exchanges.items():
                    if now - data['timestamp'] < 5:
                        active_count += 1
                        
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {active_count}")
            
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        print("üöÄ –ó–∞–ø—É—Å–∫ Simple Arbitrage Bot...")
        
        await self.initialize()
        
        if not self.clients:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –±–∏—Ä–∂—É")
            return
            
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.clients)} –±–∏—Ä–∂")
        print(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(SYMBOLS)} –ø–∞—Ä")
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {MIN_PROFIT_THRESHOLD}%")
        print(f"üì¶ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${POSITION_SIZE_USD}")
        print("-" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = [
            asyncio.create_task(self.collect_prices_loop()),
            asyncio.create_task(self.scanner_loop()),
            asyncio.create_task(self.print_status())
        ]
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            self.is_running = False
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        for client in self.clients.values():
            await client.close()
            
        print(f"\nüìà –ò–¢–û–ì–ò:")
        print(f"  –°–¥–µ–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ: {len(self.paper_trades)}")
        print(f"  –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit:.2f}")
        print(f"  –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${self.total_profit/len(self.paper_trades):.2f}" if self.paper_trades else "")
        
async def main():
    bot = SimpleArbitrageBot()
    await bot.run()
    
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
