#!/usr/bin/env python3
"""
üöÄ MEGA ARBITRAGE BOT v2.0
–ú–µ–∂–±–∏—Ä–∂–µ–≤–æ–π + –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂
50 –º–æ–Ω–µ—Ç | –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ | –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
"""

# -*- coding: utf-8 -*-
import asyncio
import json
import aiohttp
import aiohttp_socks
import pandas as pd
import sys
import numpy as np
import ccxt.async_support as ccxt
import json
import time
import websockets
from typing import Dict, List, Optional, Set, Any
from datetime import datetime, timedelta
from collections import defaultdict
import logging
import os
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from demo_config import *
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    DEMO_MODE = (TRADING_MODE == "DEMO") if 'TRADING_MODE' in locals() else True
except ImportError:
    print("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    DEMO_MODE = True

try:
    from risk_manager import RiskManager, RiskLimits
    from order_executor import OrderExecutor
    print("‚úÖ –ú–æ–¥—É–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ö†Ô∏è –ú–æ–¥—É–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    RiskManager = None
    OrderExecutor = None

import math
import traceback
import argparse

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ–º event loop –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ uvloop
try:
    import uvloop  # type: ignore
    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
    UVLOOP_ENABLED = True
except Exception:
    UVLOOP_ENABLED = False

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

# URL –¥–ª—è –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 'socks5://user:pass@host:port' –∏–ª–∏ 'http://host:port'. –û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏.
PROXY_URL = ""  # <-- –í–°–¢–ê–í–¨–¢–ï –í–ê–® URL –ü–†–û–ö–°–ò –°–Æ–î–ê

# ==================== –¢–û–†–ì–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================
TRADING_ENABLED = os.getenv('TRADING_ENABLED', 'false').lower() == 'true'
PAPER_TRADING = True

# --- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ ---
INITIAL_CAPITAL = 10000  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
POSITION_SIZE_PCT = 1.0  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (1.0 = 1%)
INTER_MIN_PROFIT_PCT = 0.15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π —Å–¥–µ–ª–∫–∏
STALE_MS = 1500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–Ω—ã –≤ –º—Å –¥–ª—è —É—á–µ—Ç–∞ –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ

# –†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
DEFAULT_POSITION_SIZE_USD = float(os.getenv('POSITION_SIZE_USD', '100'))  # $100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MAX_POSITION_SIZE_USD = float(os.getenv('MAX_POSITION_SIZE_USD', '1000'))
MIN_POSITION_SIZE_USD = float(os.getenv('MIN_POSITION_SIZE_USD', '20'))

# –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
MAX_DAILY_LOSS_USD = float(os.getenv('MAX_DAILY_LOSS_USD', '200'))
MAX_HOURLY_LOSS_USD = float(os.getenv('MAX_HOURLY_LOSS_USD', '50'))
MAX_CONCURRENT_TRADES = int(os.getenv('MAX_CONCURRENT_TRADES', '5'))
MIN_ACCOUNT_BALANCE_USD = float(os.getenv('MIN_ACCOUNT_BALANCE_USD', '500'))
# –ë—É–º–∞–∂–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç (–¥–ª—è —Å—á—ë—Ç—á–∏–∫–∞ PnL)
PAPER_START_BALANCE_USD = float(os.getenv('PAPER_START_BALANCE_USD', '10000'))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
STOP_LOSS_PERCENT = float(os.getenv('STOP_LOSS_PERCENT', '2.0'))  # Stop-loss –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
TAKE_PROFIT_PERCENT = float(os.getenv('TAKE_PROFIT_PERCENT', '1.0'))  # Take-profit –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
MAX_SLIPPAGE_PERCENT = float(os.getenv('MAX_SLIPPAGE_PERCENT', '0.5'))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ª–∏–ø–ø–µ–¥–∂

# –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
ORDER_TIMEOUT_MS = int(os.getenv('ORDER_TIMEOUT_MS', '3000'))  # 3 —Å–µ–∫—É–Ω–¥—ã
FILL_TIMEOUT_MS = int(os.getenv('FILL_TIMEOUT_MS', '5000'))  # 5 —Å–µ–∫—É–Ω–¥
CSV_SAVE_INTERVAL = int(os.getenv('CSV_SAVE_INTERVAL', '600'))  # 10 –º–∏–Ω—É—Ç
MAX_SLIPPAGE_PCT = float(os.getenv('MAX_SLIPPAGE_PCT', '0.1'))  # 0.1% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ª–∏–ø–ø–µ–¥–∂
EXECUTION_LATENCY_THRESHOLD_MS = int(os.getenv('EXECUTION_LATENCY_MS', '200'))  # 200–º—Å –ø–æ—Ä–æ–≥

# –ü–æ—Ä–æ–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö/–±—É–º–∞–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)
EXEC_INTER_MIN_NET = float(os.getenv('EXECUTE_INTER_MIN_NET', '0.5'))  # % —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–¥–µ–ª–∫–∏
# –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SCAN_INTERVAL_SECONDS = int(os.getenv('SCAN_INTERVAL_SECONDS', '2'))

# –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –º–∞—Ä—à—Ä—É—Ç—É (—Å–∏–º–≤–æ–ª + buy/sell –±–∏—Ä–∂–∏)
EXEC_ROUTE_COOLDOWN_MS = int(os.getenv('EXEC_ROUTE_COOLDOWN_MS', '2000'))
# –°–ª–∏–ø–ø–µ–¥–∂ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–∂–±–∏—Ä–∂–∏ (–∫–∞–∫ –¥–æ–ª—è, 0.0002 = 0.02%)
INTER_SLIPPAGE_PCT = float(os.getenv('INTER_SLIPPAGE_PCT', '0.0002'))
# L2 –¥–∞–Ω–Ω—ã–µ
ORDERBOOK_DEPTH = int(os.getenv('ORDERBOOK_DEPTH', '20'))  # –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞
MIN_LIQUIDITY_USD = float(os.getenv('MIN_LIQUIDITY_USD', '1000'))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
ORDERBOOK_STALE_MS = int(os.getenv('ORDERBOOK_STALE_MS', '1500'))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ¬´—Å–≤–µ–∂–µ—Å—Ç—å¬ª L2
USE_L2_ON_PAPER = os.getenv('USE_L2_ON_PAPER', 'true').lower() == 'true'  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å L2/VWAP –≤ –±—É–º–∞–∂–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä –∫ –ø–æ—Ä–æ–≥—É –ø—Ä–∏ L2-–ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–µ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø.–ø.)
L2_EXEC_BUFFER_PCT = float(os.getenv('L2_EXEC_BUFFER_PCT', '0.15'))
# –ì–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
ORDERBOOK_DEPTH = int(os.getenv('ORDERBOOK_DEPTH', '20'))
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ L2 –∞–Ω–∞–ª–∏–∑—É
MIN_FILL_RATIO = float(os.getenv('MIN_FILL_RATIO', '0.8'))
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ USD, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—ã–ª–∏
MIN_TRADE_SIZE_USD = float(os.getenv('MIN_TRADE_SIZE_USD', '10.0'))
# –ö–∞–∫ —á–∞—Å—Ç–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã (–≤ –º—Å)
ORDERBOOK_MIN_REFRESH_MS = int(os.getenv('ORDERBOOK_MIN_REFRESH_MS', '1000'))
# –ö–∞–∫ –¥–æ–ª–≥–æ —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–∫–∞–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–º (–≤ –º—Å)
ORDERBOOK_STALE_MS = int(os.getenv('ORDERBOOK_STALE_MS', '5000'))

# API –∫–ª—é—á–∏ –±—É–¥—É—Ç —á–∏—Ç–∞—Ç—å—Å—è –≤ __init__ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –°–ê–ú–´–ï –î–ï–®–ï–í–´–ï –ë–ò–†–ñ–ò –ü–û –ö–û–ú–ò–°–°–ò–Ø–ú
EXCHANGES = {
    'mexc': {
        'ticker_url': 'https://api.mexc.com/api/v3/ticker/bookTicker',
        'orderbook_url': 'https://api.mexc.com/api/v3/depth?symbol={symbol}&limit=10',
        'fee_maker': 0.0,  # 0% maker fee!
        'fee_taker': 0.001,  # 0.10% taker (—Å–æ —Å–∫–∏–¥–∫–∞–º–∏/–ø—Ä–æ–º–æ)
        'name': 'MEXC'
    },
    'binance': {
        'ticker_url': 'https://api.binance.com/api/v3/ticker/bookTicker',
        'orderbook_url': 'https://api.binance.com/api/v3/depth?symbol={symbol}&limit=10',
        'fee_maker': 0.00075,  # 0.075% —Å BNB
        'fee_taker': 0.00075,
        'name': 'Binance'
    },
    'okx': {
        'ticker_url': 'https://www.okx.com/api/v5/market/tickers?instType=SPOT',
        'orderbook_url': 'https://www.okx.com/api/v5/market/books?instId={symbol}&sz=10',
        'fee_maker': 0.0008,  # 0.08%
        'fee_taker': 0.001,   # 0.1%
        'name': 'OKX'
    },
    'bybit': {
        'ticker_url': 'https://api.bybit.com/v5/market/tickers?category=spot',
        'orderbook_url': 'https://api.bybit.com/v5/market/depth?category=spot&symbol={symbol}&limit=10',
        'fee_maker': 0.0008,  # 0.08% —Å–æ —Å–∫–∏–¥–∫–æ–π/—É—Ä–æ–≤–Ω–µ–º
        'fee_taker': 0.0008,  # 0.08% —Å–æ —Å–∫–∏–¥–∫–æ–π/—É—Ä–æ–≤–Ω–µ–º
        'name': 'Bybit'
    },
    'kucoin': {
        'ticker_url': 'https://api.kucoin.com/api/v1/market/allTickers',
        'orderbook_url': 'https://api.kucoin.com/api/v1/market/orderbook/level2_20?symbol={symbol}',
        'fee_maker': 0.0008,  # 0.08% —Å KCS-—Å–∫–∏–¥–∫–æ–π/—É—Ä–æ–≤–Ω–µ–º
        'fee_taker': 0.0008,  # 0.08% —Å KCS-—Å–∫–∏–¥–∫–æ–π/—É—Ä–æ–≤–Ω–µ–º
        'name': 'KuCoin'
    }
}

# –¢–û–ü-100+ –ú–û–ù–ï–¢ –î–õ–Ø –ú–ï–ñ–ë–ò–†–ñ–ï–í–û–ì–û –ê–†–ë–ò–¢–†–ê–ñ–ê
INTER_EXCHANGE_SYMBOLS = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ (—Ç–æ–ø-20)
    'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
    'ADAUSDT', 'AVAXUSDT', 'DOGEUSDT', 'DOTUSDT', 'MATICUSDT',
    'LTCUSDT', 'BCHUSDT', 'ETCUSDT', 'XLMUSDT', 'ATOMUSDT',
    'FILUSDT', 'VETUSDT', 'NEARUSDT', 'ALGOUSDT', 'FTMUSDT',
    
    # DeFi & Layer 2 (20)
    'UNIUSDT', 'LINKUSDT', 'AAVEUSDT', 'OPUSDT', 'ARBUSDT',
    'INJUSDT', 'SEIUSDT', 'SUIUSDT', 'APTUSDT', 'STXUSDT',
    'MKRUSDT', 'SNXUSDT', 'COMPUSDT', 'CRVUSDT', 'SUSHIUSDT',
    'YFIUSDT', 'LDOUSDT', 'RPLUSUSDT', '1INCHUSDT', 'BALUSDT',
    
    # Meme coins (20)
    'PEPEUSDT', 'SHIBUSDT', 'FLOKIUSDT', 'WIFUSDT', 'BONKUSDT',
    'MEMEUSDT', 'BABYDOGEUSDT', 'ELONUSDT', 'SAITAMAUSDT', 'KISHUUSDT',
    'AKITAUSDT', 'PITUSDT', 'SHIBADOGEUSDT', 'DOGELONUSDT', 'SAMUSDT',
    'CATECOINUSDT', 'BABYSHIBUSDT', 'METAMONUSDT', 'PONKEUSDT', 'MYRIUSDT',
    
    # Gaming & Metaverse (20)
    'AXSUSDT', 'SANDUSDT', 'MANAUSDT', 'GALAUSDT', 'ENJUSDT',
    'IMXUSDT', 'GMTUSDT', 'APEUSDT', 'ROSEUSDT', 'ALICEUSDT',
    'ILVUSDT', 'TLMUSDT', 'EPIKUSDT', 'MOBOXUSDT', 'DARUSDT',
    'SLPUSDT', 'GHSTUSDT', 'SUPERUSDT', 'UOSUSDT', 'PYRUSDT',
    
    # AI & –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (20)
    'FETUSDT', 'AGIXUSDT', 'OCEANUSDT', 'RNDRUSDT', 'GRTUSDT',
    'ARKMUSDT', 'WLDUSDT', 'JASMYUSDT', 'CELOUSDT', 'PENDLEUSDT',
    'CTXCUSDT', 'PHBUSDT', 'NMRUSDT', 'IOTXUSDT', 'MDTUSDT',
    'AIUSDT', 'IQUSDT', 'VAIOTUSDT', 'OASUSDT', 'SINGUSDT',
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ (20)
    'TRBUSDT', 'GASUSDT', 'BLURUSDT', 'EDUUSDT', 'IDUSDT',
    'ARBUSDT', 'MAGICUSDT', 'JOEUSDT', 'HOOKUSDT', 'HIGHUSDT',
    'ASTRUSDT', 'GMXUSDT', 'CFXUSDT', 'STGUSDT', 'MASKUSDT',
    'LQTYUSDT', 'PERPUSDT', 'ACHUSDT', 'SSVUSDT', 'RADUSDT'
]

# –¢–û–ü-50 –ú–û–ù–ï–¢ –î–õ–Ø –¢–†–ï–£–ì–û–õ–¨–ù–û–ì–û –ê–†–ë–ò–¢–†–ê–ñ–ê –ù–ê –ö–ê–ñ–î–û–ô –ë–ò–†–ñ–ï
TRIANGULAR_SYMBOLS = {
    'binance': [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã Binance
        'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'XRPUSDT',
        'ADAUSDT', 'DOGEUSDT', 'MATICUSDT', 'DOTUSDT', 'AVAXUSDT',
        'SHIBUSDT', 'LTCUSDT', 'UNIUSDT', 'LINKUSDT', 'BCHUSDT',
        'XLMUSDT', 'ATOMUSDT', 'ETCUSDT', 'VETUSDT', 'FILUSDT',
        'TRXUSDT', 'NEARUSDT', 'AAVEUSDT', 'SANDUSDT', 'MANAUSDT',
        'ALGOUSDT', 'ICPUSDT', 'QNTUSDT', 'FTMUSDT', 'EOSUSDT',
        'EGLDUSDT', 'THETAUSDT', 'AXSUSDT', 'HBARUSDT', 'XTZUSDT',
        'CHZUSDT', 'MKRUSDT', 'ENJUSDT', 'RUNEUSDT', 'ZILUSDT',
        'SNXUSDT', 'BATUSDT', 'DASHUSDT', 'ZECUSDT', 'COMPUSDT',
        'CRVUSDT', 'KSMUSDT', 'WAVESUSDT', 'ONEUSDT', 'HOTUSDT'
    ],
    'okx': [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã OKX
        'BTCUSDT', 'ETHUSDT', 'OKBUSDT', 'SOLUSDT', 'XRPUSDT',
        'ADAUSDT', 'DOGEUSDT', 'AVAXUSDT', 'DOTUSDT', 'MATICUSDT',
        'SHIBUSDT', 'LTCUSDT', 'UNIUSDT', 'LINKUSDT', 'BCHUSDT',
        'ATOMUSDT', 'ETCUSDT', 'NEARUSDT', 'FILUSDT', 'VETUSDT',
        'ICPUSDT', 'APTUSDT', 'OPUSDT', 'ARBUSDT', 'INJUSDT',
        'SUIUSDT', 'SEIUSDT', 'STXUSDT', 'TRXUSDT', 'XLMUSDT',
        'EOSUSDT', 'AAVEUSDT', 'ALGOUSDT', 'SANDUSDT', 'FTMUSDT',
        'GALAUSDT', 'GMTUSDT', 'MASKUSDT', 'WLDUSDT', 'ORDIUSDT',
        'BLURUSDT', 'JOEUSDT', 'MAGICUSDT', 'TRBUSDT', 'PERPUSDT',
        'SSVUSDT', 'PENUSDT', 'CYBERUSDT', 'ARKMUSDT', 'WIFUSDT'
    ],
    'mexc': [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã MEXC (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏)
        'BTCUSDT', 'ETHUSDT', 'MXUSDT', 'SOLUSDT', 'XRPUSDT',
        'PEPEUSDT', 'SHIBUSDT', 'DOGEUSDT', 'FLOKIUSDT', 'BONKUSDT',
        'WIFUSDT', 'MEMEUSDT', 'BOBUSDT', 'TURBOUSDT', 'LADYSUSDT',
        'BABYDOGEUSDT', 'ELONUSDT', 'KISHUUSDT', 'SAMOUSDT', 'WOJAKUSDT',
        'PEPECOINUSDT', 'ARBUSDT', 'OPUSDT', 'INJUSDT', 'SUIUSDT',
        'APTUSDT', 'SEIUSDT', 'KASUSDT', 'TOMIUSDT', 'GPTUSDT',
        'BNXUSDT', 'IDUSDT', 'EDUUSDT', 'SPACEIDUSDT', 'MAVUSDT',
        'PENUSDT', 'PENDLEUSDT', 'JOEUSDT', 'RDNTUSDT', 'AIUSDT',
        'FETUSDT', 'AGIXUSDT', 'OCEANUSDT', 'RNDRUSDT', 'PHBUSDT',
        'ARKMUSDT', 'WLDUSDT', 'CTXCUSDT', 'IQUSDT', 'NMRUSDT'
    ],
    'bybit': [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã Bybit (USDT)
        'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'XRPUSDT', 'ADAUSDT',
        'DOGEUSDT', 'AVAXUSDT', 'MATICUSDT', 'DOTUSDT', 'SHIBUSDT',
        'TRXUSDT', 'LINKUSDT', 'LTCUSDT', 'OPUSDT', 'ARBUSDT',
        'APTUSDT', 'SUIUSDT', 'SEIUSDT', 'NEARUSDT', 'ATOMUSDT',
        'FILUSDT', 'AAVEUSDT', 'INJUSDT', 'MASKUSDT', 'LDOUSDT',
        'MAGICUSDT', 'SNXUSDT', 'GMXUSDT', 'PEPEUSDT', 'WLDUSDT'
    ],
    'kucoin': [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã KuCoin (USDT)
        'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'XRPUSDT', 'ADAUSDT',
        'DOGEUSDT', 'AVAXUSDT', 'MATICUSDT', 'DOTUSDT', 'SHIBUSDT',
        'TRXUSDT', 'LINKUSDT', 'LTCUSDT', 'OPUSDT', 'ARBUSDT',
        'APTUSDT', 'SUIUSDT', 'SEIUSDT', 'NEARUSDT', 'ATOMUSDT',
        'FILUSDT', 'AAVEUSDT', 'INJUSDT', 'MASKUSDT', 'LDOUSDT',
        'MAGICUSDT', 'SNXUSDT', 'GMXUSDT', 'PEPEUSDT', 'WLDUSDT'
    ]
}

# –ù–∞–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ
# –°—Ç—Ä–æ–∏–º AUSDT, BUSDT –∏ –∫—Ä–æ—Å—Å—ã AB/BA –∏–∑ —Å–ø–∏—Å–∫–æ–≤ TRIANGULAR_SYMBOLS
NEEDED_TRI_PAIRS_PER_EXCHANGE = {ex: set() for ex in EXCHANGES.keys()}
for ex, usdt_symbols in TRIANGULAR_SYMBOLS.items():
    coins = [s[:-4] for s in usdt_symbols if s.endswith('USDT') and len(s) > 4]
    for i, a in enumerate(coins):
        for b in coins[i+1:]:
            NEEDED_TRI_PAIRS_PER_EXCHANGE[ex].update({
                f"{a}USDT", f"{b}USDT", f"{a}{b}", f"{b}{a}"
            })

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_PROFIT_INTER = -0.01  # -0.01% (—Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞–∂–µ —É–±—ã—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
MIN_PROFIT_TRI = -0.01    # -0.01% –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ
MIN_PROFIT_THRESHOLD = 0.25  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 0.25% (—Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫)
MIN_PROFIT_THRESHOLD_TRI = 0.20  # –î–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ 0.20%

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
ADAPTIVE_THRESHOLD_ENABLED = True
VOLATILITY_MULTIPLIER = 0.8  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–∞ —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–±—ã–ª—å—é
SCAN_INTERVAL = 1         # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–∫–∞–Ω–∞–º–∏ (—á–∞—â–µ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è)
SAVE_INTERVAL = 300       # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
TRI_SLIPPAGE_PER_STEP = 0.0003  # 0.03% —Å–ª–∏–ø–ø–µ–¥–∂ –Ω–∞ —à–∞–≥

# –ù–∏–∑–∫–æ–∑–∞–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–∞—è —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ (–≤–º–µ—Å—Ç–æ –±–∞—Ç—á-—Å–∫–∞–Ω–∞)
EVENT_INTER_ENABLED = True
EVENT_DEBOUNCE_MS = 50     # –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–∏–º–≤–æ–ª –∫–∞–∂–¥—ã–µ N –º—Å
EVENT_COALESCE_MS = 20     # —Å–≥–ª–∞–∂–∏–≤–∞–µ–º –±—É—Ä—Å—Ç, —Å–æ–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã N –º—Å
STALE_MS = 1500            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ä—à–µ N –º—Å
EVENT_INTER_PRINT_MIN = 0.10  # –ø–µ—á–∞—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ net_profit ‚â• 0.10%
MAX_PROFIT_THRESHOLD_PCT = 25.0 # –ù–µ –ø–µ—á–∞—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é ( > 25%)

# –†–ï–ñ–ò–ú WS –î–õ–Ø –ù–ò–ó–ö–û–ô –ó–ê–î–ï–†–ñ–ö–ò
# –ù–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –≤–∫–ª—é—á–∞–µ–º WS —Ç–æ–ª—å–∫–æ –¥–ª—è Bybit (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ REST, –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
USE_WS = True
WS_EXCHANGES = {
    'bybit': True,
    'okx': False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    'kucoin': False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    'mexc': False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    'binance': True,   # –í–∫–ª—é—á–∞–µ–º WS —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
}

# ==================== –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –ë–û–¢ ====================

class MegaArbitrageBot:
    def __init__(self, mode: str = 'both'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–π
        timeout = aiohttp.ClientTimeout(total=10)

        # –ü—Ä—è–º–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –±–∏—Ä–∂ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        self.direct_session = aiohttp.ClientSession(timeout=timeout)

        # –°–µ—Å—Å–∏—è —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è Binance
        proxy_connector = None
        if PROXY_URL:
            proxy_connector = aiohttp_socks.ProxyConnector.from_url(PROXY_URL)
            print(f"üîå –î–ª—è Binance –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
        self.proxy_session = aiohttp.ClientSession(timeout=timeout, connector=proxy_connector)

        # self.session –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ccxt
        self.session = self.proxy_session
        self.prices = {}
        # WS
        self.ws_tasks: List[asyncio.Task] = []
        self.ws_connected = {ex: False for ex in EXCHANGES.keys()}
        self.ws_exchanges = [ex for ex, enabled in WS_EXCHANGES.items() if enabled]
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Ñ–æ–Ω–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤
        self.is_running = True
        # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: inter | tri | both
        self.mode = mode
        self.api_keys_valid = {}
        self.statistics = {
            'start_time': datetime.now(),
            'total_scans': 0,
            'inter_exchange_opportunities': [],
            'triangular_opportunities': [],
            'best_inter_exchange': None,
            'best_triangular': None,
            'total_inter_found': 0,
            'total_tri_found': 0,
            'inter_exchange_trades': 0,
            'tri_exchange_trades': 0,
            'breakeven_count': 0,
            'profit_count': 0,
            'loss_count': 0,
            'exchange_stats': {ex: {'success': 0, 'errors': 0} for ex in EXCHANGES},
            'pair_stats': {},
            'hourly_stats': []
        }
        self.last_save_time = time.time()
        # –õ–∏–º–∏—Ç–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫—É
        self._tri_diag_left = 10
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞)
        # –ö–ª—é—á: (symbol, buy_exchange, sell_exchange)
        self.unique_inter_seen = set()
        self.unique_inter_count = 0
        self.unique_inter_profit_sum = 0.0  # Œ£ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö net_profit –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º
        self.last_save_time = time.time()
        # –°–æ–±—ã—Ç–∏–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–∂–±–∏—Ä–∂–µ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
        self._event_symbols = set()
        self._event_trigger = asyncio.Event()
        self._debounce = {}
        self._event_task: Optional[asyncio.Task] = None
        self._stop: Optional[bool] = None
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.unique_inter_routes = set()
        self.unique_inter_count = 0
        self.unique_inter_profit_sum = 0.0
        self.unique_tri_routes = set()
        self.unique_tri_count = 0
        self.unique_tri_profit_sum = 0.0
        
        # ==================== –¢–û–†–ì–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê ====================
        # L2 Order Books
        self.orderbooks = {}  # {symbol: {exchange: {'bids': [[price, size], ...], 'asks': [...], 'ts': ts}}}
        self.ob_subscribed = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ L2
        self._ob_last_fetch_ms: Dict[Tuple[str, str], int] = {}
        self._ob_inflight: set = set()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ä–¥–µ—Ä–∞–º–∏
        self.active_trades = {}  # {trade_id: trade_info}
        self.pending_orders = {}  # {order_id: order_info}
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WS –±–µ–∑ API –∫–ª—é—á–µ–π, –∑–∞–¥–∞–µ–º –ø–∞—Ä—ã –≤—Ä—É—á–Ω—É—é
        self.trading_pairs = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        self.markets = {}  # –ú–∞—Ä–∫–µ—Ç –∏–Ω—Ñ–æ –ø–æ –±–∏—Ä–∂–∞–º
        self.API_KEYS = list(EXCHANGES.keys())  # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ä–∂
        self.balances = {}  # {exchange: {asset: {'free': amount, 'locked': amount}}}
        
        # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        self.daily_pnl = 0.0
        self.hourly_pnl = 0.0
        self.last_hour_reset = time.time()
        self.last_day_reset = time.time()
        self.risk_limits_hit = False
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_stats = {
            'orders_placed': 0,
            'orders_filled': 0,
            'orders_cancelled': 0,
            'avg_latency_ms': 0.0,
            'fill_ratio': 0.0,
            'total_slippage': 0.0
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
        self.trade_counter = 0
        self.order_counter = 0
        # –ö—É–ª–¥–∞—É–Ω –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º (symbol, buy_ex, sell_ex) -> last_exec_ms
        self._last_route_exec_ms: Dict[Tuple[str, str, str], int] = {}
        # –ñ—É—Ä–Ω–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–±—É–º–∞–∂–Ω—ã—Ö)
        self.completed_trades: List[Dict] = []
        self.symbols: Dict[str, List[str]] = {}
        self.symbol_meta: Dict[str, Dict[str, Dict]] = {} # {exchange: {symbol: {meta...}}}

        # –ë—É–º–∞–∂–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –∏ –±–∞–ª–∞–Ω—Å
        self.paper_start_balance: float = 1000.0
        self.paper_balance: float = 1000.0
        self.paper_total_pnl: float = 0.0
        
        # ==================== –ù–û–í–´–ï –ú–û–î–£–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ====================
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if RiskManager:
            risk_limits = RiskLimits(
                max_position_size_usd=DEMO_SETTINGS.get('max_position_size', 100.0),
                max_daily_loss_usd=DEMO_SETTINGS.get('max_daily_loss', 50.0),
                max_open_positions=DEMO_SETTINGS.get('max_open_positions', 3),
                min_profit_threshold=DEMO_SETTINGS.get('min_profit_threshold', 0.3)
            )
            self.risk_manager = RiskManager(risk_limits)
            print("‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.risk_manager = None
            print("‚ö†Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–æ–≤ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è CCXT –∫–ª–∏–µ–Ω—Ç–æ–≤)
        self.order_executor = None
        
        # ==================== –ß–¢–ï–ù–ò–ï –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø CCXT ====================
        API_KEYS = {
            'mexc': {'apiKey': os.getenv('MEXC_API_KEY'), 'secret': os.getenv('MEXC_API_SECRET')},
            'binance': {'apiKey': os.getenv('BINANCE_API_KEY'), 'secret': os.getenv('BINANCE_API_SECRET')},
            'okx': {'apiKey': os.getenv('OKX_API_KEY'), 'secret': os.getenv('OKX_API_SECRET'), 'password': os.getenv('OKX_API_PASSWORD')},
            'bybit': {'apiKey': os.getenv('BYBIT_API_KEY'), 'secret': os.getenv('BYBIT_API_SECRET')},
            'kucoin': {'apiKey': os.getenv('KUCOIN_API_KEY'), 'secret': os.getenv('KUCOIN_API_SECRET'), 'password': os.getenv('KUCOIN_API_PASSWORD')},
        }

        print("üìî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º —á–µ—Ä–µ–∑ CCXT...")
        self.clients = {}
        for exchange_id in EXCHANGES.keys():
            self.api_keys_valid[exchange_id] = False
            keys = API_KEYS.get(exchange_id, {})
            
            if keys.get('apiKey') and keys.get('secret'):
                try:
                    config = {
                        'apiKey': keys['apiKey'],
                        'secret': keys['secret'],
                        'options': {'defaultType': 'spot'},
                        'enableRateLimit': True,
                        'session': self.proxy_session if exchange_id == 'binance' else self.direct_session
                    }
                    if 'password' in keys and keys.get('password'):
                        config['password'] = keys['password']

                    exchange_class = getattr(ccxt, exchange_id)
                    client = exchange_class(config)
                    self.clients[exchange_id] = client
                    setattr(self, exchange_id, client)
                    self.api_keys_valid[exchange_id] = True
                except Exception as e:
                    print(f"  üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {exchange_id.upper()}: {e}")
            else:
                print(f"  ‚ö†Ô∏è  {EXCHANGES[exchange_id]['name'].upper()}: API –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è.")

        # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏–±—ã–ª–∏ (—Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞)
        self.session_start_time = time.time()
        self.session_profit_usd: float = 0.0
        self.session_profit_pct: float = 0.0
        self.session_trades: int = 0
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞
        self.error_counts = {ex: 0 for ex in EXCHANGES.keys()}
        
        # ==================== –°–¢–ê–¢–£–° –°–ö–ê–ù–ï–†–ê –î–õ–Ø –¢–ï–†–ú–ò–ù–ê–õ–ê ====================
        self.scanner_status = {
            'prices_updated': 0,
            'scans_performed': 0,
            'opportunities_found': 0,
            'last_price_update_ts': None,
            'last_scan_ts': None
        }
        
        # –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.trader_status = {
            'validator': {'active': False, 'checks_passed': 0, 'checks_failed': 0},
            'risk_manager': {'active': False, 'positions_approved': 0, 'positions_rejected': 0},
            'executor': {'active': False, 'orders_placed': 0, 'orders_filled': 0, 'orders_failed': 0},
            'tracker': {'active': False, 'trades_monitored': 0, 'trades_completed': 0}
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è CCXT –∫–ª–∏–µ–Ω—Ç–æ–≤
        # –°–æ–±–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ CCXT –∫–ª–∏–µ–Ω—Ç—ã
        active_ccxt_clients = {}
        for exchange_id in EXCHANGES.keys():
            if hasattr(self, exchange_id):
                active_ccxt_clients[exchange_id] = getattr(self, exchange_id)
        
        if OrderExecutor and active_ccxt_clients:
            self.order_executor = OrderExecutor(active_ccxt_clients)
            print("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.order_executor = None
            if not OrderExecutor:
                print("‚ö†Ô∏è –ú–æ–¥—É–ª—å OrderExecutor –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö CCXT –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–æ–≤")

    async def load_all_markets(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä—ã–Ω–∫–∏ (—Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ –∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) —Å–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏—Ä–∂."""
        self.symbols = {}
        self.symbol_meta = {}
        active_exchanges = [ex for ex in self.API_KEYS if hasattr(self, ex)]
        tasks = [self.load_markets(ex_name) for ex_name in active_exchanges]
        await asyncio.gather(*tasks)
        
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
        all_symbols_original_format = set()
        for ex_symbols in self.symbols.values():
            all_symbols_original_format.update(ex_symbols)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å –±–∏—Ä–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT' -> 'BTCUSDT') –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        normalized_exchange_symbols = {s.replace('/', ''): s for s in all_symbols_original_format}

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        target_symbols_set = set(INTER_EXCHANGE_SYMBOLS)
        common_normalized_symbols = target_symbols_set.intersection(normalized_exchange_symbols.keys())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ ('BTC/USDT'), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ccxt
        filtered_symbols = sorted([normalized_exchange_symbols[s] for s in common_normalized_symbols])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        self.common_symbols = filtered_symbols

    async def load_markets(self, exchange_name: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏."""
        try:
            exchange = getattr(self, exchange_name)
            markets = await exchange.load_markets()
            self.symbols[exchange_name] = list(markets.keys())
            self.symbol_meta[exchange_name] = markets
            print(f"  ‚úÖ {exchange_name.upper()}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.symbols[exchange_name])} —Å–∏–º–≤–æ–ª–æ–≤.")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏ –¥–ª—è {exchange_name.upper()}: {e}")
            self.symbols[exchange_name] = []
        self.max_errors_before_cooldown = 5
        self.cooldown_duration_ms = 60000  # 1 –º–∏–Ω—É—Ç–∞
        self.exchange_cooldowns = {}  # {exchange: cooldown_until_ms}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.api_keys_valid = self._validate_api_keys()
        
        # Rate limiting –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        self.rate_limiters = {
            'binance': {'requests': 0, 'reset_time': time.time(), 'limit': 1200, 'window': 60},
            'bybit': {'requests': 0, 'reset_time': time.time(), 'limit': 100, 'window': 60},
            'okx': {'requests': 0, 'reset_time': time.time(), 'limit': 60, 'window': 2},
            'kucoin': {'requests': 0, 'reset_time': time.time(), 'limit': 30, 'window': 1},
            'mexc': {'requests': 0, 'reset_time': time.time(), 'limit': 10, 'window': 1}
        }
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.private_ws_connected = {ex: False for ex in EXCHANGES.keys()}
        self.private_ws_tasks = []
        
        # –û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        self.order_queue = asyncio.Queue()
        self.order_processor_task = None
        
        # –†–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã —Å –±–∏—Ä–∂
        self.real_balances = {}  # {exchange: {asset: amount}}
        self.balance_last_update = {}
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.active_orders = {}  # {order_id: {exchange, symbol, side, status, filled, remaining}}
        
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        timeout = aiohttp.ClientTimeout(total=10)
        connector = None
        if PROXY_URL:
            connector = aiohttp_socks.ProxyConnector.from_url(PROXY_URL)
            print(f"üîå –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
        # –í–∫–ª—é—á–∞–µ–º trust_env, —á—Ç–æ–±—ã aiohttp –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª HTTP_PROXY/HTTPS_PROXY
        self.session = aiohttp.ClientSession(timeout=timeout, trust_env=True, connector=connector)
        
    def _validate_api_keys(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏."""
        valid_keys = {}
        for exchange in EXCHANGES.keys():
            # –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏
            if DEMO_MODE or PAPER_TRADING:
                valid_keys[exchange] = True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os
                if exchange.upper() == 'BINANCE':
                    valid_keys[exchange] = bool(os.getenv('BINANCE_API_KEY'))
                elif exchange.upper() == 'BYBIT':
                    valid_keys[exchange] = bool(os.getenv('BYBIT_API_KEY'))
                elif exchange.upper() == 'KUCOIN':
                    valid_keys[exchange] = bool(os.getenv('KUCOIN_API_KEY') and os.getenv('KUCOIN_API_PASSPHRASE'))
                elif exchange.upper() == 'OKX':
                    valid_keys[exchange] = bool(os.getenv('OKX_API_KEY') and os.getenv('OKX_API_PASSPHRASE'))
                elif exchange.upper() == 'MEXC':
                    valid_keys[exchange] = bool(os.getenv('MEXC_API_KEY'))
                else:
                    valid_keys[exchange] = False
        
        return valid_keys
        
    def _quantize(self, value: float, precision: float) -> float:
        """–ö–≤–∞–Ω—Ç—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (stepSize –∏–ª–∏ tickSize).
        
        Args:
            value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è
            precision: –®–∞–≥ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.001 –¥–ª—è 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
        
        Returns:
            –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if precision <= 0:
            return value
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        decimals = max(0, -int(math.log10(precision)))
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        quantized = math.floor(value / precision) * precision
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è float –æ—à–∏–±–æ–∫
        return round(quantized, decimals)
    
    async def _check_exchange_health(self, exchange: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏—Ä–∂–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        now_ms = self._now_ms()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if exchange in self.exchange_cooldowns:
            if now_ms < self.exchange_cooldowns[exchange]:
                return False  # –ë–∏—Ä–∂–∞ –≤—Å–µ –µ—â–µ –≤ cooldown
            else:
                # Cooldown –∏—Å—Ç–µ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                del self.exchange_cooldowns[exchange]
                self.error_counts[exchange] = 0
                print(f"‚úÖ {exchange} –≤—ã—à–ª–∞ –∏–∑ cooldown, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        if self.error_counts[exchange] >= self.max_errors_before_cooldown:
            # –°—Ç–∞–≤–∏–º –±–∏—Ä–∂—É –≤ cooldown
            self.exchange_cooldowns[exchange] = now_ms + self.cooldown_duration_ms
            print(f"‚ö†Ô∏è {exchange} —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ ({self.error_counts[exchange]}), cooldown –Ω–∞ 1 –º–∏–Ω—É—Ç—É")
            return False
        
        return True
    
    async def _handle_api_error(self, exchange: str, error: Exception):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏."""
        self.error_counts[exchange] += 1
        error_msg = str(error)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if 'rate limit' in error_msg.lower() or '429' in error_msg:
            print(f"‚ö†Ô∏è {exchange}: –ø—Ä–µ–≤—ã—à–µ–Ω rate limit, –∑–∞–º–µ–¥–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã")
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ rate limit
        elif 'timeout' in error_msg.lower():
            print(f"‚ö†Ô∏è {exchange}: timeout, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ")
        elif '403' in error_msg or 'forbidden' in error_msg.lower():
            print(f"‚ùå {exchange}: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏")
            self.error_counts[exchange] = self.max_errors_before_cooldown  # –°—Ä–∞–∑—É –≤ cooldown
        else:
            print(f"‚ùå {exchange}: –æ—à–∏–±–∫–∞ API: {error_msg[:100]}")
    
    async def close(self):
        self.is_running = False
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
            try:
                if getattr(self, '_event_task', None):
                    self._event_task.cancel()
                    await self._event_task
            except Exception:
                pass
            # –ú—è–≥–∫–æ –æ—Ç–º–µ–Ω—è–µ–º WS –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            for t in getattr(self, 'ws_tasks', []) or []:
                try:
                    t.cancel()
                except Exception:
                    pass
            
    # ==================== WS HELPERS ====================
    async def seed_ws_prices(self):
        """–ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–±–æ—Ä —Ü–µ–Ω —á–µ—Ä–µ–∑ WS –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        # –î–ª—è Bybit —Å–æ–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        if WS_EXCHANGES.get('bybit', False):
            try:
                await self._fetch_bybit_prices()
            except Exception as e:
                await self._handle_api_error('bybit', e)
                
    async def start_ws(self):
        """–ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∏—Ä–∂."""
        tasks = []
        if WS_EXCHANGES.get('bybit', False):
            print("debug: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è _ws_bybit")
            tasks.append(asyncio.create_task(self._ws_bybit()))
        if WS_EXCHANGES.get('kucoin', False):
            print("debug: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è _ws_kucoin")
            tasks.append(asyncio.create_task(self._ws_kucoin()))
        if WS_EXCHANGES.get('binance', False):
            print("debug: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è _ws_binance")
            tasks.append(asyncio.create_task(self._ws_binance()))
        if WS_EXCHANGES.get('mexc', False):
            print("debug: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è _ws_mexc")
            tasks.append(asyncio.create_task(self._ws_mexc()))
        self.ws_tasks = tasks
            
    async def _ws_kucoin(self):
        """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è KuCoin."""
        client = self.clients.get('kucoin')
        if not client:
            print("üî¥ KuCoin –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, WebSocket –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            return
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è WebSocket
            async with self.direct_session.post('https://api.kucoin.com/api/v1/bullet-public') as response:
                if response.status != 200:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è KuCoin WebSocket: {response.status}")
                    return
                resp_json = await response.json()
                token = resp_json['data']['token']
                ws_endpoint = resp_json['data']['instanceServers'][0]['endpoint']
                ws_url = f"{ws_endpoint}?token={token}"

            # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KuCoin WebSocket (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)...")
            async with self.direct_session.ws_connect(ws_url, heartbeat=20) as ws:
                # 3. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
                subscribe_msg = {
                    "id": int(time.time() * 1000),
                    "type": "subscribe",
                    "topic": "/market/ticker:all",
                    "privateChannel": False,
                    "response": True
                }
                await ws.send_json(subscribe_msg)

                # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        data = json.loads(msg.data)
                        if data.get('topic') == '/market/ticker:all' and data.get('subject'):
                            symbol = data['data']['symbol'].replace('-', '')
                            if symbol in self.symbols_to_trade:
                                best_bid = float(data['data']['bestBid'])
                                best_ask = float(data['data']['bestAsk'])
                                
                                self._update_price('kucoin', symbol, best_bid, best_ask)

                    elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                        print("üö™ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å KuCoin WebSocket –∑–∞–∫—Ä—ã—Ç–æ.")
                        break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket KuCoin: {e}")

    async def _ws_binance(self):
        """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Binance."""
        print("‚öôÔ∏è  –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è Binance...")
        client = self.clients.get('binance')
        if not client:
            print("üî¥ Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return

        bm = BinanceSocketManager(client)
        # Binance —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Å—Ç—Ä–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
        # –§–æ—Ä–º–∞—Ç: <symbol>@ticker
        streams = [f"{pair.replace('/', '').lower()}@ticker" for pair in self.trading_pairs]
        
        try:
            async with bm.multiplex_socket(streams) as stream:
                print("‚úÖ WebSocket –¥–ª—è Binance —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
                self.ws_connected['binance'] = True
                while self.is_running:
                    msg = await stream.recv()
                    if msg and 'data' in msg:
                        data = msg['data']
                        if data.get('e') == 'error':
                            print(f"üî¥ –û—à–∏–±–∫–∞ Binance WS: {data['m']}")
                            break
                        
                        symbol = self._normalize_symbol(data['s'])
                        if symbol in self.trading_pairs:
                            self._update_price('binance', symbol, float(data['b']), float(data['a']))

        except Exception as e:
            print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ WebSocket Binance: {e}")
        finally:
            self.ws_connected['binance'] = False
            print("‚ö™Ô∏è WebSocket –¥–ª—è Binance –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def _ws_mexc(self):
        """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è MEXC —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º Protobuf."""
        print("‚öôÔ∏è  –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è MEXC...")
        client = self.clients.get('mexc')
        if not client:
            print("üî¥ MEXC –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, WebSocket –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            return

        ws_url = "wss://wbs.mexc.com/ws"
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        # MEXC –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        subscribe_msg = {
            "method": "SUBSCRIPTION",
            "params": [f"spot@public.bookTicker.v3.api@{pair.replace('/', '')}" for pair in self.trading_pairs]
        }

        try:
            async with self.direct_session.ws_connect(ws_url, heartbeat=20) as ws:
                await ws.send_json(subscribe_msg)
                print("‚úÖ WebSocket –¥–ª—è MEXC —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–∏–∫–µ—Ä—ã.")
                self.ws_connected['mexc'] = True
                
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.BINARY:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Protobuf
                        ticker_data = mexc_ticker_pb2.BookTicker()
                        try:
                            ticker_data.ParseFromString(msg.data)
                            symbol = self._normalize_symbol(ticker_data.s)
                            if symbol in self.trading_pairs:
                                self._update_price('mexc', symbol, ticker_data.b, ticker_data.a)
                        except Exception as e:
                            print(f"üî¥ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Protobuf –æ—Ç MEXC: {e}")

                    elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                        print(f"üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket MEXC –∑–∞–∫—Ä—ã—Ç–æ/–æ—à–∏–±–∫–∞: {msg.data}")
                        break
        except Exception as e:
            print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ WebSocket MEXC: {e}")
        finally:
            self.ws_connected['mexc'] = False
            print("‚ö™Ô∏è WebSocket –¥–ª—è MEXC –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def _ws_bybit(self):
        """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit."""
        url = 'wss://stream.bybit.com/v5/public/spot'
        symbols = [f"tickers.{pair.replace('/', '')}" for pair in self.trading_pairs]
        subscribe_msg = {
            "op": "subscribe",
            "args": symbols
        }

        while self.is_running:
            try:
                async with self.direct_session.ws_connect(url, heartbeat=20) as ws:
                    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Bybit WebSocket (–ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ).")
                    await ws.send_json(subscribe_msg)

                    async for msg in ws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            data = json.loads(msg.data)
                            if 'topic' in data and 'tickers' in data['topic']:
                                ticker_data = data['data']
                                symbol = self._normalize_symbol(ticker_data['symbol'])
                                if symbol in self.trading_pairs:
                                    self._update_price('bybit', symbol, float(ticker_data['bid1Price']), float(ticker_data['ask1Price']))
                            elif data.get('op') == 'subscribe':
                                if data.get('success'):
                                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Bybit: {data.get('ret_msg')}")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Bybit: {data.get('ret_msg')}")
                        elif msg.type in (aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.ERROR):
                            print("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Bybit –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                            break
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket Bybit: {e}")
                await asyncio.sleep(5)
                
    async def collect_non_ws_prices_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ —Ü–µ–Ω –¥–ª—è –±–∏—Ä–∂ –±–µ–∑ WebSocket."""
        while self.is_running:
            try:
                non_ws_exchanges = [ex for ex, use_ws in WS_EXCHANGES.items() if not use_ws]
                tasks = [self.fetch_prices(exchange) for exchange in non_ws_exchanges]
                if tasks:
                    await asyncio.gather(*tasks)
                await asyncio.sleep(1)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ collect_non_ws_prices_loop: {e}")
                await asyncio.sleep(5)

    async def fetch_prices(self, exchange: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –±–∏—Ä–∂–∏."""
        try:
            client = self.clients.get(exchange)
            if not client:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
            tickers = await client.fetch_tickers()
            
            for symbol in INTER_EXCHANGE_SYMBOLS:
                if symbol in tickers:
                    ticker = tickers[symbol]
                    bid = ticker.get('bid', 0)
                    ask = ticker.get('ask', 0)
                    
                    if bid and ask and bid > 0 and ask > 0:
                        self._update_price(symbol, exchange, bid, ask)
                        
        except Exception as e:
            if 'rate limit' in str(e).lower():
                print(f"‚ö†Ô∏è Rate limit –Ω–∞ {exchange}, –∂–¥–µ–º...")
                await asyncio.sleep(10)
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å {exchange}: {e}")
    
    async def collect_all_prices_loop(self):
        """–¶–∏–∫–ª —Å–±–æ—Ä–∞ —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂ —á–µ—Ä–µ–∑ REST API."""
        while self.is_running:
            try:
                tasks = [self.fetch_prices(exchange) for exchange in EXCHANGES.keys()]
                if tasks:
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    for i, result in enumerate(results):
                        if isinstance(result, Exception):
                            exchange = list(EXCHANGES.keys())[i]
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å {exchange}: {result}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                self.scanner_status['collector']['active'] = True
                
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ —Å–±–æ—Ä–∞
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ collect_all_prices_loop: {e}")
                await asyncio.sleep(5)
                
    def _now_ms(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö."""
        return int(time.time() * 1000)
    def _ensure_symbol_entry(self, symbol: str, exchange: str):
        if symbol not in self.prices:
            self.prices[symbol] = {}
        if exchange not in self.prices[symbol]:
            self.prices[symbol][exchange] = {'bid': 0.0, 'ask': 0.0, 'exchange': exchange, 'ts': 0.0}
            
        if symbol not in self.orderbooks:
            self.orderbooks[symbol] = {}
 
    def _update_price(self, symbol: str, exchange: str, bid: float, ask: float):
        if bid and ask and bid > 0 and ask > 0:
            self._ensure_symbol_entry(symbol, exchange)
            now_ts = time.time()
            self.prices[symbol][exchange].update({
                'bid': bid,
                'ask': ask,
                'ts': now_ts
            })
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
            self.scanner_status['prices_updated'] += 1
            self.scanner_status['last_price_update_ts'] = int(now_ts * 1000)
            # –°–æ–±—ã—Ç–∏–π–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if EVENT_INTER_ENABLED and self.mode in ('inter', 'both'):
                try:
                    # –î–µ–±–∞—É–Ω—Å–∏–Ω–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–æ–±—ã—Ç–∏—è–º–∏
                    last_event_time = self._debounce.get(symbol, 0)
                    if now_ts * 1000 - last_event_time > EVENT_DEBOUNCE_MS:
                        self._debounce[symbol] = now_ts * 1000
                        self._event_symbols.add(symbol)
                        if hasattr(self, '_event_trigger'):
                            self._event_trigger.set()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")

    async def _place_order(self, ex_name: str, symbol: str, side: str, amount: float, price: float, order_type: str = 'limit') -> Dict:
        """–†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        exchange_obj = getattr(self, ex_name)
        try:
            print(f"  -> –†–∞–∑–º–µ—â–∞—é {side.upper()} –æ—Ä–¥–µ—Ä –Ω–∞ {ex_name}: {amount:.6f} {symbol} @ {price:.6f}")
            if side == 'buy':
                order = await exchange_obj.create_limit_buy_order(symbol, amount, price, {'timeInForce': 'IOC'})
            else:
                order = await exchange_obj.create_limit_sell_order(symbol, amount, price, {'timeInForce': 'IOC'})
            print(f"  <- –û—Ä–¥–µ—Ä {order['id']} –Ω–∞ {ex_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω.")
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞
            if side == 'buy':
                self.trader_status['executor']['orders_placed'] += 1
            else:
                self.trader_status['executor']['orders_filled'] += 1
            return order
        except Exception as e:
            print(f"  <- ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {ex_name}: {e}")
            self.trader_status['executor']['orders_failed'] += 1
            raise e

    async def validate_opportunity(self, opp: Dict) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º."""
        try:
            self.trader_status['validator']['active'] = True
            symbol = opp['symbol']
            buy_ex = opp['buy_exchange']
            sell_ex = opp['sell_exchange']
            position_size_usd = DEFAULT_POSITION_SIZE_USD
            
            # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.risk_manager:
                approved, reason = self.risk_manager.validate_opportunity(opp)
                if not approved:
                    print(f"üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É: {reason}")
                    self.trader_status['risk_manager']['positions_rejected'] += 1
                    self.trader_status['validator']['checks_failed'] += 1
                    return False
                self.trader_status['risk_manager']['positions_approved'] += 1
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
            if opp['profit_pct'] < MIN_PROFIT_THRESHOLD:
                print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å {symbol} –Ω–µ –ø—Ä–æ—à–ª–∞ –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É: {opp['profit_pct']:.2f}% < {MIN_PROFIT_THRESHOLD}%")
                self.trader_status['validator']['checks_failed'] += 1
                return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
            buy_balance = self.balances.get(buy_ex, {})
            sell_balance = self.balances.get(sell_ex, {})
            
            if not buy_balance or not sell_balance:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –¥–ª—è {buy_ex} –∏–ª–∏ {sell_ex}")
                self.trader_status['validator']['checks_failed'] += 1
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∫–∏
            quote_currency = self.symbol_meta.get(buy_ex, {}).get(symbol, {}).get('quote', 'USDT')
            if buy_balance.get(quote_currency, {}).get('free', 0) < DEFAULT_POSITION_SIZE_USD:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {quote_currency} –Ω–∞ {buy_ex} –¥–ª—è —Å–¥–µ–ª–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${DEFAULT_POSITION_SIZE_USD}")
                self.trader_status['validator']['checks_failed'] += 1
                return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–∂–∏
            base_currency = self.symbol_meta.get(sell_ex, {}).get(symbol, {}).get('base', 'BTC')
            qty_needed_for_sale = DEFAULT_POSITION_SIZE_USD / self.prices.get(symbol, {}).get(sell_ex, {}).get('ask', 1e9)
            if sell_balance.get(base_currency, {}).get('free', 0) < qty_needed_for_sale:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_currency} –Ω–∞ {sell_ex}. –ù—É–∂–Ω–æ: ~{qty_needed_for_sale:.6f}, –¥–æ—Å—Ç—É–ø–Ω–æ: {sell_balance[base_currency]['free']:.6f}")
                self.trader_status['validator']['checks_failed'] += 1
                return False
            
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            self.trader_status['validator']['checks_passed'] += 1
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            self.trader_status['validator']['checks_failed'] += 1
            return False
        
    async def scan_inter_exchange_opportunities(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."""
        opportunities = []
        now_ts = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
        self.scanner_status['scans_performed'] += 1
        self.scanner_status['last_scan_ts'] = int(now_ts * 1000)
        
        for symbol in INTER_EXCHANGE_SYMBOLS:
            if symbol not in self.prices or len(self.prices[symbol]) < 2:
                continue
            
            prices_for_symbol = self.prices[symbol]
            
            # –ò—â–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –±–∏—Ä–∂
            best_bid = 0
            best_bid_exchange = None
            best_ask = float('inf')
            best_ask_exchange = None
            
            for exchange, price_data in prices_for_symbol.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
                if now_ts - price_data.get('ts', 0) > 5:
                    continue
                    
                bid = price_data.get('bid', 0)
                ask = price_data.get('ask', 0)
                
                if bid > best_bid and bid > 0:
                    best_bid = bid
                    best_bid_exchange = exchange
                    
                if ask < best_ask and ask > 0:
                    best_ask = ask
                    best_ask_exchange = exchange
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            if best_bid_exchange and best_ask_exchange and best_bid_exchange != best_ask_exchange:
                if best_bid > best_ask:  # –ê—Ä–±–∏—Ç—Ä–∞–∂ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ bid > ask
                    spread = best_bid - best_ask
                    spread_pct = (spread / best_ask) * 100
                    
                    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–∏—Ä–∂
                    buy_fee = EXCHANGES.get(best_ask_exchange, {}).get('taker_fee', 0.1)
                    sell_fee = EXCHANGES.get(best_bid_exchange, {}).get('taker_fee', 0.1)
                    total_fees = buy_fee + sell_fee
                    net_profit_pct = spread_pct - total_fees
                    
                    if net_profit_pct > MIN_PROFIT_THRESHOLD:
                        opportunity = {
                            'symbol': symbol,
                            'buy_exchange': best_ask_exchange,
                            'sell_exchange': best_bid_exchange,
                            'buy_price': best_ask,
                            'sell_price': best_bid,
                            'spread': spread,
                            'spread_pct': spread_pct,
                            'profit_pct': net_profit_pct,
                            'timestamp': now_ts,
                            'type': 'inter_exchange',
                            'buy_fee': buy_fee,
                            'sell_fee': sell_fee
                        }
                        opportunities.append(opportunity)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
                        self.scanner_status['opportunities_found'] += 1
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
                        print(f"‚ö° –ê—Ä–±–∏—Ç—Ä–∞–∂: {symbol} {best_ask_exchange}‚Üí{best_bid_exchange} "
                              f"—Å–ø—Ä–µ–¥: {spread_pct:.2f}%, —á–∏—Å—Ç–∞—è: {net_profit_pct:.2f}%")
        
        return opportunities
    
    async def execute_paper_trade(self, opp: Dict):
        """–ò—Å–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ paper —Ä–µ–∂–∏–º–µ."""
        try:
            symbol = opp['symbol']
            buy_ex = opp['buy_exchange']
            sell_ex = opp['sell_exchange']
            buy_price = opp['buy_price']
            sell_price = opp['sell_price']
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size_usd = DEFAULT_POSITION_SIZE_USD
            quantity = position_size_usd / buy_price
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
            buy_cost = position_size_usd * (1 + opp['buy_fee'] / 100)
            sell_revenue = (quantity * sell_price) * (1 - opp['sell_fee'] / 100)
            net_profit = sell_revenue - buy_cost
            net_profit_pct = (net_profit / buy_cost) * 100
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
            trade_record = {
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'type': 'inter_exchange',
                'buy_exchange': buy_ex,
                'sell_exchange': sell_ex,
                'buy_price': buy_price,
                'sell_price': sell_price,
                'quantity': quantity,
                'position_size_usd': position_size_usd,
                'buy_fee_pct': opp['buy_fee'],
                'sell_fee_pct': opp['sell_fee'],
                'gross_profit_pct': opp['spread_pct'],
                'net_profit_pct': net_profit_pct,
                'net_profit_usd': net_profit,
                'paper_balance': self.paper_balance + net_profit
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.paper_balance += net_profit
            self.paper_total_pnl += net_profit
            self.session_profit_usd += net_profit
            self.session_trades += 1
            self.paper_trades.append(trade_record)
            
            if self.paper_start_balance > 0:
                self.session_profit_pct = (self.session_profit_usd / self.paper_start_balance) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            self.trader_status['executor']['orders_placed'] += 2  # buy + sell
            self.trader_status['executor']['orders_filled'] += 2
            self.trader_status['tracker']['trades_monitored'] += 1
            self.trader_status['tracker']['trades_completed'] += 1
            self.trader_status['tracker']['active'] = True
            
            print(f"‚úÖ Paper —Å–¥–µ–ª–∫–∞ #{len(self.paper_trades)}: {symbol} "
                  f"{buy_ex}‚Üí{sell_ex} –ø—Ä–∏–±—ã–ª—å: ${net_profit:.2f} ({net_profit_pct:.2f}%)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ CSV
            try:
                file_path = self.csv_filename
                is_new_file = not os.path.exists(file_path)
                df = pd.DataFrame([trade_record])
                df.to_csv(file_path, mode='a', header=is_new_file, index=False)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Å–¥–µ–ª–æ–∫: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è paper —Å–¥–µ–ª–∫–∏: {e}")
            self.trader_status['executor']['orders_failed'] += 1

    async def close_sessions(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        self.is_running = False
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for task in getattr(self, 'ws_tasks', []):
                if task and not task.done():
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏–∏
            if hasattr(self, 'session') and self.session:
                await self.session.close()
            
            if hasattr(self, 'direct_session') and self.direct_session:
                await self.direct_session.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º CCXT –∫–ª–∏–µ–Ω—Ç—ã
            for exchange_name, client in self.clients.items():
                if hasattr(client, 'close'):
                    await client.close()
            
            print("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–π: {e}")
    
    async def close(self):
        """–ì—Ä–∞—Ü–∏–æ–∑–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∑–∞–∫—Ä—ã—Ç–∏–µ HTTP-—Å–µ—Å—Å–∏–∏."""
        self.is_running = False
        try:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞... –û—Ç–º–µ–Ω—è—é —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            # –û—Ç–º–µ–Ω–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            tasks = []
            try:
                for t in getattr(self, 'ws_tasks', []) or []:
                    if t and not t.done():
                        t.cancel()
                        tasks.append(t)
            except Exception:
                pass
            for name in ('_event_task', '_rest_price_task', '_save_csv_task'):
                t = getattr(self, name, None)
                if t and not t.done():
                    try:
                        t.cancel()
                        tasks.append(t)
                    except Exception:
                        pass
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ—Ç–º–µ–Ω—ã
            for t in tasks:
                try:
                    await t
                except Exception:
                    pass
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–µ—Å—Å–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤–∫–ª—é—á–µ–Ω–∞)
            try:
                self.save_to_csv()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é
            try:
                if getattr(self, 'session', None):
                    await self.session.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è HTTP-—Å–µ—Å—Å–∏–∏: {e}")
            
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    def _print_trade_visualization(self, trade_data: Dict):
        """–ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ."""
        symbol = trade_data['symbol']
        buy_ex = trade_data['buy_exchange']
        sell_ex = trade_data['sell_exchange']
        net_profit = trade_data.get('net_profit', trade_data.get('net_pct', 0))
        net_usd = trade_data.get('net_usd', 0)
        size_usd = trade_data['size_usd']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
        if net_usd > 0:
            profit_icon = "‚úÖ"
            color_start = "\033[92m"  # –ó–µ–ª—ë–Ω—ã–π
        else:
            profit_icon = "‚ùå"
            color_start = "\033[91m"  # –ö—Ä–∞—Å–Ω—ã–π
        color_end = "\033[0m"
        
        # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
        print("\n" + "‚ïê" * 60)
        print(f"  üìà –ê–†–ë–ò–¢–†–ê–ñ–ù–ê–Ø –°–î–ï–õ–ö–ê #{self.session_trades}")
        print("‚îÄ" * 60)
        
        # –ú–∞—Ä—à—Ä—É—Ç
        print(f"  üìç –ú–∞—Ä—à—Ä—É—Ç: {buy_ex} ‚Üí {sell_ex}")
        print(f"  üíé –°–∏–º–≤–æ–ª: {symbol}")
        
        # –¶–µ–Ω—ã
        buy_price = trade_data.get('buy_price_eff', 0)
        sell_price = trade_data.get('sell_price_eff', 0)
        spread = (sell_price - buy_price) / buy_price * 100 if buy_price > 0 else 0
        print(f"  üí∏ –ü–æ–∫—É–ø–∫–∞: ${buy_price:.4f} | –ü—Ä–æ–¥–∞–∂–∞: ${sell_price:.4f}")
        print(f"  üìä –°–ø—Ä–µ–¥: {spread:.3f}%")
        
        # –û–±—ä—ë–º—ã
        qty = trade_data.get('qty_base', 0)
        print(f"  üì¶ –û–±—ä—ë–º: {qty:.8f} | –†–∞–∑–º–µ—Ä: ${size_usd:.2f}")
        
        # –ü—Ä–∏–±—ã–ª—å
        print("‚îÄ" * 60)
        session_color = "\033[92m" if self.session_profit_usd > 0 else "\033[91m"
        print(f"  {profit_icon} –†–µ–∑—É–ª—å—Ç–∞—Ç: {color_start}${net_usd:.2f} ({net_profit:.3f}%){color_end}")
        
        # –°–µ—Å—Å–∏–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("‚îÄ" * 60)
        print(f"  üíº –°–µ—Å—Å–∏—è: {session_color}${self.session_profit_usd:.2f} ({self.session_profit_pct:.3f}%){color_end}")
        print(f"  üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.session_trades}")
        avg_profit = self.session_profit_usd / max(1, self.session_trades)
        print(f"  üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}")
        print("‚ïê" * 60)
    
    def print_system_status(self):
        """–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –°–∫–∞–Ω–µ—Ä –∏ –¢—Ä–µ–π–¥–µ—Ä."""
        now = int(time.time() * 1000)
        prices_updated = self.scanner_status['prices_updated']
        scans_performed = self.scanner_status['scans_performed']
        opps_found = self.scanner_status['opportunities_found']

        last_price_update_ago = (now - self.scanner_status['last_price_update_ts']) / 1000 if self.scanner_status['last_price_update_ts'] else -1
        last_scan_ago = (now - self.scanner_status['last_scan_ts']) / 1000 if self.scanner_status['last_scan_ts'] else -1

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ WS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        ws_status_str = ' '.join([
            f"‚úÖ {ex.upper()}" if self.ws_connected.get(ex) else f"üîå {ex.upper()}"
            for ex in self.ws_exchanges
        ])

        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        print("\033[H\033[J", end="")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∏—Å—Ç–µ–º—ã
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë           MEGA ARBITRAGE BOT - –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê v2.0              ‚ïë")
        print("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
        print(f"‚ïë –†–µ–∂–∏–º: {self.mode.upper():^10} ‚îÇ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int((time.time() - self.statistics['start_time'].timestamp()) / 60):>3} –º–∏–Ω ‚îÇ PnL: ${self.paper_total_pnl:+.2f}  ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print()
        
        # –ú–û–î–£–õ–¨ 1: –°–ö–ê–ù–ï–†
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                        üì° –ú–û–î–£–õ–¨ –°–ö–ê–ù–ï–†                              ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç       ‚îÇ –°—Ç–∞—Ç—É—Å                    ‚îÇ –ú–µ—Ç—Ä–∏–∫–∏               ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        # –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        collector_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if last_price_update_ago != -1 and last_price_update_ago < 10 else "üî¥ –ü—Ä–æ–±–ª–µ–º–∞"
        collector_metrics = f"{prices_updated:>5} —Ü–µ–Ω ‚îÇ {last_price_update_ago:>4.1f}—Å"
        print(f"‚îÇ –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö  ‚îÇ {collector_status:<25} ‚îÇ {collector_metrics:<21} ‚îÇ")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω
        store_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if len(self.prices) > 0 else "‚ö†Ô∏è –ü—É—Å—Ç–æ"
        store_metrics = f"{len(self.prices):>5} –ø–∞—Ä ‚îÇ {sum(len(v) for v in self.prices.values()):>5} —Ç–∏–∫–µ—Ä–æ–≤"
        print(f"‚îÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω   ‚îÇ {store_status:<25} ‚îÇ {store_metrics:<21} ‚îÇ")
        
        # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if last_scan_ago != -1 and last_scan_ago < 10 else "üí§ –û–∂–∏–¥–∞–Ω–∏–µ"
        analyzer_metrics = f"{scans_performed:>5} —Å–∫–∞–Ω ‚îÇ {opps_found:>5} –≤–æ–∑–º."
        print(f"‚îÇ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä      ‚îÇ {analyzer_status:<25} ‚îÇ {analyzer_metrics:<21} ‚îÇ")

        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        print()
        
        # –ú–û–î–£–õ–¨ 2: –¢–†–ï–ô–î–ï–†
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                        üí∞ –ú–û–î–£–õ–¨ –¢–†–ï–ô–î–ï–†                             ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        print("‚îÇ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç       ‚îÇ –°—Ç–∞—Ç—É—Å                    ‚îÇ –ú–µ—Ç—Ä–∏–∫–∏               ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        # –í–∞–ª–∏–¥–∞—Ç–æ—Ä
        val = self.trader_status['validator']
        val_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if val['active'] else "üí§ –û–∂–∏–¥–∞–Ω–∏–µ"
        val_metrics = f"‚úì{val['checks_passed']:>4} ‚îÇ ‚úó{val['checks_failed']:>4}"
        print(f"‚îÇ –í–∞–ª–∏–¥–∞—Ç–æ—Ä       ‚îÇ {val_status:<25} ‚îÇ {val_metrics:<21} ‚îÇ")
        
        # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
        risk = self.trader_status['risk_manager']
        risk_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if risk['active'] else "üí§ –û–∂–∏–¥–∞–Ω–∏–µ"
        risk_metrics = f"‚úì{risk['positions_approved']:>4} ‚îÇ ‚úó{risk['positions_rejected']:>4}"
        print(f"‚îÇ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä   ‚îÇ {risk_status:<25} ‚îÇ {risk_metrics:<21} ‚îÇ")
        
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        exec = self.trader_status['executor']
        exec_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if exec['active'] else "üí§ –û–∂–∏–¥–∞–Ω–∏–µ"
        exec_metrics = f"üì§{exec['orders_placed']:>3} ‚îÇ ‚úÖ{exec['orders_filled']:>3}"
        print(f"‚îÇ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å     ‚îÇ {exec_status:<25} ‚îÇ {exec_metrics:<21} ‚îÇ")
        
        # –¢—Ä–µ–∫–µ—Ä
        track = self.trader_status['tracker']
        track_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if track['active'] else "üí§ –û–∂–∏–¥–∞–Ω–∏–µ"
        track_metrics = f"üëÅ{track['trades_monitored']:>3} ‚îÇ ‚úì{track['trades_completed']:>3}"
        print(f"‚îÇ –¢—Ä–µ–∫–µ—Ä —Å–¥–µ–ª–æ–∫   ‚îÇ {track_status:<25} ‚îÇ {track_metrics:<21} ‚îÇ")
        
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        print()
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ                      üîå –°–¢–ê–¢–£–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô                           ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        ws_line = "‚îÇ WebSocket: "
        for ex in self.ws_exchanges:
            if self.ws_connected.get(ex):
                ws_line += f"‚úÖ {ex.upper()} "
            else:
                ws_line += f"üî¥ {ex.upper()} "
        ws_line = ws_line.ljust(71) + "‚îÇ"
        print(ws_line)
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        sys.stdout.flush()

    def print_key_parameters(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª."""
        params = {
            "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã": "WebSocket" if USE_WS else "REST API",
            "–ü—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è": "–î–∞" if PROXY_URL else "–ù–µ—Ç",
            "uvloop —É—Å–∫–æ—Ä–µ–Ω–∏–µ": "–í–∫–ª—é—á–µ–Ω–æ" if UVLOOP_ENABLED else "–û—Ç–∫–ª—é—á–µ–Ω–æ",
            "–ü–æ—Ä–æ–≥ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (STALE_MS)": f"{STALE_MS} –º—Å",
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è": f"{SCAN_INTERVAL_SECONDS} —Å",
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (–º–µ–∂–±–∏—Ä–∂.)": f"{INTER_MIN_PROFIT_PCT}%",
            "WebSocket –±–∏—Ä–∂–∏": ", ".join([ex for ex, enabled in WS_EXCHANGES.items() if enabled])
        }

        print("\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ   ‚öôÔ∏è  –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–µ—Ä–∞   ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        for key, value in params.items():
            print(f"‚îÇ {key:<30} ‚îÇ {value:<35} ‚îÇ")
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n")

    def print_startup_banner(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        print("\n" + "="*70)
        print("""    
    ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ïó ‚ï¶‚ïî‚ï¶‚ïó‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó  ‚ïî‚ïó ‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó
    ‚ïë‚ïë‚ïë‚ïë‚ï£ ‚ïë ‚ï¶‚ï†‚ïê‚ï£  ‚ï†‚ïê‚ï£‚ï†‚ï¶‚ïù‚ï†‚ï©‚ïó‚ïë ‚ïë ‚ï†‚ï¶‚ïù‚ï†‚ïê‚ï£‚ïë ‚ï¶‚ïë‚ï£   ‚ï†‚ï©‚ïó‚ïë ‚ïë ‚ïë 
    ‚ï© ‚ï©‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï© ‚ï©  ‚ï© ‚ï©‚ï©‚ïö‚ïê‚ïö‚ïê‚ïù‚ï© ‚ï© ‚ï©‚ïö‚ïê‚ï© ‚ï©‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù ‚ï© 
        """)
        print("="*70)
        print(f"  üöÄ –í–µ—Ä—Å–∏—è: 2.0 | –†–µ–∂–∏–º: {'DEMO' if PAPER_TRADING else 'REAL'}")
        position_size = self.paper_balance * (POSITION_SIZE_PCT / 100.0)
        print(f"  üí∞ –ö–∞–ø–∏—Ç–∞–ª: ${self.paper_balance:,.2f}")
        print(f"  üìä –ü–æ–∑–∏—Ü–∏—è: ${position_size:,.2f} ({POSITION_SIZE_PCT}% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)")
        print(f"  üéØ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: {INTER_MIN_PROFIT_PCT:.2f}%")
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö
        total_symbols = sum(len(symbols) for symbols in self.symbols.values())
        print("="*70)
        
        # –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
        print("\nüìã –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
        for exchange, is_valid in self.api_keys_valid.items():
            if is_valid:
                print(f"  ‚úÖ {exchange.upper()}: –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
            else:
                print(f"  ‚ö†Ô∏è  {exchange.upper()}: –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ (–Ω–µ—Ç API –∫–ª—é—á–µ–π)")
        
        print("\n" + "="*70)
        print("  –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
        print("="*70 + "\n")
    
    async def _reconcile_on_startup(self):
        """–°–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –æ—Ç–º–µ–Ω–∞ –≤–∏—Å—è—á–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤."""
        print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è reconciliation...")
        
        if PAPER_TRADING:
            print("  üìù –î–µ–º–æ —Ä–µ–∂–∏–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º reconciliation")
            return
        
        for exchange in EXCHANGES.keys():
            if not self.api_keys_valid.get(exchange):
                continue
            
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
                print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {exchange}...")
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                # open_orders = await self._get_open_orders(exchange)
                # for order in open_orders:
                #     await self._cancel_order(exchange, order['id'])
                #     print(f"    ‚ùå –û—Ç–º–µ–Ω—ë–Ω –æ—Ä–¥–µ—Ä {order['id']}")
                
                # 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                await self._fetch_balance(exchange)
                balances = self.real_balances.get(exchange, {})
                usdt_balance = balances.get('USDT', 0)
                if usdt_balance > 0:
                    print(f"    üí∞ USDT: ${usdt_balance:.2f}")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        
        print("  ‚úÖ Reconciliation –∑–∞–≤–µ—Ä—à—ë–Ω\n")

    async def _scanner_status_loop(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ."""
        await asyncio.sleep(2)  # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        while self.is_running:
            try:
                self.print_system_status()
                await asyncio.sleep(1) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _scanner_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
        await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        while self.is_running:
            try:
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –º–µ–∂–±–∏—Ä–∂–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                opportunities = await self.scan_inter_exchange_opportunities()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                for opp in opportunities:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    if await self.validate_opportunity(opp):
                        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ paper —Ä–µ–∂–∏–º–µ
                        if self.mode == 'paper':
                            await self.execute_paper_trade(opp)
                
                await asyncio.sleep(SCAN_INTERVAL_SECONDS)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(5)
    
    async def run_bot(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        print("üöÄ –ó–∞–ø—É—Å–∫ Mega Arbitrage Bot...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏
        connector = None
        if PROXY_URL:
            import aiohttp_socks
            connector = aiohttp_socks.ProxyConnector.from_url(PROXY_URL)
            print(f"üîå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {PROXY_URL}")
        self.session = aiohttp.ClientSession(connector=connector)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            tasks = []
            
            # 1. –ó–∞–¥–∞—á–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_task = asyncio.create_task(self._scanner_status_loop())
            tasks.append(status_task)
            print("‚úÖ –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # 2. –ó–∞–¥–∞—á–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scanner_task = asyncio.create_task(self._scanner_loop())
            tasks.append(scanner_task)
            print("‚úÖ –°–∫–∞–Ω–µ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∑–∞–ø—É—â–µ–Ω")
            
            # 3. –ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ —Ü–µ–Ω
            if USE_WS:
                # WebSocket —Ä–µ–∂–∏–º
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –¥–ª—è Bybit
                    if WS_EXCHANGES.get('bybit'):
                        ws_task = asyncio.create_task(self._ws_bybit())
                        tasks.append(ws_task)
                        print("‚úÖ WebSocket Bybit –∑–∞–ø—É—â–µ–Ω")
                    
                    # REST –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂
                    rest_task = asyncio.create_task(self.collect_non_ws_prices_loop())
                    tasks.append(rest_task)
                    print("‚úÖ REST —Å–±–æ—Ä—â–∏–∫ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")
                    # Fallback –Ω–∞ –ø–æ–ª–Ω—ã–π REST
                    rest_task = asyncio.create_task(self.collect_all_prices_loop())
                    tasks.append(rest_task)
            else:
                # –ü–æ–ª–Ω—ã–π REST —Ä–µ–∂–∏–º
                rest_task = asyncio.create_task(self.collect_all_prices_loop())
                tasks.append(rest_task)
                print("‚úÖ REST —Å–±–æ—Ä—â–∏–∫ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω")
            
            print("\n" + "="*70)
            print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("="*70 + "\n")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks)
            
        except asyncio.CancelledError:
            print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            self.is_running = False
            await self.close_sessions()


# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

async def main(mode: str):
    parser = argparse.ArgumentParser(description='Mega Arbitrage Bot')
    parser.add_argument('--mode', type=str, choices=['inter', 'tri', 'both'], default='both', help='Trading mode')
    args = parser.parse_args()

    bot = MegaArbitrageBot(mode=args.mode)
    try:
        await bot.run_bot()
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞—é —à—Ç–∞—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞... –û—Ç–º–µ–Ω—è—é —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.")
        if 'bot' in locals():
            await bot.close_sessions()
        print("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main('both'))
