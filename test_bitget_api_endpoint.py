#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä Bitget
"""

import aiohttp
import asyncio
import json
from datetime import datetime

async def test_bitget_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ API endpoints Bitget"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS BITGET")
    print("=" * 50)
    
    endpoints = [
        {
            'name': '–°—Ç–∞—Ä—ã–π API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ)',
            'url': 'https://api.bitget.com/api/spot/v1/market/tickers'
        },
        {
            'name': '–ù–æ–≤—ã–π API V2 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)',
            'url': 'https://api.bitget.com/api/v2/spot/market/tickers'
        },
        {
            'name': 'Public Products API',
            'url': 'https://api.bitget.com/api/spot/v1/public/products'
        }
    ]
    
    async with aiohttp.ClientSession() as session:
        for endpoint in endpoints:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint['name']}")
            print(f"üîó URL: {endpoint['url']}")
            
            try:
                async with session.get(endpoint['url']) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {resp.status}")
                        print(f"   üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(data))} chars")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                        if 'data' in data and isinstance(data['data'], list):
                            items = data['data'][:3]  # –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                            print(f"   üìà –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ data: {len(data['data'])}")
                            print(f"   üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {json.dumps(items, indent=2)}")
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ –≤ –±–æ—Ç–µ
                            pairs = []
                            for ticker in data.get('data', []):
                                sym_raw = str(ticker.get('symbol', '')).upper()
                                if not sym_raw:
                                    continue
                                # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –∫–∞–Ω–∞–ª–∞ —Å–ø–æ—Ç–∞ Bitget
                                basequote = sym_raw.split('_')[0]
                                if basequote.endswith('USDT') and len(basequote) > 4:
                                    base = basequote[:-4]
                                    pairs.append(f"{base}/USDT")
                            
                            print(f"   üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ USDT –ø–∞—Ä: {len(pairs)}")
                            if pairs:
                                print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä: {pairs[:10]}")
                        else:
                            print(f"   üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                            
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {resp.status}")
                        try:
                            error_data = await resp.text()
                            print(f"   üìÑ –û—Ç–≤–µ—Ç: {error_data[:200]}...")
                        except:
                            pass
                            
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")

if __name__ == "__main__":
    asyncio.run(test_bitget_api_endpoints())
