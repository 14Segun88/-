#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Bitget
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
"""

import asyncio
import ccxt
import json
import sys
from datetime import datetime
from production_config import EXCHANGES_CONFIG

class BitgetPairsTest:
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'success': False,
            'error': None,
            'total_pairs': 0,
            'usdt_pairs': 0,
            'common_pairs_found': 0,
            'sample_pairs': [],
            'api_response_time': None
        }
        
    async def test_bitget_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitget API –∏ –∑–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget API...")
        
        try:
            start_time = datetime.now()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bitget CCXT –∫–ª–∏–µ–Ω—Ç
            bitget_config = EXCHANGES_CONFIG['bitget']
            bitget = ccxt.bitget({
                'apiKey': '',  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä API –∫–ª—é—á–∏ –Ω–µ –Ω—É–∂–Ω—ã
                'secret': '',
                'password': '',
                'sandbox': False,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º production API –¥–ª—è markets
                'enableRateLimit': True,
                'rateLimit': bitget_config['rate_limit'],
                'options': {
                    'defaultType': 'spot'  # Explicitly request spot markets
                }
            })
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º markets (—Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã)
            print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã Bitget...")
            markets = bitget.load_markets()
            
            response_time = (datetime.now() - start_time).total_seconds()
            self.results['api_response_time'] = response_time
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SPOT –ø–∞—Ä—ã
            spot_pairs = {symbol: market for symbol, market in markets.items() 
                         if market['type'] == 'spot' and market['active']}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã
            usdt_pairs = {symbol: market for symbol, market in spot_pairs.items() 
                         if symbol.endswith('/USDT')}
            
            self.results['total_pairs'] = len(spot_pairs)
            self.results['usdt_pairs'] = len(usdt_pairs)
            self.results['sample_pairs'] = list(usdt_pairs.keys())[:20]  # –ü–µ—Ä–≤—ã–µ 20 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from production_config import DYNAMIC_PAIRS_CONFIG
            priority_pairs = DYNAMIC_PAIRS_CONFIG['priority_pairs']
            
            common_found = [pair for pair in priority_pairs if pair in usdt_pairs]
            self.results['common_pairs_found'] = len(common_found)
            
            self.results['success'] = True
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bitget —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìà Total SPOT pairs: {len(spot_pairs)}")
            print(f"üí∞ USDT pairs: {len(usdt_pairs)}")
            print(f"‚≠ê Priority pairs found: {len(common_found)}/{len(priority_pairs)}")
            print(f"‚ö° Response time: {response_time:.2f}s")
            
            await bitget.close()
            
        except Exception as e:
            self.results['error'] = str(e)
            self.results['success'] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitget: {e}")
            
    async def load_common_pairs_validation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—â–∏–µ –ø–∞—Ä—ã OKX-Bitget –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Bitget"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –ø–∞—Ä OKX-Bitget...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –ø–∞—Ä
            with open('common_pairs_okx_bitget.json', 'r') as f:
                common_data = json.load(f)
                common_pairs = common_data.get('common_pairs', [])
                
            print(f"üìã –û–±—â–∏—Ö –ø–∞—Ä –≤ —Ñ–∞–π–ª–µ: {len(common_pairs)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            bitget = ccxt.bitget({
                'apiKey': '',
                'secret': '',
                'password': '',
                'sandbox': False,
                'enableRateLimit': True,
                'options': {'defaultType': 'spot'}
            })
            
            markets = bitget.load_markets()
            spot_markets = {symbol for symbol, market in markets.items() 
                           if market['type'] == 'spot' and market['active']}
            
            available_common = [pair for pair in common_pairs[:10] if pair in spot_markets]
            
            print(f"‚úÖ –ü–µ—Ä–≤—ã–µ 10 –æ–±—â–∏—Ö –ø–∞—Ä –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ Bitget: {len(available_common)}/10")
            print(f"üéØ –ü—Ä–∏–º–µ—Ä—ã: {available_common[:5]}")
            
            await bitget.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—â–∏—Ö –ø–∞—Ä: {e}")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with open('bitget_pairs_test_results.json', 'w') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bitget_pairs_test_results.json")
        
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        print("\n" + "="*50)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BITGET")
        print("="*50)
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ OK' if self.results['success'] else '‚ùå FAIL'}")
        print(f"üìà –í—Å–µ–≥–æ SPOT –ø–∞—Ä: {self.results['total_pairs']}")
        print(f"üí∞ USDT –ø–∞—Ä: {self.results['usdt_pairs']}")
        print(f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ: {self.results['common_pairs_found']}")
        if self.results['api_response_time'] is not None:
            print(f"‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: {self.results['api_response_time']:.2f}s")
        else:
            print("‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: N/A")
        
        if self.results['error']:
            print(f"‚ùå –û—à–∏–±–∫–∞: {self.results['error']}")
            
        if self.results['sample_pairs']:
            print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT –ø–∞—Ä:")
            for i, pair in enumerate(self.results['sample_pairs'][:10], 1):
                print(f"   {i:2d}. {pair}")

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä Bitget...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 50)
    
    tester = BitgetPairsTest()
    
    try:
        await tester.test_bitget_connection()
        await tester.load_common_pairs_validation()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    finally:
        tester.save_results()
        tester.print_summary()
        print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
