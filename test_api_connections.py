#!/usr/bin/env python3
"""
üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
"""

import asyncio
import ccxt.async_support as ccxt
from production_config import API_KEYS, PROXY_CONFIG
import aiohttp
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_exchange(exchange_name, config):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    exchange = None
    try:
        logger.info(f"\n{'='*50}")
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {exchange_name}...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∏—Ä–∂–∏
        exchange_class = getattr(ccxt, exchange_name.lower())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∏—Ä–∂–∏
        exchange_config = {
            'apiKey': config.get('apiKey', ''),
            'secret': config.get('secret', ''),
            'enableRateLimit': True,
            'options': {
                'defaultType': 'spot'
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∏—Ä–∂, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —Ç—Ä–µ–±—É—é—Ç
        if 'password' in config and config['password']:
            exchange_config['password'] = config['password']
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
        if PROXY_CONFIG.get('enabled'):
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏
            if exchange_name.upper() in ['HUOBI', 'OKX']:
                # –ê–∑–∏–∞—Ç—Å–∫–∏–µ –±–∏—Ä–∂–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Japan –ø—Ä–æ–∫—Å–∏
                proxy = PROXY_CONFIG['japan']['https']
                logger.info(f"  üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Japan –ø—Ä–æ–∫—Å–∏ –¥–ª—è {exchange_name}")
            elif exchange_name.upper() in ['BINANCE', 'BYBIT']:
                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Netherlands –ø—Ä–æ–∫—Å–∏
                proxy = PROXY_CONFIG['netherlands']['https']
                logger.info(f"  üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Netherlands –ø—Ä–æ–∫—Å–∏ –¥–ª—è {exchange_name}")
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ Estonia
                proxy = None
            
            if proxy:
                exchange_config['proxies'] = {
                    'http': proxy,
                    'https': proxy
                }
                exchange_config['aiohttp_proxy'] = proxy
        
        exchange = exchange_class(exchange_config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
        logger.info(f"  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API...")
        markets = await exchange.load_markets()
        logger.info(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–∞—Ä—ã
        test_symbol = 'BTC/USDT'
        if test_symbol in markets:
            ticker = await exchange.fetch_ticker(test_symbol)
            logger.info(f"  üíπ {test_symbol}: ${ticker['last']:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏
        if config.get('apiKey'):
            logger.info(f"  üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API...")
            try:
                balance = await exchange.fetch_balance()
                usdt_balance = balance.get('USDT', {}).get('free', 0)
                logger.info(f"  üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
                logger.info(f"  ‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            except Exception as e:
                if 'Invalid API' in str(e) or 'signature' in str(e).lower():
                    logger.error(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏: {str(e)[:100]}")
                elif 'Permission' in str(e) or 'unauthorized' in str(e).lower():
                    logger.warning(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ API –∫–ª—é—á–∞: {str(e)[:100]}")
                else:
                    logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ API: {str(e)[:100]}")
        else:
            logger.info(f"  ‚ÑπÔ∏è API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {str(e)[:200]}")
        return False
    finally:
        try:
            if exchange is not None:
                await exchange.close()
        except Exception:
            pass

async def test_all_exchanges():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∏—Ä–∂"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    logger.info(f"üì° –ü—Ä–æ–∫—Å–∏ {'–≤–∫–ª—é—á–µ–Ω' if PROXY_CONFIG.get('enabled') else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
    for exchange_name, config in API_KEYS.items():
        if not config.get('apiKey'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ä–∂–∏ –±–µ–∑ –∫–ª—é—á–µ–π
            logger.info(f"\n‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {exchange_name} (–Ω–µ—Ç API –∫–ª—é—á–µ–π)")
            continue
            
        result = await test_exchange(exchange_name, config)
        results[exchange_name] = result
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    logger.info(f"{'='*50}")
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    for exchange, success in results.items():
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        logger.info(f"  {exchange}: {status}")
    
    logger.info(f"\nüìà –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {success_count}/{total_count} –±–∏—Ä–∂")
    
    if success_count < total_count:
        logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
        logger.info("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞")
        logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ IP –∞–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        logger.info("  4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_all_exchanges()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
