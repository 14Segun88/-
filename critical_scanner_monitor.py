#!/usr/bin/env python3
"""
üîç CRITICAL SCANNER MONITOR - Real-time Critical Data Monitoring
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import aiohttp
import json
import time
import os
import sys
import re
import glob
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from collections import defaultdict, deque
import logging
from colorama import init, Fore, Back, Style
import threading
from pathlib import Path

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

@dataclass
class CriticalMetrics:
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞"""
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    data_latency_ms: float = 0.0
    data_freshness_pct: float = 0.0
    data_quality_score: float = 0.0
    stale_data_count: int = 0
    
    # WebSocket —Å—Ç–∞—Ç—É—Å
    ws_connections: Dict[str, bool] = field(default_factory=dict)
    ws_last_message: Dict[str, float] = field(default_factory=dict)
    ws_message_rate: Dict[str, float] = field(default_factory=dict)
    
    # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    avg_orderbook_depth_usd: float = 0.0
    min_bid_ask_volume_usd: float = 0.0
    liquidity_impact_pct: float = 0.0
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    scan_frequency_hz: float = 0.0
    processing_time_ms: float = 0.0
    missed_scans: int = 0
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    total_signals: int = 0
    filtered_signals: int = 0
    quality_signals: int = 0
    false_positives: int = 0
    anomalous_spreads: int = 0
    
    # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    inter_opportunities: int = 0
    triangular_opportunities: int = 0
    avg_profit_pct: float = 0.0
    max_profit_pct: float = 0.0
    opportunities_per_hour: float = 0.0
    
    # –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    connection_errors: int = 0
    data_errors: int = 0
    timeout_errors: int = 0
    api_rate_limits: int = 0

@dataclass
class ExchangeCriticalData:
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏"""
    name: str
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    rest_connected: bool = False
    rest_latency_ms: float = 0.0
    ws_connected: bool = False
    ws_last_ping: float = 0.0
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    data_quality: float = 0.0
    orderbook_depth_usd: float = 0.0
    active_pairs: int = 0
    volume_24h_usd: float = 0.0
    
    # –û—à–∏–±–∫–∏
    error_count: int = 0
    last_error: str = ""
    rate_limited: bool = False

class CriticalScannerMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–∞"""
    
    def __init__(self):
        self.metrics = CriticalMetrics()
        self.exchanges = {}
        self.opportunity_history = deque(maxlen=100)
        self.running = False
        self.last_update = time.time()
        self.log_files = []
        self.log_positions = {}
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è 10/10
        self.critical_thresholds = {
            'MAX_DATA_LATENCY_MS': 50,
            'MIN_DATA_FRESHNESS_PCT': 95,
            'MIN_DATA_QUALITY': 0.95,
            'MIN_WS_CONNECTIONS': 3,
            'MIN_ORDERBOOK_DEPTH_USD': 1000,
            'MIN_SCAN_FREQUENCY_HZ': 1.0,
            'MAX_PROCESSING_TIME_MS': 100,
            'MIN_SIGNAL_QUALITY_PCT': 10,
            'MAX_FALSE_POSITIVE_PCT': 5,
            'MIN_OPPORTUNITIES_PER_HOUR': 5,
            'MAX_ERROR_RATE_PCT': 2
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂
        self.init_exchanges()
        self.find_log_files()
        
    def init_exchanges(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂"""
        exchange_configs = {
            'mexc': 'MEXC',
            'bybit': 'Bybit', 
            'huobi': 'Huobi',
            'binance': 'Binance',
            'okx': 'OKX',
            'kucoin': 'KuCoin'
        }
        
        for exchange_id, name in exchange_configs.items():
            self.exchanges[exchange_id] = ExchangeCriticalData(name=name)
            self.metrics.ws_connections[exchange_id] = False
            self.metrics.ws_last_message[exchange_id] = 0
            self.metrics.ws_message_rate[exchange_id] = 0
    
    def find_log_files(self):
        """–ü–æ–∏—Å–∫ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞"""
        patterns = [
            "production_bot.log",
            "websocket_bot.log", 
            "mega_arbitrage_bot.log",
            "*bot*.log",
            "*.log"
        ]
        
        for pattern in patterns:
            files = glob.glob(pattern)
            self.log_files.extend(files)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.log_files = list(set(self.log_files))
        self.log_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–∞–π–ª–∞—Ö
        for log_file in self.log_files:
            self.log_positions[log_file] = 0
        
        if self.log_files:
            print(f"üìÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤: {', '.join(self.log_files[:3])}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        
        tasks = [
            self.monitor_exchanges(),
            self.parse_logs_realtime(),
            self.calculate_metrics(),
            self.display_critical_dashboard()
        ]
        
        await asyncio.gather(*tasks, return_exceptions=True)
    
    async def monitor_exchanges(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏—Ä–∂"""
        exchange_urls = {
            'mexc': 'https://api.mexc.com/api/v3/ping',
            'bybit': 'https://api.bybit.com/v5/market/time',
            'huobi': 'https://api.huobi.pro/v1/common/timestamp',
            'binance': 'https://api.binance.com/api/v3/ping',
            'okx': 'https://www.okx.com/api/v5/public/time'
        }
        
        while self.running:
            for exchange_id, url in exchange_urls.items():
                try:
                    start_time = time.time()
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url, timeout=5) as response:
                            latency = (time.time() - start_time) * 1000
                            
                            exchange = self.exchanges[exchange_id]
                            exchange.rest_connected = response.status == 200
                            exchange.rest_latency_ms = latency
                            exchange.data_quality = 1.0 if latency < 100 else 0.8
                            exchange.error_count = 0 if exchange.rest_connected else exchange.error_count + 1
                            
                except Exception as e:
                    if exchange_id in self.exchanges:
                        self.exchanges[exchange_id].rest_connected = False
                        self.exchanges[exchange_id].error_count += 1
                        self.exchanges[exchange_id].last_error = str(e)[:50]
                        self.metrics.connection_errors += 1
            
            await asyncio.sleep(2)
    
    async def parse_logs_realtime(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        while self.running:
            try:
                for log_file in self.log_files:
                    if not os.path.exists(log_file):
                        continue
                        
                    try:
                        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            f.seek(self.log_positions[log_file])
                            new_lines = f.readlines()
                            self.log_positions[log_file] = f.tell()
                            
                            for line in new_lines:
                                await self.parse_log_line(line.strip())
                                
                    except Exception as e:
                        self.metrics.data_errors += 1
                        
            except Exception as e:
                self.metrics.data_errors += 1
            
            await asyncio.sleep(1)
    
    async def parse_log_line(self, line: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–∞–Ω–æ–≤
            if "–°–∫–∞–Ω #" in line:
                scan_match = re.search(r'–°–∫–∞–Ω #(\d+)', line)
                if scan_match:
                    scan_num = int(scan_match.group(1))
                    # –†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    current_time = time.time()
                    if hasattr(self, 'last_scan_time'):
                        time_diff = current_time - self.last_scan_time
                        if time_diff > 0:
                            self.metrics.scan_frequency_hz = 1.0 / time_diff
                    self.last_scan_time = current_time
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            elif "‚ö° –°–æ–±—ã—Ç–∏–µ:" in line or "–ú–ï–ñ–ë–ò–†–ñ–ï–í–û–ô –ê–†–ë–ò–¢–†–ê–ñ" in line:
                self.metrics.total_signals += 1
                
                profit_match = re.search(r'(\d+\.?\d*)%', line)
                if profit_match:
                    profit_pct = float(profit_match.group(1))
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    if profit_pct > 10:  # –ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                        self.metrics.anomalous_spreads += 1
                        self.metrics.filtered_signals += 1
                    elif profit_pct < 0.05:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–∏–±—ã–ª—å
                        self.metrics.filtered_signals += 1
                    else:
                        self.metrics.quality_signals += 1
                        self.metrics.inter_opportunities += 1
                        self.metrics.avg_profit_pct = (self.metrics.avg_profit_pct + profit_pct) / 2
                        self.metrics.max_profit_pct = max(self.metrics.max_profit_pct, profit_pct)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            elif "WebSocket" in line:
                if "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" in line:
                    for exchange_id in self.exchanges.keys():
                        if exchange_id.upper() in line.upper():
                            self.metrics.ws_connections[exchange_id] = True
                            self.metrics.ws_last_message[exchange_id] = time.time()
                elif "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ" in line or "–æ—à–∏–±–∫–∞" in line.lower():
                    for exchange_id in self.exchanges.keys():
                        if exchange_id.upper() in line.upper():
                            self.metrics.ws_connections[exchange_id] = False
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–∫–∞–Ω–æ–≤
            elif "–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞–∫–∞–Ω" in line:
                depth_match = re.search(r'(\d+) bids, (\d+) asks', line)
                if depth_match:
                    bids = int(depth_match.group(1))
                    asks = int(depth_match.group(2))
                    
                    if bids == 0 or asks == 0:
                        self.metrics.stale_data_count += 1
                    else:
                        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–ª—É–±–∏–Ω—ã —Å—Ç–∞–∫–∞–Ω–∞
                        estimated_depth = (bids + asks) * 50  # $50 —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
                        self.metrics.avg_orderbook_depth_usd = (
                            self.metrics.avg_orderbook_depth_usd + estimated_depth
                        ) / 2
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫
            elif "–æ—à–∏–±–∫–∞" in line.lower() or "error" in line.lower():
                self.metrics.data_errors += 1
                
        except Exception as e:
            self.metrics.data_errors += 1
    
    async def calculate_metrics(self):
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"""
        while self.running:
            try:
                # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                connected_exchanges = sum(1 for ex in self.exchanges.values() if ex.rest_connected)
                if connected_exchanges > 0:
                    avg_quality = sum(ex.data_quality for ex in self.exchanges.values() if ex.rest_connected) / connected_exchanges
                    self.metrics.data_quality_score = avg_quality
                
                # –†–∞—Å—á–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                latencies = [ex.rest_latency_ms for ex in self.exchanges.values() if ex.rest_connected]
                if latencies:
                    self.metrics.data_latency_ms = sum(latencies) / len(latencies)
                
                # –†–∞—Å—á–µ—Ç —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                total_data_points = self.metrics.total_signals + self.metrics.stale_data_count
                if total_data_points > 0:
                    self.metrics.data_freshness_pct = (
                        (total_data_points - self.metrics.stale_data_count) / total_data_points * 100
                    )
                
                # –†–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Å
                current_time = time.time()
                if hasattr(self, 'start_time'):
                    hours_running = (current_time - self.start_time) / 3600
                    if hours_running > 0:
                        self.metrics.opportunities_per_hour = self.metrics.inter_opportunities / hours_running
                else:
                    self.start_time = current_time
                
                self.last_update = time.time()
                
            except Exception as e:
                self.metrics.data_errors += 1
            
            await asyncio.sleep(5)
    
    def get_status_indicator(self, value, threshold, reverse=False, percentage=False):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        if percentage:
            display_value = f"{value:.1f}%"
        else:
            display_value = f"{value:.1f}" if isinstance(value, float) else str(value)
        
        if reverse:
            status = "‚úÖ" if value <= threshold else "‚ùå"
            color = Fore.GREEN if value <= threshold else Fore.RED
        else:
            status = "‚úÖ" if value >= threshold else "‚ùå"
            color = Fore.GREEN if value >= threshold else Fore.RED
        
        return f"{color}{display_value} {status}{Style.RESET_ALL}"
    
    async def display_critical_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        while self.running:
            os.system('clear' if os.name == 'posix' else 'cls')
            
            print(f"{Fore.CYAN}{'='*90}")
            print(f"{Fore.CYAN}üîç CRITICAL SCANNER MONITOR - Real-time Critical Data")
            print(f"{Fore.CYAN}{'='*90}")
            print(f"{Fore.WHITE}–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            print(f"{Fore.YELLOW}üìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• (–ö–†–ò–¢–ò–ß–ù–û):")
            print(f"–°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:     {self.get_status_indicator(self.metrics.data_latency_ms, self.critical_thresholds['MAX_DATA_LATENCY_MS'], reverse=True)}ms")
            print(f"–°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:         {self.get_status_indicator(self.metrics.data_freshness_pct, self.critical_thresholds['MIN_DATA_FRESHNESS_PCT'], percentage=True)}")
            print(f"–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:         {self.get_status_indicator(self.metrics.data_quality_score * 100, self.critical_thresholds['MIN_DATA_QUALITY'] * 100, percentage=True)}")
            print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:       {Fore.CYAN}{self.metrics.stale_data_count}{Style.RESET_ALL}")
            print()
            
            # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            print(f"{Fore.YELLOW}üåê WEBSOCKET –°–û–ï–î–ò–ù–ï–ù–ò–Ø:")
            ws_connected = sum(1 for connected in self.metrics.ws_connections.values() if connected)
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:     {self.get_status_indicator(ws_connected, self.critical_thresholds['MIN_WS_CONNECTIONS'])}")
            
            for exchange_id, connected in self.metrics.ws_connections.items():
                status_color = Fore.GREEN if connected else Fore.RED
                status_text = "‚úÖ Connected" if connected else "‚ùå Disconnected"
                last_msg = self.metrics.ws_last_message.get(exchange_id, 0)
                age = time.time() - last_msg if last_msg > 0 else 999
                
                print(f"{self.exchanges[exchange_id].name:<10} {status_color}{status_text:<15}{Style.RESET_ALL} "
                      f"Last: {age:.1f}s ago")
            print()
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–µ—Ä–∞
            print(f"{Fore.YELLOW}‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –°–ö–ê–ù–ï–†–ê:")
            print(f"–ß–∞—Å—Ç–æ—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:    {self.get_status_indicator(self.metrics.scan_frequency_hz, self.critical_thresholds['MIN_SCAN_FREQUENCY_HZ'])} Hz")
            print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:         {self.get_status_indicator(self.metrics.processing_time_ms, self.critical_thresholds['MAX_PROCESSING_TIME_MS'], reverse=True)}ms")
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–æ–≤:      {Fore.CYAN}{self.metrics.missed_scans}{Style.RESET_ALL}")
            print()
            
            # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–∫–∞–Ω—ã
            print(f"{Fore.YELLOW}üí∞ –õ–ò–ö–í–ò–î–ù–û–°–¢–¨:")
            print(f"–°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ —Å—Ç–∞–∫–∞–Ω–∞: {self.get_status_indicator(self.metrics.avg_orderbook_depth_usd, self.critical_thresholds['MIN_ORDERBOOK_DEPTH_USD'])} USD")
            print(f"–ú–∏–Ω. –æ–±—ä–µ–º bid/ask:      {Fore.CYAN}{self.metrics.min_bid_ask_volume_usd:.0f}{Style.RESET_ALL} USD")
            print(f"–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É:         {Fore.CYAN}{self.metrics.liquidity_impact_pct:.2f}%{Style.RESET_ALL}")
            print()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            print(f"{Fore.YELLOW}üîç –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í:")
            print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤:          {Fore.CYAN}{self.metrics.total_signals}{Style.RESET_ALL}")
            print(f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö:            {Fore.GREEN}{self.metrics.quality_signals}{Style.RESET_ALL} ({self.metrics.quality_signals/max(1,self.metrics.total_signals)*100:.1f}%)")
            print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ:           {Fore.YELLOW}{self.metrics.filtered_signals}{Style.RESET_ALL} ({self.metrics.filtered_signals/max(1,self.metrics.total_signals)*100:.1f}%)")
            print(f"–ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤:      {Fore.RED}{self.metrics.anomalous_spreads}{Style.RESET_ALL}")
            print()
            
            # –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            print(f"{Fore.YELLOW}üíé –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
            print(f"–ú–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂:    {Fore.GREEN}{self.metrics.inter_opportunities}{Style.RESET_ALL}")
            print(f"–¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂:    {Fore.GREEN}{self.metrics.triangular_opportunities}{Style.RESET_ALL}")
            print(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Å:      {self.get_status_indicator(self.metrics.opportunities_per_hour, self.critical_thresholds['MIN_OPPORTUNITIES_PER_HOUR'])}")
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:         {Fore.CYAN}{self.metrics.avg_profit_pct:.2f}%{Style.RESET_ALL}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:    {Fore.CYAN}{self.metrics.max_profit_pct:.2f}%{Style.RESET_ALL}")
            print()
            
            # –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
            print(f"{Fore.YELLOW}üö® –û–®–ò–ë–ö–ò –ò –ü–†–û–ë–õ–ï–ú–´:")
            total_errors = self.metrics.connection_errors + self.metrics.data_errors + self.metrics.timeout_errors
            error_rate = total_errors / max(1, self.metrics.total_signals) * 100
            print(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫:    {self.get_status_indicator(error_rate, self.critical_thresholds['MAX_ERROR_RATE_PCT'], reverse=True, percentage=True)}")
            print(f"–û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:      {Fore.RED}{self.metrics.connection_errors}{Style.RESET_ALL}")
            print(f"–û—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö:           {Fore.RED}{self.metrics.data_errors}{Style.RESET_ALL}")
            print(f"–¢–∞–π–º–∞—É—Ç—ã:                {Fore.RED}{self.metrics.timeout_errors}{Style.RESET_ALL}")
            print(f"Rate limits:             {Fore.YELLOW}{self.metrics.api_rate_limits}{Style.RESET_ALL}")
            print()
            
            # –°—Ç–∞—Ç—É—Å –±–∏—Ä–∂ –¥–µ—Ç–∞–ª—å–Ω–æ
            print(f"{Fore.YELLOW}üì° –î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ë–ò–†–ñ:")
            print(f"{'–ë–∏—Ä–∂–∞':<10} {'REST':<12} {'WebSocket':<12} {'–ì–ª—É–±–∏–Ω–∞':<10} {'–û—à–∏–±–∫–∏':<8}")
            print("-" * 70)
            
            for exchange_id, exchange in self.exchanges.items():
                rest_status = f"‚úÖ {exchange.rest_latency_ms:.0f}ms" if exchange.rest_connected else "‚ùå Offline"
                ws_status = "‚úÖ Active" if self.metrics.ws_connections.get(exchange_id, False) else "‚ùå Down"
                depth = f"${exchange.orderbook_depth_usd:.0f}" if exchange.orderbook_depth_usd > 0 else "$0"
                
                rest_color = Fore.GREEN if exchange.rest_connected else Fore.RED
                ws_color = Fore.GREEN if self.metrics.ws_connections.get(exchange_id, False) else Fore.RED
                
                print(f"{exchange.name:<10} {rest_color}{rest_status:<12}{Style.RESET_ALL} "
                      f"{ws_color}{ws_status:<12}{Style.RESET_ALL} {depth:<10} {exchange.error_count:<8}")
            
            print()
            print(f"{Fore.WHITE}–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(self.last_update).strftime('%H:%M:%S')}")
            print(f"{Fore.WHITE}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            await asyncio.sleep(1)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = CriticalScannerMonitor()
    
    try:
        print(f"{Fore.CYAN}üöÄ –ó–∞–ø—É—Å–∫ Critical Scanner Monitor...")
        print(f"{Fore.WHITE}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–µ—Ä–∞...")
        await asyncio.sleep(2)
        
        await monitor.start_monitoring()
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitor.running = False
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print(f"{Fore.GREEN}‚úÖ Critical Scanner Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import colorama, aiohttp
    except ImportError:
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        os.system("pip install colorama aiohttp")
    
    asyncio.run(main())
