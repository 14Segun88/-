#!/usr/bin/env python3
import ccxt
import os
import asyncio

async def test_okx_variants():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OKX"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OKX —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Å–ø—Ä–æ—Ñ—Ä–∞–∑–∞–º–∏...")
    
    passphrases = ["Egor1998!", "Egor1998", "0502794579Egor"]
    
    for i, passphrase in enumerate(passphrases):
        print(f"  –í–∞—Ä–∏–∞–Ω—Ç {i+1}: passphrase = '{passphrase}'")
        try:
            okx = ccxt.okx({
                'apiKey': 'ab4f2fe8-e2c4-4d18-9712-d21c8f2f187c',
                'secret': 'FC63C15B1D2DB5C73632ED5BACE49290',
                'password': passphrase,
                'sandbox': False,
                'enableRateLimit': True,
            })
            markets = okx.load_markets()
            print(f"  ‚úÖ –£—Å–ø–µ—Ö! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ä—ã–Ω–∫–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance = okx.fetch_balance()
            print(f"  üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω")
            return True
            
        except Exception as e:
            error_str = str(e)[:120]
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
    
    return False

async def test_bitget_environments():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—ã Bitget"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bitget...")
    
    configs = [
        {'sandbox': False, 'test': False, 'name': 'Production'},
        {'sandbox': True, 'test': True, 'name': 'Testnet'},
    ]
    
    for config in configs:
        print(f"  –°—Ä–µ–¥–∞: {config['name']}")
        try:
            bitget = ccxt.bitget({
                'apiKey': 'bg_1d2ce1e1b74f17527e88d0aaff6609a0',
                'secret': '311ad3c3d52e3caa1af61f27049fc0dcefce16ec94192eb7795698fc1f5ef4da',
                'password': '0502794579Egor',
                'sandbox': config['sandbox'],
                'test': config['test'],
                'enableRateLimit': True,
            })
            
            markets = bitget.load_markets()
            print(f"  ‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(markets)}")
            
            balance = bitget.fetch_balance()
            print(f"  ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω")
            return True
            
        except Exception as e:
            error_str = str(e)[:120]
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
    
    return False

async def test_phemex_environments():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—ã Phemex"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Phemex...")
    
    configs = [
        {'sandbox': False, 'name': 'Production'},
        {'sandbox': True, 'name': 'Testnet'},
    ]
    
    for config in configs:
        print(f"  –°—Ä–µ–¥–∞: {config['name']}")
        try:
            phemex = ccxt.phemex({
                'apiKey': 'f78a12fd-2582-4e76-95dc-19eef5d37971',
                'secret': 'KE-YNJayBvL9Zpde-k0u68iuUiDEy13NJDBzxv82JPBkMWU2ODZiMS1mYmQyLTQ2MGMtYjA3Ny1hYWQ0NmFlOGYxNjk',
                'sandbox': config['sandbox'],
                'enableRateLimit': True,
            })
            
            markets = phemex.load_markets()
            print(f"  ‚úÖ –†—ã–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(markets)}")
            
            balance = phemex.fetch_balance()
            print(f"  ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω")
            return True
            
        except Exception as e:
            error_str = str(e)[:120]
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {error_str}")
    
    return False

async def main():
    print("üîë –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ï–ô")
    print("=" * 50)
    
    okx_ok = await test_okx_variants()
    bitget_ok = await test_bitget_environments() 
    phemex_ok = await test_phemex_environments()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"  OKX: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if okx_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  Bitget: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if bitget_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  Phemex: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if phemex_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    working = sum([okx_ok, bitget_ok, phemex_ok])
    print(f"\nüéØ –ì–æ—Ç–æ–≤—ã—Ö –±–∏—Ä–∂: {working}/3")
    
    if working >= 2:
        print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞!")
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    asyncio.run(main())
